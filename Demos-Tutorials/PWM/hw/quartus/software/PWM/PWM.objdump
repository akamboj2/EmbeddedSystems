
PWM.elf:     file format elf32-littlenios2
PWM.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000039c0 memsz 0x000039c0 flags r-x
    LOAD off    0x000049e0 vaddr 0x000239e0 paddr 0x0002510c align 2**12
         filesz 0x0000172c memsz 0x0000172c flags rw-
    LOAD off    0x00006838 vaddr 0x00026838 paddr 0x00026838 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003744  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  00023988  00023988  00004988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000172c  000239e0  0002510c  000049e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00026838  00026838  00006838  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00026958  00026958  0000610c  2**0
                  CONTENTS
  7 .epcs_flash_controller_0 00000000  00041000  00041000  0000610c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000610c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000638  00000000  00000000  00006130  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00008aac  00000000  00000000  00006768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e5e  00000000  00000000  0000f214  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002ffe  00000000  00000000  00012072  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000eec  00000000  00000000  00015070  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001fcb  00000000  00000000  00015f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000770  00000000  00000000  00017f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00018698  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000178  00000000  00000000  000186c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001a74a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0001a74d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001a759  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001a75a  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0001a75b  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0001a766  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0001a771  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0001a77c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000020  00000000  00000000  0001a786  2**0
                  CONTENTS, READONLY
 27 .jdi          000000de  00000000  00000000  0001a7a6  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0004bb9c  00000000  00000000  0001a884  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00023988 l    d  .rodata	00000000 .rodata
000239e0 l    d  .rwdata	00000000 .rwdata
00026838 l    d  .bss	00000000 .bss
00026958 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00041000 l    d  .epcs_flash_controller_0	00000000 .epcs_flash_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../PWM_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
0002034c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000204b4 l     F .text	00000034 alt_dev_reg
000239e0 l     O .rwdata	000000cc epcs_flash_controller_0
00023aac l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
00020574 l     F .text	00000034 alt_flash_device_register
000205fc l     F .text	000003f8 alt_epcs_flash_query
000209f4 l     F .text	000000ec alt_epcs_flash_memcmp
00020dcc l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00021294 l     F .text	0000020c altera_avalon_jtag_uart_irq
000214a0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 epcs_commands.c
00021b34 l     F .text	00000038 epcs_test_wip
00021b6c l     F .text	0000003c epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00022240 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00022394 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000223c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000228f0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00022a30 l     F .text	0000003c alt_get_errno
00022a6c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00024cb4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00026850 g     O .bss	00000004 alt_instruction_exception_handler
00020d40 g     F .text	0000008c alt_epcs_flash_get_info
00020438 g     F .text	0000007c alt_main
00026858 g     O .bss	00000100 alt_irq
0002510c g       *ABS*	00000000 __flash_rwdata_start
00022e8c g     F .text	00000024 altera_nios2_gen2_irq_init
00021ba8 g     F .text	000000fc epcs_sector_erase
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00026854 g     O .bss	00000004 errno
0002683c g     O .bss	00000004 alt_argv
0002d0d8 g       *ABS*	00000000 _gp
00024b34 g     O .rwdata	00000180 alt_fd_list
00021dec g     F .text	0000006c epcs_write_status_register
000230ac g     F .text	00000090 alt_find_dev
000234dc g     F .text	00000148 memcpy
000229b4 g     F .text	0000007c alt_io_redirect
00023988 g       *ABS*	00000000 __DTOR_END__
00023378 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00020ed8 g     F .text	00000100 alt_epcs_flash_write_block
00021698 g     F .text	0000021c altera_avalon_jtag_uart_read
00020290 g     F .text	00000084 generate_pwm
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000232e8 g     F .text	00000090 alt_icache_flush
000250e8 g     O .rwdata	00000004 alt_max_fd
00020e60 g     F .text	00000078 alt_epcs_flash_erase_block
00025104 g     O .rwdata	00000004 _global_impure_ptr
000220b8 g     F .text	0000005c epcs_exit_4_bytes_mode
00026958 g       *ABS*	00000000 __bss_end
00022800 g     F .text	000000f0 alt_iic_isr_register
00022d84 g     F .text	00000108 alt_tick
000227b4 g     F .text	0000004c alt_ic_irq_enabled
00022ce8 g     F .text	0000009c alt_alarm_stop
00026844 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00024b0c g     O .rwdata	00000028 alt_dev_null
0002234c g     F .text	00000048 alt_dcache_flush_all
0002510c g       *ABS*	00000000 __ram_rwdata_end
000250e0 g     O .rwdata	00000008 alt_dev_list
000239e0 g       *ABS*	00000000 __ram_rodata_end
00021f74 g     F .text	00000068 epcs_read_electronic_signature
00026958 g       *ABS*	00000000 end
000211d4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00023988 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
000218b4 g     F .text	00000224 altera_avalon_jtag_uart_write
000237d4 g     F .text	00000180 __call_exitprocs
00020244 g     F .text	0000004c _start
00026848 g     O .bss	00000004 _alt_tick_rate
00022eb0 g     F .text	000001fc alt_avalon_spi_command
0002684c g     O .bss	00000004 _alt_nticks
00020520 g     F .text	00000054 alt_sys_init
000236bc g     F .text	00000118 __register_exitproc
00021540 g     F .text	00000068 altera_avalon_jtag_uart_close
000239e0 g       *ABS*	00000000 __ram_rwdata_start
00023988 g       *ABS*	00000000 __ram_rodata_start
00021ad8 g     F .text	0000005c epcs_read_status_register
00021070 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00023244 g     F .text	000000a4 alt_get_fd
00021fdc g     F .text	00000080 epcs_read_device_id
00023460 g     F .text	0000007c memcmp
00021130 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00026958 g       *ABS*	00000000 __alt_stack_base
00021180 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00041000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
0002313c g     F .text	00000108 alt_find_file
000223fc g     F .text	000000a4 alt_dev_llist_insert
000250f0 g     O .rwdata	00000008 alt_flash_dev_list
00026838 g       *ABS*	00000000 __bss_start
00020314 g     F .text	00000038 main
00026840 g     O .bss	00000004 alt_envp
000210d0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000250ec g     O .rwdata	00000004 alt_errno
00023988 g       *ABS*	00000000 __CTOR_END__
00020ae0 g     F .text	00000260 alt_epcs_flash_write
00023988 g       *ABS*	00000000 __flash_rodata_start
00023988 g       *ABS*	00000000 __DTOR_LIST__
000204e8 g     F .text	00000038 alt_irq_init
00022c84 g     F .text	00000064 alt_release_fd
00023414 g     F .text	00000014 atexit
00025108 g     O .rwdata	00000004 _impure_ptr
00026838 g     O .bss	00000004 alt_argc
00022500 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000250d8 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00021ca4 g     F .text	000000f4 epcs_read_buffer
000205a8 g     F .text	00000054 alt_epcs_flash_init
00022650 g     F .text	00000050 alt_ic_isr_register
0002510c g       *ABS*	00000000 _edata
00026958 g       *ABS*	00000000 _end
00022560 g     F .text	00000068 alt_flash_open_dev
00020244 g       *ABS*	00000000 __ram_exceptions_end
000215a8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00022728 g     F .text	0000008c alt_ic_irq_disable
0002205c g     F .text	0000005c epcs_enter_4_bytes_mode
00023428 g     F .text	00000038 exit
000225c8 g     F .text	00000054 alt_flash_close_dev
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00023954 g     F .text	00000034 _exit
00022114 g     F .text	0000012c alt_alarm_start
00023624 g     F .text	00000098 strlen
00021d98 g     F .text	00000054 epcs_write_enable
00022b30 g     F .text	00000154 open
0002261c g     F .text	00000034 alt_icache_flush_all
000250f8 g     O .rwdata	00000004 alt_priority_mask
000226a0 g     F .text	00000088 alt_ic_irq_enable
00020fd8 g     F .text	00000098 alt_epcs_flash_read
000250fc g     O .rwdata	00000008 alt_alarm_list
000224a0 g     F .text	00000060 _do_ctors
0002227c g     F .text	000000d0 close
000203b4 g     F .text	00000084 alt_load
00021e58 g     F .text	0000011c epcs_write_buffer



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_mem_epcs_flash_controller_0+0xfffdf004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000b4 	movhi	r2,2
   20140:	109a1604 	addi	r2,r2,26712
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000b4 	movhi	r2,2
   20158:	109a1604 	addi	r2,r2,26712
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_mem_epcs_flash_controller_0+0xfffdf12c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_mem_epcs_flash_controller_0+0xfffdf120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a5de17 	ldw	r2,-26760(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a5de17 	ldw	r2,-26760(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <__alt_mem_epcs_flash_controller_0+0xfffdf248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2025c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20260:	d6b43614 	ori	gp,gp,53464
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20268:	109a0e14 	ori	r2,r2,26680

    movhi r3, %hi(__bss_end)
   2026c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20270:	18da5614 	ori	r3,r3,26968

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <__alt_mem_epcs_flash_controller_0+0xfffdf278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	00203b40 	call	203b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	00204380 	call	20438 <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <__alt_mem_epcs_flash_controller_0+0xfffdf28c>

00020290 <generate_pwm>:
#include <inttypes.h>
#include "system.h"
#include "io.h"
#include "altera_avalon_pio_regs.h"

void generate_pwm(int period, int dc, uint8_t polarity){
   20290:	defffa04 	addi	sp,sp,-24
   20294:	df000515 	stw	fp,20(sp)
   20298:	df000504 	addi	fp,sp,20
   2029c:	e13ffd15 	stw	r4,-12(fp)
   202a0:	e17ffe15 	stw	r5,-8(fp)
   202a4:	3005883a 	mov	r2,r6
   202a8:	e0bfff05 	stb	r2,-4(fp)
	uint32_t set_period = period*50000000;
   202ac:	e0fffd17 	ldw	r3,-12(fp)
   202b0:	0080bef4 	movhi	r2,763
   202b4:	10bc2004 	addi	r2,r2,-3968
   202b8:	1885383a 	mul	r2,r3,r2
   202bc:	e0bffb15 	stw	r2,-20(fp)
	uint32_t set_dc = period*dc;
   202c0:	e0fffd17 	ldw	r3,-12(fp)
   202c4:	e0bffe17 	ldw	r2,-8(fp)
   202c8:	1885383a 	mul	r2,r3,r2
   202cc:	e0bffc15 	stw	r2,-16(fp)

	IOWR_32DIRECT(PIO_0_BASE,0,set_period);
   202d0:	e0fffb17 	ldw	r3,-20(fp)
   202d4:	00800134 	movhi	r2,4
   202d8:	10880c04 	addi	r2,r2,8240
   202dc:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PIO_1_BASE,0,set_dc);
   202e0:	e0fffc17 	ldw	r3,-16(fp)
   202e4:	00800134 	movhi	r2,4
   202e8:	10880804 	addi	r2,r2,8224
   202ec:	10c00035 	stwio	r3,0(r2)
	IOWR_8DIRECT(PIO_2_BASE,0,polarity);
   202f0:	e0ffff03 	ldbu	r3,-4(fp)
   202f4:	00800134 	movhi	r2,4
   202f8:	10880404 	addi	r2,r2,8208
   202fc:	10c00025 	stbio	r3,0(r2)

}
   20300:	0001883a 	nop
   20304:	e037883a 	mov	sp,fp
   20308:	df000017 	ldw	fp,0(sp)
   2030c:	dec00104 	addi	sp,sp,4
   20310:	f800283a 	ret

00020314 <main>:

int main()
{
   20314:	defffe04 	addi	sp,sp,-8
   20318:	dfc00115 	stw	ra,4(sp)
   2031c:	df000015 	stw	fp,0(sp)
   20320:	d839883a 	mov	fp,sp
	//int period = 1000;
	//printf("Hello from Nios II!\n");
	//IOWR_8DIRECT(PIO_0_BASE,0,period);

	generate_pwm(.001, .5, 1);
   20324:	01800044 	movi	r6,1
   20328:	000b883a 	mov	r5,zero
   2032c:	0009883a 	mov	r4,zero
   20330:	00202900 	call	20290 <generate_pwm>

	return 0;
   20334:	0005883a 	mov	r2,zero
}
   20338:	e037883a 	mov	sp,fp
   2033c:	dfc00117 	ldw	ra,4(sp)
   20340:	df000017 	ldw	fp,0(sp)
   20344:	dec00204 	addi	sp,sp,8
   20348:	f800283a 	ret

0002034c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2034c:	defffc04 	addi	sp,sp,-16
   20350:	df000315 	stw	fp,12(sp)
   20354:	df000304 	addi	fp,sp,12
   20358:	e13ffd15 	stw	r4,-12(fp)
   2035c:	e17ffe15 	stw	r5,-8(fp)
   20360:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   20364:	e0fffe17 	ldw	r3,-8(fp)
   20368:	e0bffd17 	ldw	r2,-12(fp)
   2036c:	18800c26 	beq	r3,r2,203a0 <alt_load_section+0x54>
  {
    while( to != end )
   20370:	00000806 	br	20394 <alt_load_section+0x48>
    {
      *to++ = *from++;
   20374:	e0bffe17 	ldw	r2,-8(fp)
   20378:	10c00104 	addi	r3,r2,4
   2037c:	e0fffe15 	stw	r3,-8(fp)
   20380:	e0fffd17 	ldw	r3,-12(fp)
   20384:	19000104 	addi	r4,r3,4
   20388:	e13ffd15 	stw	r4,-12(fp)
   2038c:	18c00017 	ldw	r3,0(r3)
   20390:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   20394:	e0fffe17 	ldw	r3,-8(fp)
   20398:	e0bfff17 	ldw	r2,-4(fp)
   2039c:	18bff51e 	bne	r3,r2,20374 <__alt_mem_epcs_flash_controller_0+0xfffdf374>
    {
      *to++ = *from++;
    }
  }
}
   203a0:	0001883a 	nop
   203a4:	e037883a 	mov	sp,fp
   203a8:	df000017 	ldw	fp,0(sp)
   203ac:	dec00104 	addi	sp,sp,4
   203b0:	f800283a 	ret

000203b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   203b4:	defffe04 	addi	sp,sp,-8
   203b8:	dfc00115 	stw	ra,4(sp)
   203bc:	df000015 	stw	fp,0(sp)
   203c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   203c4:	018000b4 	movhi	r6,2
   203c8:	31944304 	addi	r6,r6,20748
   203cc:	014000b4 	movhi	r5,2
   203d0:	294e7804 	addi	r5,r5,14816
   203d4:	010000b4 	movhi	r4,2
   203d8:	21144304 	addi	r4,r4,20748
   203dc:	002034c0 	call	2034c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   203e0:	018000b4 	movhi	r6,2
   203e4:	31809104 	addi	r6,r6,580
   203e8:	014000b4 	movhi	r5,2
   203ec:	29400804 	addi	r5,r5,32
   203f0:	010000b4 	movhi	r4,2
   203f4:	21000804 	addi	r4,r4,32
   203f8:	002034c0 	call	2034c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   203fc:	018000b4 	movhi	r6,2
   20400:	318e7804 	addi	r6,r6,14816
   20404:	014000b4 	movhi	r5,2
   20408:	294e6204 	addi	r5,r5,14728
   2040c:	010000b4 	movhi	r4,2
   20410:	210e6204 	addi	r4,r4,14728
   20414:	002034c0 	call	2034c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20418:	002234c0 	call	2234c <alt_dcache_flush_all>
  alt_icache_flush_all();
   2041c:	002261c0 	call	2261c <alt_icache_flush_all>
}
   20420:	0001883a 	nop
   20424:	e037883a 	mov	sp,fp
   20428:	dfc00117 	ldw	ra,4(sp)
   2042c:	df000017 	ldw	fp,0(sp)
   20430:	dec00204 	addi	sp,sp,8
   20434:	f800283a 	ret

00020438 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20438:	defffd04 	addi	sp,sp,-12
   2043c:	dfc00215 	stw	ra,8(sp)
   20440:	df000115 	stw	fp,4(sp)
   20444:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20448:	0009883a 	mov	r4,zero
   2044c:	00204e80 	call	204e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   20450:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20454:	00205200 	call	20520 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   20458:	018000b4 	movhi	r6,2
   2045c:	318e6204 	addi	r6,r6,14728
   20460:	014000b4 	movhi	r5,2
   20464:	294e6204 	addi	r5,r5,14728
   20468:	010000b4 	movhi	r4,2
   2046c:	210e6204 	addi	r4,r4,14728
   20470:	00229b40 	call	229b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   20474:	00224a00 	call	224a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   20478:	010000b4 	movhi	r4,2
   2047c:	21094004 	addi	r4,r4,9472
   20480:	00234140 	call	23414 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   20484:	d0a5d817 	ldw	r2,-26784(gp)
   20488:	d0e5d917 	ldw	r3,-26780(gp)
   2048c:	d125da17 	ldw	r4,-26776(gp)
   20490:	200d883a 	mov	r6,r4
   20494:	180b883a 	mov	r5,r3
   20498:	1009883a 	mov	r4,r2
   2049c:	00203140 	call	20314 <main>
   204a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   204a4:	01000044 	movi	r4,1
   204a8:	002227c0 	call	2227c <close>
  exit (result);
   204ac:	e13fff17 	ldw	r4,-4(fp)
   204b0:	00234280 	call	23428 <exit>

000204b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   204b4:	defffd04 	addi	sp,sp,-12
   204b8:	dfc00215 	stw	ra,8(sp)
   204bc:	df000115 	stw	fp,4(sp)
   204c0:	df000104 	addi	fp,sp,4
   204c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   204c8:	d1600204 	addi	r5,gp,-32760
   204cc:	e13fff17 	ldw	r4,-4(fp)
   204d0:	00223fc0 	call	223fc <alt_dev_llist_insert>
}
   204d4:	e037883a 	mov	sp,fp
   204d8:	dfc00117 	ldw	ra,4(sp)
   204dc:	df000017 	ldw	fp,0(sp)
   204e0:	dec00204 	addi	sp,sp,8
   204e4:	f800283a 	ret

000204e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   204e8:	defffd04 	addi	sp,sp,-12
   204ec:	dfc00215 	stw	ra,8(sp)
   204f0:	df000115 	stw	fp,4(sp)
   204f4:	df000104 	addi	fp,sp,4
   204f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   204fc:	0022e8c0 	call	22e8c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20500:	00800044 	movi	r2,1
   20504:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20508:	0001883a 	nop
   2050c:	e037883a 	mov	sp,fp
   20510:	dfc00117 	ldw	ra,4(sp)
   20514:	df000017 	ldw	fp,0(sp)
   20518:	dec00204 	addi	sp,sp,8
   2051c:	f800283a 	ret

00020520 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20520:	defffe04 	addi	sp,sp,-8
   20524:	dfc00115 	stw	ra,4(sp)
   20528:	df000015 	stw	fp,0(sp)
   2052c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
   20530:	010000b4 	movhi	r4,2
   20534:	210e7804 	addi	r4,r4,14816
   20538:	00205a80 	call	205a8 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   2053c:	000d883a 	mov	r6,zero
   20540:	000b883a 	mov	r5,zero
   20544:	010000b4 	movhi	r4,2
   20548:	210eb504 	addi	r4,r4,15060
   2054c:	00211d40 	call	211d4 <altera_avalon_jtag_uart_init>
   20550:	010000b4 	movhi	r4,2
   20554:	210eab04 	addi	r4,r4,15020
   20558:	00204b40 	call	204b4 <alt_dev_reg>
}
   2055c:	0001883a 	nop
   20560:	e037883a 	mov	sp,fp
   20564:	dfc00117 	ldw	ra,4(sp)
   20568:	df000017 	ldw	fp,0(sp)
   2056c:	dec00204 	addi	sp,sp,8
   20570:	f800283a 	ret

00020574 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
   20574:	defffd04 	addi	sp,sp,-12
   20578:	dfc00215 	stw	ra,8(sp)
   2057c:	df000115 	stw	fp,4(sp)
   20580:	df000104 	addi	fp,sp,4
   20584:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
   20588:	d1600604 	addi	r5,gp,-32744
   2058c:	e13fff17 	ldw	r4,-4(fp)
   20590:	00223fc0 	call	223fc <alt_dev_llist_insert>
}
   20594:	e037883a 	mov	sp,fp
   20598:	dfc00117 	ldw	ra,4(sp)
   2059c:	df000017 	ldw	fp,0(sp)
   205a0:	dec00204 	addi	sp,sp,8
   205a4:	f800283a 	ret

000205a8 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
   205a8:	defffc04 	addi	sp,sp,-16
   205ac:	dfc00315 	stw	ra,12(sp)
   205b0:	df000215 	stw	fp,8(sp)
   205b4:	df000204 	addi	fp,sp,8
   205b8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
   205bc:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
   205c0:	e13fff17 	ldw	r4,-4(fp)
   205c4:	00205fc0 	call	205fc <alt_epcs_flash_query>
   205c8:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
   205cc:	e0bffe17 	ldw	r2,-8(fp)
   205d0:	1000041e 	bne	r2,zero,205e4 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
   205d4:	e0bfff17 	ldw	r2,-4(fp)
   205d8:	1009883a 	mov	r4,r2
   205dc:	00205740 	call	20574 <alt_flash_device_register>
   205e0:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
   205e4:	e0bffe17 	ldw	r2,-8(fp)
}
   205e8:	e037883a 	mov	sp,fp
   205ec:	dfc00117 	ldw	ra,4(sp)
   205f0:	df000017 	ldw	fp,0(sp)
   205f4:	dec00204 	addi	sp,sp,8
   205f8:	f800283a 	ret

000205fc <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
   205fc:	defffc04 	addi	sp,sp,-16
   20600:	dfc00315 	stw	ra,12(sp)
   20604:	df000215 	stw	fp,8(sp)
   20608:	df000204 	addi	fp,sp,8
   2060c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
   20610:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
   20614:	e0bfff17 	ldw	r2,-4(fp)
   20618:	10003215 	stw	zero,200(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
   2061c:	e0bfff17 	ldw	r2,-4(fp)
   20620:	10802e17 	ldw	r2,184(r2)
   20624:	1009883a 	mov	r4,r2
   20628:	0021f740 	call	21f74 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
   2062c:	10c03fcc 	andi	r3,r2,255
   20630:	e0bfff17 	ldw	r2,-4(fp)
   20634:	10c03015 	stw	r3,192(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
   20638:	e0bfff17 	ldw	r2,-4(fp)
   2063c:	10803017 	ldw	r2,192(r2)
   20640:	10800598 	cmpnei	r2,r2,22
   20644:	10000a1e 	bne	r2,zero,20670 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
   20648:	e0bfff17 	ldw	r2,-4(fp)
   2064c:	00c02034 	movhi	r3,128
   20650:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
   20654:	e0bfff17 	ldw	r2,-4(fp)
   20658:	00c02004 	movi	r3,128
   2065c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   20660:	e0bfff17 	ldw	r2,-4(fp)
   20664:	00c00074 	movhi	r3,1
   20668:	10c01015 	stw	r3,64(r2)
   2066c:	0000ce06 	br	209a8 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
   20670:	e0bfff17 	ldw	r2,-4(fp)
   20674:	10803017 	ldw	r2,192(r2)
   20678:	10800518 	cmpnei	r2,r2,20
   2067c:	10000a1e 	bne	r2,zero,206a8 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
   20680:	e0bfff17 	ldw	r2,-4(fp)
   20684:	00c00834 	movhi	r3,32
   20688:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
   2068c:	e0bfff17 	ldw	r2,-4(fp)
   20690:	00c00804 	movi	r3,32
   20694:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   20698:	e0bfff17 	ldw	r2,-4(fp)
   2069c:	00c00074 	movhi	r3,1
   206a0:	10c01015 	stw	r3,64(r2)
   206a4:	0000c006 	br	209a8 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
   206a8:	e0bfff17 	ldw	r2,-4(fp)
   206ac:	10803017 	ldw	r2,192(r2)
   206b0:	108004d8 	cmpnei	r2,r2,19
   206b4:	10000a1e 	bne	r2,zero,206e0 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
   206b8:	e0bfff17 	ldw	r2,-4(fp)
   206bc:	00c00434 	movhi	r3,16
   206c0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
   206c4:	e0bfff17 	ldw	r2,-4(fp)
   206c8:	00c00404 	movi	r3,16
   206cc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   206d0:	e0bfff17 	ldw	r2,-4(fp)
   206d4:	00c00074 	movhi	r3,1
   206d8:	10c01015 	stw	r3,64(r2)
   206dc:	0000b206 	br	209a8 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
   206e0:	e0bfff17 	ldw	r2,-4(fp)
   206e4:	10803017 	ldw	r2,192(r2)
   206e8:	10800498 	cmpnei	r2,r2,18
   206ec:	10000a1e 	bne	r2,zero,20718 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
   206f0:	e0bfff17 	ldw	r2,-4(fp)
   206f4:	00c00234 	movhi	r3,8
   206f8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
   206fc:	e0bfff17 	ldw	r2,-4(fp)
   20700:	00c00204 	movi	r3,8
   20704:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
   20708:	e0bfff17 	ldw	r2,-4(fp)
   2070c:	00c00074 	movhi	r3,1
   20710:	10c01015 	stw	r3,64(r2)
   20714:	0000a406 	br	209a8 <alt_epcs_flash_query+0x3ac>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
   20718:	e0bfff17 	ldw	r2,-4(fp)
   2071c:	10803017 	ldw	r2,192(r2)
   20720:	10800418 	cmpnei	r2,r2,16
   20724:	10000a1e 	bne	r2,zero,20750 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
   20728:	e0bfff17 	ldw	r2,-4(fp)
   2072c:	00c000b4 	movhi	r3,2
   20730:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
   20734:	e0bfff17 	ldw	r2,-4(fp)
   20738:	00c00104 	movi	r3,4
   2073c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
   20740:	e0bfff17 	ldw	r2,-4(fp)
   20744:	00e00014 	movui	r3,32768
   20748:	10c01015 	stw	r3,64(r2)
   2074c:	00009606 	br	209a8 <alt_epcs_flash_query+0x3ac>
  {
    /* 
     * Read electronic signature doesn't work for newer devices; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
   20750:	e0bfff17 	ldw	r2,-4(fp)
   20754:	10802e17 	ldw	r2,184(r2)
   20758:	1009883a 	mov	r4,r2
   2075c:	0021fdc0 	call	21fdc <epcs_read_device_id>
   20760:	1007883a 	mov	r3,r2
   20764:	e0bfff17 	ldw	r2,-4(fp)
   20768:	10c03015 	stw	r3,192(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA15) /* EPCQ16 */
   2076c:	e0bfff17 	ldw	r2,-4(fp)
   20770:	10c03017 	ldw	r3,192(r2)
   20774:	00804034 	movhi	r2,256
   20778:	10bfffc4 	addi	r2,r2,-1
   2077c:	1886703a 	and	r3,r3,r2
   20780:	00800874 	movhi	r2,33
   20784:	10ae8544 	addi	r2,r2,-17899
   20788:	18800a1e 	bne	r3,r2,207b4 <alt_epcs_flash_query+0x1b8>
    {
      flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
   2078c:	e0bfff17 	ldw	r2,-4(fp)
   20790:	00c00834 	movhi	r3,32
   20794:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 32; /* number of sectors */
   20798:	e0bfff17 	ldw	r2,-4(fp)
   2079c:	00c00804 	movi	r3,32
   207a0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   207a4:	e0bfff17 	ldw	r2,-4(fp)
   207a8:	00c00074 	movhi	r3,1
   207ac:	10c01015 	stw	r3,64(r2)
   207b0:	00007d06 	br	209a8 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA16) /* EPCQ32 */
   207b4:	e0bfff17 	ldw	r2,-4(fp)
   207b8:	10c03017 	ldw	r3,192(r2)
   207bc:	00804034 	movhi	r2,256
   207c0:	10bfffc4 	addi	r2,r2,-1
   207c4:	1886703a 	and	r3,r3,r2
   207c8:	00800874 	movhi	r2,33
   207cc:	10ae8584 	addi	r2,r2,-17898
   207d0:	18800a1e 	bne	r3,r2,207fc <alt_epcs_flash_query+0x200>
    {
      flash->dev.region_info[0].region_size = 32 * 1024 * 1024 / 8;
   207d4:	e0bfff17 	ldw	r2,-4(fp)
   207d8:	00c01034 	movhi	r3,64
   207dc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64; /* number of sectors */
   207e0:	e0bfff17 	ldw	r2,-4(fp)
   207e4:	00c01004 	movi	r3,64
   207e8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   207ec:	e0bfff17 	ldw	r2,-4(fp)
   207f0:	00c00074 	movhi	r3,1
   207f4:	10c01015 	stw	r3,64(r2)
   207f8:	00006b06 	br	209a8 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA17) /* EPCQ64 */
   207fc:	e0bfff17 	ldw	r2,-4(fp)
   20800:	10c03017 	ldw	r3,192(r2)
   20804:	00804034 	movhi	r2,256
   20808:	10bfffc4 	addi	r2,r2,-1
   2080c:	1886703a 	and	r3,r3,r2
   20810:	00800874 	movhi	r2,33
   20814:	10ae85c4 	addi	r2,r2,-17897
   20818:	18800a1e 	bne	r3,r2,20844 <alt_epcs_flash_query+0x248>
    {
      flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
   2081c:	e0bfff17 	ldw	r2,-4(fp)
   20820:	00c02034 	movhi	r3,128
   20824:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 128; /* number of sectors */
   20828:	e0bfff17 	ldw	r2,-4(fp)
   2082c:	00c02004 	movi	r3,128
   20830:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   20834:	e0bfff17 	ldw	r2,-4(fp)
   20838:	00c00074 	movhi	r3,1
   2083c:	10c01015 	stw	r3,64(r2)
   20840:	00005906 	br	209a8 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
   20844:	e0bfff17 	ldw	r2,-4(fp)
   20848:	10c03017 	ldw	r3,192(r2)
   2084c:	00804034 	movhi	r2,256
   20850:	10bfffc4 	addi	r2,r2,-1
   20854:	1886703a 	and	r3,r3,r2
   20858:	00800874 	movhi	r2,33
   2085c:	10ae8604 	addi	r2,r2,-17896
   20860:	18800a1e 	bne	r3,r2,2088c <alt_epcs_flash_query+0x290>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   20864:	e0bfff17 	ldw	r2,-4(fp)
   20868:	00c04034 	movhi	r3,256
   2086c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
   20870:	e0bfff17 	ldw	r2,-4(fp)
   20874:	00c04004 	movi	r3,256
   20878:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   2087c:	e0bfff17 	ldw	r2,-4(fp)
   20880:	00c00074 	movhi	r3,1
   20884:	10c01015 	stw	r3,64(r2)
   20888:	00004706 	br	209a8 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
   2088c:	e0bfff17 	ldw	r2,-4(fp)
   20890:	10803017 	ldw	r2,192(r2)
   20894:	10803fcc 	andi	r2,r2,255
   20898:	10800618 	cmpnei	r2,r2,24
   2089c:	10000a1e 	bne	r2,zero,208c8 <alt_epcs_flash_query+0x2cc>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
   208a0:	e0bfff17 	ldw	r2,-4(fp)
   208a4:	00c04034 	movhi	r3,256
   208a8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
   208ac:	e0bfff17 	ldw	r2,-4(fp)
   208b0:	00c01004 	movi	r3,64
   208b4:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
   208b8:	e0bfff17 	ldw	r2,-4(fp)
   208bc:	00c00134 	movhi	r3,4
   208c0:	10c01015 	stw	r3,64(r2)
   208c4:	00003806 	br	209a8 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
   208c8:	e0bfff17 	ldw	r2,-4(fp)
   208cc:	10803017 	ldw	r2,192(r2)
   208d0:	10803fcc 	andi	r2,r2,255
   208d4:	10800658 	cmpnei	r2,r2,25
   208d8:	10000d1e 	bne	r2,zero,20910 <alt_epcs_flash_query+0x314>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
   208dc:	e0bfff17 	ldw	r2,-4(fp)
   208e0:	00c08034 	movhi	r3,512
   208e4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
   208e8:	e0bfff17 	ldw	r2,-4(fp)
   208ec:	00c08004 	movi	r3,512
   208f0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   208f4:	e0bfff17 	ldw	r2,-4(fp)
   208f8:	00c00074 	movhi	r3,1
   208fc:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
   20900:	e0bfff17 	ldw	r2,-4(fp)
   20904:	00c00044 	movi	r3,1
   20908:	10c03215 	stw	r3,200(r2)
   2090c:	00002606 	br	209a8 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x20) /* EPCQ512 */
   20910:	e0bfff17 	ldw	r2,-4(fp)
   20914:	10803017 	ldw	r2,192(r2)
   20918:	10803fcc 	andi	r2,r2,255
   2091c:	10800818 	cmpnei	r2,r2,32
   20920:	10000d1e 	bne	r2,zero,20958 <alt_epcs_flash_query+0x35c>
    {
      flash->dev.region_info[0].region_size = 512 * 1024 * 1024 / 8;
   20924:	e0bfff17 	ldw	r2,-4(fp)
   20928:	00c10034 	movhi	r3,1024
   2092c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 1024; /* number of sectors */
   20930:	e0bfff17 	ldw	r2,-4(fp)
   20934:	00c10004 	movi	r3,1024
   20938:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   2093c:	e0bfff17 	ldw	r2,-4(fp)
   20940:	00c00074 	movhi	r3,1
   20944:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
   20948:	e0bfff17 	ldw	r2,-4(fp)
   2094c:	00c00044 	movi	r3,1
   20950:	10c03215 	stw	r3,200(r2)
   20954:	00001406 	br	209a8 <alt_epcs_flash_query+0x3ac>
    }
    else if((flash->silicon_id & 0xFF ) == 0x21) /* EPCQ1024 */
   20958:	e0bfff17 	ldw	r2,-4(fp)
   2095c:	10803017 	ldw	r2,192(r2)
   20960:	10803fcc 	andi	r2,r2,255
   20964:	10800858 	cmpnei	r2,r2,33
   20968:	10000d1e 	bne	r2,zero,209a0 <alt_epcs_flash_query+0x3a4>
    {
      flash->dev.region_info[0].region_size = 1024 * 1024 * 1024 / 8;
   2096c:	e0bfff17 	ldw	r2,-4(fp)
   20970:	00c20034 	movhi	r3,2048
   20974:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 2048; /* number of sectors */
   20978:	e0bfff17 	ldw	r2,-4(fp)
   2097c:	00c20004 	movi	r3,2048
   20980:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
   20984:	e0bfff17 	ldw	r2,-4(fp)
   20988:	00c00074 	movhi	r3,1
   2098c:	10c01015 	stw	r3,64(r2)

      /* Enable 4-bytes address mode if the device density is greater than 256Mbit. */
      flash->four_bytes_mode = 1;
   20990:	e0bfff17 	ldw	r2,-4(fp)
   20994:	00c00044 	movi	r3,1
   20998:	10c03215 	stw	r3,200(r2)
   2099c:	00000206 	br	209a8 <alt_epcs_flash_query+0x3ac>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
   209a0:	00bffb44 	movi	r2,-19
   209a4:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
   209a8:	e0bfff17 	ldw	r2,-4(fp)
   209ac:	10800e17 	ldw	r2,56(r2)
   209b0:	1007883a 	mov	r3,r2
   209b4:	e0bfff17 	ldw	r2,-4(fp)
   209b8:	10c02f15 	stw	r3,188(r2)
  flash->dev.number_of_regions = 1;
   209bc:	e0bfff17 	ldw	r2,-4(fp)
   209c0:	00c00044 	movi	r3,1
   209c4:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
   209c8:	e0bfff17 	ldw	r2,-4(fp)
   209cc:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
   209d0:	e0bfff17 	ldw	r2,-4(fp)
   209d4:	00c04004 	movi	r3,256
   209d8:	10c03115 	stw	r3,196(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
   209dc:	e0bffe17 	ldw	r2,-8(fp)
}
   209e0:	e037883a 	mov	sp,fp
   209e4:	dfc00117 	ldw	ra,4(sp)
   209e8:	df000017 	ldw	fp,0(sp)
   209ec:	dec00204 	addi	sp,sp,8
   209f0:	f800283a 	ret

000209f4 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
   209f4:	deffee04 	addi	sp,sp,-72
   209f8:	dfc01115 	stw	ra,68(sp)
   209fc:	df001015 	stw	fp,64(sp)
   20a00:	df001004 	addi	fp,sp,64
   20a04:	e13ffc15 	stw	r4,-16(fp)
   20a08:	e17ffd15 	stw	r5,-12(fp)
   20a0c:	e1bffe15 	stw	r6,-8(fp)
   20a10:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
   20a14:	00800804 	movi	r2,32
   20a18:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
   20a1c:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
   20a20:	00002706 	br	20ac0 <alt_epcs_flash_memcmp+0xcc>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
   20a24:	e0fff117 	ldw	r3,-60(fp)
   20a28:	e0bfff17 	ldw	r2,-4(fp)
   20a2c:	1880012e 	bgeu	r3,r2,20a34 <alt_epcs_flash_memcmp+0x40>
   20a30:	1805883a 	mov	r2,r3
   20a34:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
   20a38:	e0fffe17 	ldw	r3,-8(fp)
   20a3c:	e0bff017 	ldw	r2,-64(fp)
   20a40:	1885883a 	add	r2,r3,r2
   20a44:	e0fff404 	addi	r3,fp,-48
   20a48:	e1fff217 	ldw	r7,-56(fp)
   20a4c:	180d883a 	mov	r6,r3
   20a50:	100b883a 	mov	r5,r2
   20a54:	e13ffc17 	ldw	r4,-16(fp)
   20a58:	0020fd80 	call	20fd8 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
   20a5c:	1000020e 	bge	r2,zero,20a68 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
   20a60:	00bfffc4 	movi	r2,-1
   20a64:	00001906 	br	20acc <alt_epcs_flash_memcmp+0xd8>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
   20a68:	e0bff017 	ldw	r2,-64(fp)
   20a6c:	e0fffd17 	ldw	r3,-12(fp)
   20a70:	1885883a 	add	r2,r3,r2
   20a74:	e13ff217 	ldw	r4,-56(fp)
   20a78:	e0fff404 	addi	r3,fp,-48
   20a7c:	200d883a 	mov	r6,r4
   20a80:	180b883a 	mov	r5,r3
   20a84:	1009883a 	mov	r4,r2
   20a88:	00234600 	call	23460 <memcmp>
   20a8c:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
   20a90:	e0bff317 	ldw	r2,-52(fp)
   20a94:	10000226 	beq	r2,zero,20aa0 <alt_epcs_flash_memcmp+0xac>
    {
      return this_chunk_cmp;
   20a98:	e0bff317 	ldw	r2,-52(fp)
   20a9c:	00000b06 	br	20acc <alt_epcs_flash_memcmp+0xd8>
    }

    n -= this_chunk_size;
   20aa0:	e0bff217 	ldw	r2,-56(fp)
   20aa4:	e0ffff17 	ldw	r3,-4(fp)
   20aa8:	1885c83a 	sub	r2,r3,r2
   20aac:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
   20ab0:	e0fff017 	ldw	r3,-64(fp)
   20ab4:	e0bff217 	ldw	r2,-56(fp)
   20ab8:	1885883a 	add	r2,r3,r2
   20abc:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
   20ac0:	e0bfff17 	ldw	r2,-4(fp)
   20ac4:	103fd71e 	bne	r2,zero,20a24 <__alt_mem_epcs_flash_controller_0+0xfffdfa24>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
   20ac8:	0005883a 	mov	r2,zero
}
   20acc:	e037883a 	mov	sp,fp
   20ad0:	dfc00117 	ldw	ra,4(sp)
   20ad4:	df000017 	ldw	fp,0(sp)
   20ad8:	dec00204 	addi	sp,sp,8
   20adc:	f800283a 	ret

00020ae0 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
   20ae0:	defff404 	addi	sp,sp,-48
   20ae4:	dfc00b15 	stw	ra,44(sp)
   20ae8:	df000a15 	stw	fp,40(sp)
   20aec:	df000a04 	addi	fp,sp,40
   20af0:	e13ffc15 	stw	r4,-16(fp)
   20af4:	e17ffd15 	stw	r5,-12(fp)
   20af8:	e1bffe15 	stw	r6,-8(fp)
   20afc:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
   20b00:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   20b04:	e03ff815 	stw	zero,-32(fp)
   20b08:	00008306 	br	20d18 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
   20b0c:	e0fffc17 	ldw	r3,-16(fp)
   20b10:	e0bff817 	ldw	r2,-32(fp)
   20b14:	1004913a 	slli	r2,r2,4
   20b18:	1885883a 	add	r2,r3,r2
   20b1c:	10800d04 	addi	r2,r2,52
   20b20:	10800017 	ldw	r2,0(r2)
   20b24:	e0fffd17 	ldw	r3,-12(fp)
   20b28:	18807816 	blt	r3,r2,20d0c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
   20b2c:	e0fffc17 	ldw	r3,-16(fp)
   20b30:	e0bff817 	ldw	r2,-32(fp)
   20b34:	1004913a 	slli	r2,r2,4
   20b38:	1885883a 	add	r2,r3,r2
   20b3c:	10800d04 	addi	r2,r2,52
   20b40:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
   20b44:	e13ffc17 	ldw	r4,-16(fp)
   20b48:	e0bff817 	ldw	r2,-32(fp)
   20b4c:	1004913a 	slli	r2,r2,4
   20b50:	2085883a 	add	r2,r4,r2
   20b54:	10800e04 	addi	r2,r2,56
   20b58:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
   20b5c:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
   20b60:	e0fffd17 	ldw	r3,-12(fp)
   20b64:	1880690e 	bge	r3,r2,20d0c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
   20b68:	e0fffc17 	ldw	r3,-16(fp)
   20b6c:	e0bff817 	ldw	r2,-32(fp)
   20b70:	1004913a 	slli	r2,r2,4
   20b74:	1885883a 	add	r2,r3,r2
   20b78:	10800d04 	addi	r2,r2,52
   20b7c:	10800017 	ldw	r2,0(r2)
   20b80:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   20b84:	e03ff915 	stw	zero,-28(fp)
   20b88:	00005806 	br	20cec <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
   20b8c:	e0fffd17 	ldw	r3,-12(fp)
   20b90:	e0bffa17 	ldw	r2,-24(fp)
   20b94:	18804916 	blt	r3,r2,20cbc <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
   20b98:	e0fffc17 	ldw	r3,-16(fp)
   20b9c:	e0bff817 	ldw	r2,-32(fp)
   20ba0:	10800104 	addi	r2,r2,4
   20ba4:	1004913a 	slli	r2,r2,4
   20ba8:	1885883a 	add	r2,r3,r2
   20bac:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
   20bb0:	e0bffa17 	ldw	r2,-24(fp)
   20bb4:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
   20bb8:	e0fffd17 	ldw	r3,-12(fp)
   20bbc:	18803f0e 	bge	r3,r2,20cbc <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
   20bc0:	e0fffc17 	ldw	r3,-16(fp)
   20bc4:	e0bff817 	ldw	r2,-32(fp)
   20bc8:	10800104 	addi	r2,r2,4
   20bcc:	1004913a 	slli	r2,r2,4
   20bd0:	1885883a 	add	r2,r3,r2
   20bd4:	10c00017 	ldw	r3,0(r2)
   20bd8:	e0bffa17 	ldw	r2,-24(fp)
   20bdc:	1887883a 	add	r3,r3,r2
   20be0:	e0bffd17 	ldw	r2,-12(fp)
   20be4:	1885c83a 	sub	r2,r3,r2
   20be8:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
   20bec:	e0fffb17 	ldw	r3,-20(fp)
   20bf0:	e0bfff17 	ldw	r2,-4(fp)
   20bf4:	1880010e 	bge	r3,r2,20bfc <alt_epcs_flash_write+0x11c>
   20bf8:	1805883a 	mov	r2,r3
   20bfc:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
   20c00:	e0bffb17 	ldw	r2,-20(fp)
   20c04:	100f883a 	mov	r7,r2
   20c08:	e1bffd17 	ldw	r6,-12(fp)
   20c0c:	e17ffe17 	ldw	r5,-8(fp)
   20c10:	e13ffc17 	ldw	r4,-16(fp)
   20c14:	00209f40 	call	209f4 <alt_epcs_flash_memcmp>
   20c18:	10001226 	beq	r2,zero,20c64 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
   20c1c:	e0bffc17 	ldw	r2,-16(fp)
   20c20:	10800817 	ldw	r2,32(r2)
   20c24:	e17ffa17 	ldw	r5,-24(fp)
   20c28:	e13ffc17 	ldw	r4,-16(fp)
   20c2c:	103ee83a 	callr	r2
   20c30:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
   20c34:	e0bff717 	ldw	r2,-36(fp)
   20c38:	10000a1e 	bne	r2,zero,20c64 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
   20c3c:	e0bffc17 	ldw	r2,-16(fp)
   20c40:	10800917 	ldw	r2,36(r2)
   20c44:	e0fffb17 	ldw	r3,-20(fp)
   20c48:	d8c00015 	stw	r3,0(sp)
   20c4c:	e1fffe17 	ldw	r7,-8(fp)
   20c50:	e1bffd17 	ldw	r6,-12(fp)
   20c54:	e17ffa17 	ldw	r5,-24(fp)
   20c58:	e13ffc17 	ldw	r4,-16(fp)
   20c5c:	103ee83a 	callr	r2
   20c60:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
   20c64:	e0ffff17 	ldw	r3,-4(fp)
   20c68:	e0bffb17 	ldw	r2,-20(fp)
   20c6c:	18802e26 	beq	r3,r2,20d28 <alt_epcs_flash_write+0x248>
   20c70:	e0bff717 	ldw	r2,-36(fp)
   20c74:	10002c1e 	bne	r2,zero,20d28 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
   20c78:	e0ffff17 	ldw	r3,-4(fp)
   20c7c:	e0bffb17 	ldw	r2,-20(fp)
   20c80:	1885c83a 	sub	r2,r3,r2
   20c84:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
   20c88:	e0fffc17 	ldw	r3,-16(fp)
   20c8c:	e0bff817 	ldw	r2,-32(fp)
   20c90:	10800104 	addi	r2,r2,4
   20c94:	1004913a 	slli	r2,r2,4
   20c98:	1885883a 	add	r2,r3,r2
   20c9c:	10c00017 	ldw	r3,0(r2)
   20ca0:	e0bffa17 	ldw	r2,-24(fp)
   20ca4:	1885883a 	add	r2,r3,r2
   20ca8:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
   20cac:	e0bffb17 	ldw	r2,-20(fp)
   20cb0:	e0fffe17 	ldw	r3,-8(fp)
   20cb4:	1885883a 	add	r2,r3,r2
   20cb8:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
   20cbc:	e0fffc17 	ldw	r3,-16(fp)
   20cc0:	e0bff817 	ldw	r2,-32(fp)
   20cc4:	10800104 	addi	r2,r2,4
   20cc8:	1004913a 	slli	r2,r2,4
   20ccc:	1885883a 	add	r2,r3,r2
   20cd0:	10800017 	ldw	r2,0(r2)
   20cd4:	e0fffa17 	ldw	r3,-24(fp)
   20cd8:	1885883a 	add	r2,r3,r2
   20cdc:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
   20ce0:	e0bff917 	ldw	r2,-28(fp)
   20ce4:	10800044 	addi	r2,r2,1
   20ce8:	e0bff915 	stw	r2,-28(fp)
   20cec:	e0fffc17 	ldw	r3,-16(fp)
   20cf0:	e0bff817 	ldw	r2,-32(fp)
   20cf4:	1004913a 	slli	r2,r2,4
   20cf8:	1885883a 	add	r2,r3,r2
   20cfc:	10800f04 	addi	r2,r2,60
   20d00:	10800017 	ldw	r2,0(r2)
   20d04:	e0fff917 	ldw	r3,-28(fp)
   20d08:	18bfa016 	blt	r3,r2,20b8c <__alt_mem_epcs_flash_controller_0+0xfffdfb8c>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
   20d0c:	e0bff817 	ldw	r2,-32(fp)
   20d10:	10800044 	addi	r2,r2,1
   20d14:	e0bff815 	stw	r2,-32(fp)
   20d18:	e0bffc17 	ldw	r2,-16(fp)
   20d1c:	10800c17 	ldw	r2,48(r2)
   20d20:	e0fff817 	ldw	r3,-32(fp)
   20d24:	18bf7916 	blt	r3,r2,20b0c <__alt_mem_epcs_flash_controller_0+0xfffdfb0c>
      }
    }
  }

finished:
  return ret_code;
   20d28:	e0bff717 	ldw	r2,-36(fp)
}
   20d2c:	e037883a 	mov	sp,fp
   20d30:	dfc00117 	ldw	ra,4(sp)
   20d34:	df000017 	ldw	fp,0(sp)
   20d38:	dec00204 	addi	sp,sp,8
   20d3c:	f800283a 	ret

00020d40 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
   20d40:	defffa04 	addi	sp,sp,-24
   20d44:	df000515 	stw	fp,20(sp)
   20d48:	df000504 	addi	fp,sp,20
   20d4c:	e13ffd15 	stw	r4,-12(fp)
   20d50:	e17ffe15 	stw	r5,-8(fp)
   20d54:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
   20d58:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
   20d5c:	e0bffd17 	ldw	r2,-12(fp)
   20d60:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
   20d64:	e0bffc17 	ldw	r2,-16(fp)
   20d68:	10c00c17 	ldw	r3,48(r2)
   20d6c:	e0bfff17 	ldw	r2,-4(fp)
   20d70:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
   20d74:	e0bffc17 	ldw	r2,-16(fp)
   20d78:	10800c17 	ldw	r2,48(r2)
   20d7c:	1000031e 	bne	r2,zero,20d8c <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
   20d80:	00bffec4 	movi	r2,-5
   20d84:	e0bffb15 	stw	r2,-20(fp)
   20d88:	00000b06 	br	20db8 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
   20d8c:	e0bffc17 	ldw	r2,-16(fp)
   20d90:	10800c17 	ldw	r2,48(r2)
   20d94:	10800250 	cmplti	r2,r2,9
   20d98:	1000031e 	bne	r2,zero,20da8 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
   20d9c:	00bffd04 	movi	r2,-12
   20da0:	e0bffb15 	stw	r2,-20(fp)
   20da4:	00000406 	br	20db8 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
   20da8:	e0bffc17 	ldw	r2,-16(fp)
   20dac:	10c00d04 	addi	r3,r2,52
   20db0:	e0bffe17 	ldw	r2,-8(fp)
   20db4:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
   20db8:	e0bffb17 	ldw	r2,-20(fp)
}
   20dbc:	e037883a 	mov	sp,fp
   20dc0:	df000017 	ldw	fp,0(sp)
   20dc4:	dec00104 	addi	sp,sp,4
   20dc8:	f800283a 	ret

00020dcc <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
   20dcc:	defff904 	addi	sp,sp,-28
   20dd0:	df000615 	stw	fp,24(sp)
   20dd4:	df000604 	addi	fp,sp,24
   20dd8:	e13ffe15 	stw	r4,-8(fp)
   20ddc:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
   20de0:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   20de4:	e0bffe17 	ldw	r2,-8(fp)
   20de8:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
   20dec:	e0bffb17 	ldw	r2,-20(fp)
   20df0:	10800c17 	ldw	r2,48(r2)
   20df4:	10bfffc4 	addi	r2,r2,-1
   20df8:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
   20dfc:	e0fffb17 	ldw	r3,-20(fp)
   20e00:	e0bffc17 	ldw	r2,-16(fp)
   20e04:	1004913a 	slli	r2,r2,4
   20e08:	1885883a 	add	r2,r3,r2
   20e0c:	10800d04 	addi	r2,r2,52
   20e10:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
   20e14:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
   20e18:	e13ffb17 	ldw	r4,-20(fp)
   20e1c:	e0bffc17 	ldw	r2,-16(fp)
   20e20:	1004913a 	slli	r2,r2,4
   20e24:	2085883a 	add	r2,r4,r2
   20e28:	10800e04 	addi	r2,r2,56
   20e2c:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
   20e30:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
   20e34:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
   20e38:	e0bfff17 	ldw	r2,-4(fp)
   20e3c:	e0fffd17 	ldw	r3,-12(fp)
   20e40:	1880022e 	bgeu	r3,r2,20e4c <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
   20e44:	00bffec4 	movi	r2,-5
   20e48:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
   20e4c:	e0bffa17 	ldw	r2,-24(fp)
}
   20e50:	e037883a 	mov	sp,fp
   20e54:	df000017 	ldw	fp,0(sp)
   20e58:	dec00104 	addi	sp,sp,4
   20e5c:	f800283a 	ret

00020e60 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
   20e60:	defffa04 	addi	sp,sp,-24
   20e64:	dfc00515 	stw	ra,20(sp)
   20e68:	df000415 	stw	fp,16(sp)
   20e6c:	df000404 	addi	fp,sp,16
   20e70:	e13ffe15 	stw	r4,-8(fp)
   20e74:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
   20e78:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   20e7c:	e0bffe17 	ldw	r2,-8(fp)
   20e80:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
   20e84:	e17fff17 	ldw	r5,-4(fp)
   20e88:	e13ffe17 	ldw	r4,-8(fp)
   20e8c:	0020dcc0 	call	20dcc <alt_epcs_test_address>
   20e90:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
   20e94:	e0bffc17 	ldw	r2,-16(fp)
   20e98:	10000916 	blt	r2,zero,20ec0 <alt_epcs_flash_erase_block+0x60>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
   20e9c:	e0bffd17 	ldw	r2,-12(fp)
   20ea0:	10c02e17 	ldw	r3,184(r2)
   20ea4:	e13fff17 	ldw	r4,-4(fp)
   20ea8:	e0bffd17 	ldw	r2,-12(fp)
   20eac:	10803217 	ldw	r2,200(r2)
   20eb0:	100d883a 	mov	r6,r2
   20eb4:	200b883a 	mov	r5,r4
   20eb8:	1809883a 	mov	r4,r3
   20ebc:	0021ba80 	call	21ba8 <epcs_sector_erase>
  }
  return ret_code;
   20ec0:	e0bffc17 	ldw	r2,-16(fp)
}
   20ec4:	e037883a 	mov	sp,fp
   20ec8:	dfc00117 	ldw	ra,4(sp)
   20ecc:	df000017 	ldw	fp,0(sp)
   20ed0:	dec00204 	addi	sp,sp,8
   20ed4:	f800283a 	ret

00020ed8 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
   20ed8:	defff404 	addi	sp,sp,-48
   20edc:	dfc00b15 	stw	ra,44(sp)
   20ee0:	df000a15 	stw	fp,40(sp)
   20ee4:	df000a04 	addi	fp,sp,40
   20ee8:	e13ffc15 	stw	r4,-16(fp)
   20eec:	e17ffd15 	stw	r5,-12(fp)
   20ef0:	e1bffe15 	stw	r6,-8(fp)
   20ef4:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   20ef8:	e0bffc17 	ldw	r2,-16(fp)
   20efc:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
   20f00:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
   20f04:	e17ffe17 	ldw	r5,-8(fp)
   20f08:	e13ffc17 	ldw	r4,-16(fp)
   20f0c:	0020dcc0 	call	20dcc <alt_epcs_test_address>
   20f10:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
   20f14:	e0bff917 	ldw	r2,-28(fp)
   20f18:	10002916 	blt	r2,zero,20fc0 <alt_epcs_flash_write_block+0xe8>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   20f1c:	00002606 	br	20fb8 <alt_epcs_flash_write_block+0xe0>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
   20f20:	e0bff817 	ldw	r2,-32(fp)
   20f24:	10c03117 	ldw	r3,196(r2)
   20f28:	e0bffe17 	ldw	r2,-8(fp)
   20f2c:	1887883a 	add	r3,r3,r2
   20f30:	e0bff817 	ldw	r2,-32(fp)
   20f34:	10803117 	ldw	r2,196(r2)
   20f38:	0085c83a 	sub	r2,zero,r2
   20f3c:	1884703a 	and	r2,r3,r2
   20f40:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
   20f44:	e0fffa17 	ldw	r3,-24(fp)
   20f48:	e0bffe17 	ldw	r2,-8(fp)
   20f4c:	1885c83a 	sub	r2,r3,r2
   20f50:	e0c00217 	ldw	r3,8(fp)
   20f54:	1880010e 	bge	r3,r2,20f5c <alt_epcs_flash_write_block+0x84>
   20f58:	1805883a 	mov	r2,r3
   20f5c:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
   20f60:	e0bff817 	ldw	r2,-32(fp)
   20f64:	11002e17 	ldw	r4,184(r2)
   20f68:	e0bff717 	ldw	r2,-36(fp)
   20f6c:	e0ffff17 	ldw	r3,-4(fp)
   20f70:	1887883a 	add	r3,r3,r2
   20f74:	e0bff817 	ldw	r2,-32(fp)
   20f78:	10803217 	ldw	r2,200(r2)
   20f7c:	d8800015 	stw	r2,0(sp)
   20f80:	e1fffb17 	ldw	r7,-20(fp)
   20f84:	180d883a 	mov	r6,r3
   20f88:	e17ffe17 	ldw	r5,-8(fp)
   20f8c:	0021e580 	call	21e58 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
   20f90:	e0c00217 	ldw	r3,8(fp)
   20f94:	e0bffb17 	ldw	r2,-20(fp)
   20f98:	1885c83a 	sub	r2,r3,r2
   20f9c:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
   20fa0:	e0fff717 	ldw	r3,-36(fp)
   20fa4:	e0bffb17 	ldw	r2,-20(fp)
   20fa8:	1885883a 	add	r2,r3,r2
   20fac:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
   20fb0:	e0bffa17 	ldw	r2,-24(fp)
   20fb4:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
   20fb8:	e0800217 	ldw	r2,8(fp)
   20fbc:	103fd81e 	bne	r2,zero,20f20 <__alt_mem_epcs_flash_controller_0+0xfffdff20>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
   20fc0:	e0bff917 	ldw	r2,-28(fp)
}
   20fc4:	e037883a 	mov	sp,fp
   20fc8:	dfc00117 	ldw	ra,4(sp)
   20fcc:	df000017 	ldw	fp,0(sp)
   20fd0:	dec00204 	addi	sp,sp,8
   20fd4:	f800283a 	ret

00020fd8 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
   20fd8:	defff704 	addi	sp,sp,-36
   20fdc:	dfc00815 	stw	ra,32(sp)
   20fe0:	df000715 	stw	fp,28(sp)
   20fe4:	df000704 	addi	fp,sp,28
   20fe8:	e13ffc15 	stw	r4,-16(fp)
   20fec:	e17ffd15 	stw	r5,-12(fp)
   20ff0:	e1bffe15 	stw	r6,-8(fp)
   20ff4:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
   20ff8:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
   20ffc:	e0bffc17 	ldw	r2,-16(fp)
   21000:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
   21004:	e17ffd17 	ldw	r5,-12(fp)
   21008:	e13ffc17 	ldw	r4,-16(fp)
   2100c:	0020dcc0 	call	20dcc <alt_epcs_test_address>
   21010:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
   21014:	e0bffa17 	ldw	r2,-24(fp)
   21018:	10000f16 	blt	r2,zero,21058 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
   2101c:	e0bffb17 	ldw	r2,-20(fp)
   21020:	10c02e17 	ldw	r3,184(r2)
   21024:	e0bffb17 	ldw	r2,-20(fp)
   21028:	10803217 	ldw	r2,200(r2)
   2102c:	d8800015 	stw	r2,0(sp)
   21030:	e1ffff17 	ldw	r7,-4(fp)
   21034:	e1bffe17 	ldw	r6,-8(fp)
   21038:	e17ffd17 	ldw	r5,-12(fp)
   2103c:	1809883a 	mov	r4,r3
   21040:	0021ca40 	call	21ca4 <epcs_read_buffer>
   21044:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
   21048:	e0fffa17 	ldw	r3,-24(fp)
   2104c:	e0bfff17 	ldw	r2,-4(fp)
   21050:	1880011e 	bne	r3,r2,21058 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
   21054:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
   21058:	e0bffa17 	ldw	r2,-24(fp)
}
   2105c:	e037883a 	mov	sp,fp
   21060:	dfc00117 	ldw	ra,4(sp)
   21064:	df000017 	ldw	fp,0(sp)
   21068:	dec00204 	addi	sp,sp,8
   2106c:	f800283a 	ret

00021070 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   21070:	defffa04 	addi	sp,sp,-24
   21074:	dfc00515 	stw	ra,20(sp)
   21078:	df000415 	stw	fp,16(sp)
   2107c:	df000404 	addi	fp,sp,16
   21080:	e13ffd15 	stw	r4,-12(fp)
   21084:	e17ffe15 	stw	r5,-8(fp)
   21088:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2108c:	e0bffd17 	ldw	r2,-12(fp)
   21090:	10800017 	ldw	r2,0(r2)
   21094:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   21098:	e0bffc17 	ldw	r2,-16(fp)
   2109c:	10c00a04 	addi	r3,r2,40
   210a0:	e0bffd17 	ldw	r2,-12(fp)
   210a4:	10800217 	ldw	r2,8(r2)
   210a8:	100f883a 	mov	r7,r2
   210ac:	e1bfff17 	ldw	r6,-4(fp)
   210b0:	e17ffe17 	ldw	r5,-8(fp)
   210b4:	1809883a 	mov	r4,r3
   210b8:	00216980 	call	21698 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   210bc:	e037883a 	mov	sp,fp
   210c0:	dfc00117 	ldw	ra,4(sp)
   210c4:	df000017 	ldw	fp,0(sp)
   210c8:	dec00204 	addi	sp,sp,8
   210cc:	f800283a 	ret

000210d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   210d0:	defffa04 	addi	sp,sp,-24
   210d4:	dfc00515 	stw	ra,20(sp)
   210d8:	df000415 	stw	fp,16(sp)
   210dc:	df000404 	addi	fp,sp,16
   210e0:	e13ffd15 	stw	r4,-12(fp)
   210e4:	e17ffe15 	stw	r5,-8(fp)
   210e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   210ec:	e0bffd17 	ldw	r2,-12(fp)
   210f0:	10800017 	ldw	r2,0(r2)
   210f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   210f8:	e0bffc17 	ldw	r2,-16(fp)
   210fc:	10c00a04 	addi	r3,r2,40
   21100:	e0bffd17 	ldw	r2,-12(fp)
   21104:	10800217 	ldw	r2,8(r2)
   21108:	100f883a 	mov	r7,r2
   2110c:	e1bfff17 	ldw	r6,-4(fp)
   21110:	e17ffe17 	ldw	r5,-8(fp)
   21114:	1809883a 	mov	r4,r3
   21118:	00218b40 	call	218b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2111c:	e037883a 	mov	sp,fp
   21120:	dfc00117 	ldw	ra,4(sp)
   21124:	df000017 	ldw	fp,0(sp)
   21128:	dec00204 	addi	sp,sp,8
   2112c:	f800283a 	ret

00021130 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   21130:	defffc04 	addi	sp,sp,-16
   21134:	dfc00315 	stw	ra,12(sp)
   21138:	df000215 	stw	fp,8(sp)
   2113c:	df000204 	addi	fp,sp,8
   21140:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21144:	e0bfff17 	ldw	r2,-4(fp)
   21148:	10800017 	ldw	r2,0(r2)
   2114c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   21150:	e0bffe17 	ldw	r2,-8(fp)
   21154:	10c00a04 	addi	r3,r2,40
   21158:	e0bfff17 	ldw	r2,-4(fp)
   2115c:	10800217 	ldw	r2,8(r2)
   21160:	100b883a 	mov	r5,r2
   21164:	1809883a 	mov	r4,r3
   21168:	00215400 	call	21540 <altera_avalon_jtag_uart_close>
}
   2116c:	e037883a 	mov	sp,fp
   21170:	dfc00117 	ldw	ra,4(sp)
   21174:	df000017 	ldw	fp,0(sp)
   21178:	dec00204 	addi	sp,sp,8
   2117c:	f800283a 	ret

00021180 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   21180:	defffa04 	addi	sp,sp,-24
   21184:	dfc00515 	stw	ra,20(sp)
   21188:	df000415 	stw	fp,16(sp)
   2118c:	df000404 	addi	fp,sp,16
   21190:	e13ffd15 	stw	r4,-12(fp)
   21194:	e17ffe15 	stw	r5,-8(fp)
   21198:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2119c:	e0bffd17 	ldw	r2,-12(fp)
   211a0:	10800017 	ldw	r2,0(r2)
   211a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   211a8:	e0bffc17 	ldw	r2,-16(fp)
   211ac:	10800a04 	addi	r2,r2,40
   211b0:	e1bfff17 	ldw	r6,-4(fp)
   211b4:	e17ffe17 	ldw	r5,-8(fp)
   211b8:	1009883a 	mov	r4,r2
   211bc:	00215a80 	call	215a8 <altera_avalon_jtag_uart_ioctl>
}
   211c0:	e037883a 	mov	sp,fp
   211c4:	dfc00117 	ldw	ra,4(sp)
   211c8:	df000017 	ldw	fp,0(sp)
   211cc:	dec00204 	addi	sp,sp,8
   211d0:	f800283a 	ret

000211d4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   211d4:	defffa04 	addi	sp,sp,-24
   211d8:	dfc00515 	stw	ra,20(sp)
   211dc:	df000415 	stw	fp,16(sp)
   211e0:	df000404 	addi	fp,sp,16
   211e4:	e13ffd15 	stw	r4,-12(fp)
   211e8:	e17ffe15 	stw	r5,-8(fp)
   211ec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   211f0:	e0bffd17 	ldw	r2,-12(fp)
   211f4:	00c00044 	movi	r3,1
   211f8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   211fc:	e0bffd17 	ldw	r2,-12(fp)
   21200:	10800017 	ldw	r2,0(r2)
   21204:	10800104 	addi	r2,r2,4
   21208:	1007883a 	mov	r3,r2
   2120c:	e0bffd17 	ldw	r2,-12(fp)
   21210:	10800817 	ldw	r2,32(r2)
   21214:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   21218:	e0bffe17 	ldw	r2,-8(fp)
   2121c:	e0ffff17 	ldw	r3,-4(fp)
   21220:	d8000015 	stw	zero,0(sp)
   21224:	e1fffd17 	ldw	r7,-12(fp)
   21228:	018000b4 	movhi	r6,2
   2122c:	3184a504 	addi	r6,r6,4756
   21230:	180b883a 	mov	r5,r3
   21234:	1009883a 	mov	r4,r2
   21238:	00226500 	call	22650 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2123c:	e0bffd17 	ldw	r2,-12(fp)
   21240:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   21244:	e0bffd17 	ldw	r2,-12(fp)
   21248:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2124c:	d0e5dc17 	ldw	r3,-26768(gp)
   21250:	e1fffd17 	ldw	r7,-12(fp)
   21254:	018000b4 	movhi	r6,2
   21258:	31852804 	addi	r6,r6,5280
   2125c:	180b883a 	mov	r5,r3
   21260:	1009883a 	mov	r4,r2
   21264:	00221140 	call	22114 <alt_alarm_start>
   21268:	1000040e 	bge	r2,zero,2127c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2126c:	e0fffd17 	ldw	r3,-12(fp)
   21270:	00a00034 	movhi	r2,32768
   21274:	10bfffc4 	addi	r2,r2,-1
   21278:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2127c:	0001883a 	nop
   21280:	e037883a 	mov	sp,fp
   21284:	dfc00117 	ldw	ra,4(sp)
   21288:	df000017 	ldw	fp,0(sp)
   2128c:	dec00204 	addi	sp,sp,8
   21290:	f800283a 	ret

00021294 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   21294:	defff804 	addi	sp,sp,-32
   21298:	df000715 	stw	fp,28(sp)
   2129c:	df000704 	addi	fp,sp,28
   212a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   212a4:	e0bfff17 	ldw	r2,-4(fp)
   212a8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   212ac:	e0bffb17 	ldw	r2,-20(fp)
   212b0:	10800017 	ldw	r2,0(r2)
   212b4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   212b8:	e0bffc17 	ldw	r2,-16(fp)
   212bc:	10800104 	addi	r2,r2,4
   212c0:	10800037 	ldwio	r2,0(r2)
   212c4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   212c8:	e0bffd17 	ldw	r2,-12(fp)
   212cc:	1080c00c 	andi	r2,r2,768
   212d0:	10006d26 	beq	r2,zero,21488 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   212d4:	e0bffd17 	ldw	r2,-12(fp)
   212d8:	1080400c 	andi	r2,r2,256
   212dc:	10003526 	beq	r2,zero,213b4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   212e0:	00800074 	movhi	r2,1
   212e4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   212e8:	e0bffb17 	ldw	r2,-20(fp)
   212ec:	10800a17 	ldw	r2,40(r2)
   212f0:	10800044 	addi	r2,r2,1
   212f4:	1081ffcc 	andi	r2,r2,2047
   212f8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   212fc:	e0bffb17 	ldw	r2,-20(fp)
   21300:	10c00b17 	ldw	r3,44(r2)
   21304:	e0bffe17 	ldw	r2,-8(fp)
   21308:	18801526 	beq	r3,r2,21360 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2130c:	e0bffc17 	ldw	r2,-16(fp)
   21310:	10800037 	ldwio	r2,0(r2)
   21314:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   21318:	e0bff917 	ldw	r2,-28(fp)
   2131c:	10a0000c 	andi	r2,r2,32768
   21320:	10001126 	beq	r2,zero,21368 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   21324:	e0bffb17 	ldw	r2,-20(fp)
   21328:	10800a17 	ldw	r2,40(r2)
   2132c:	e0fff917 	ldw	r3,-28(fp)
   21330:	1809883a 	mov	r4,r3
   21334:	e0fffb17 	ldw	r3,-20(fp)
   21338:	1885883a 	add	r2,r3,r2
   2133c:	10800e04 	addi	r2,r2,56
   21340:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21344:	e0bffb17 	ldw	r2,-20(fp)
   21348:	10800a17 	ldw	r2,40(r2)
   2134c:	10800044 	addi	r2,r2,1
   21350:	10c1ffcc 	andi	r3,r2,2047
   21354:	e0bffb17 	ldw	r2,-20(fp)
   21358:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2135c:	003fe206 	br	212e8 <__alt_mem_epcs_flash_controller_0+0xfffe02e8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   21360:	0001883a 	nop
   21364:	00000106 	br	2136c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   21368:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2136c:	e0bff917 	ldw	r2,-28(fp)
   21370:	10bfffec 	andhi	r2,r2,65535
   21374:	10000f26 	beq	r2,zero,213b4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21378:	e0bffb17 	ldw	r2,-20(fp)
   2137c:	10c00817 	ldw	r3,32(r2)
   21380:	00bfff84 	movi	r2,-2
   21384:	1886703a 	and	r3,r3,r2
   21388:	e0bffb17 	ldw	r2,-20(fp)
   2138c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   21390:	e0bffc17 	ldw	r2,-16(fp)
   21394:	10800104 	addi	r2,r2,4
   21398:	1007883a 	mov	r3,r2
   2139c:	e0bffb17 	ldw	r2,-20(fp)
   213a0:	10800817 	ldw	r2,32(r2)
   213a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   213a8:	e0bffc17 	ldw	r2,-16(fp)
   213ac:	10800104 	addi	r2,r2,4
   213b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   213b4:	e0bffd17 	ldw	r2,-12(fp)
   213b8:	1080800c 	andi	r2,r2,512
   213bc:	103fbe26 	beq	r2,zero,212b8 <__alt_mem_epcs_flash_controller_0+0xfffe02b8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   213c0:	e0bffd17 	ldw	r2,-12(fp)
   213c4:	1004d43a 	srli	r2,r2,16
   213c8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   213cc:	00001406 	br	21420 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   213d0:	e0bffc17 	ldw	r2,-16(fp)
   213d4:	e0fffb17 	ldw	r3,-20(fp)
   213d8:	18c00d17 	ldw	r3,52(r3)
   213dc:	e13ffb17 	ldw	r4,-20(fp)
   213e0:	20c7883a 	add	r3,r4,r3
   213e4:	18c20e04 	addi	r3,r3,2104
   213e8:	18c00003 	ldbu	r3,0(r3)
   213ec:	18c03fcc 	andi	r3,r3,255
   213f0:	18c0201c 	xori	r3,r3,128
   213f4:	18ffe004 	addi	r3,r3,-128
   213f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   213fc:	e0bffb17 	ldw	r2,-20(fp)
   21400:	10800d17 	ldw	r2,52(r2)
   21404:	10800044 	addi	r2,r2,1
   21408:	10c1ffcc 	andi	r3,r2,2047
   2140c:	e0bffb17 	ldw	r2,-20(fp)
   21410:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   21414:	e0bffa17 	ldw	r2,-24(fp)
   21418:	10bfffc4 	addi	r2,r2,-1
   2141c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   21420:	e0bffa17 	ldw	r2,-24(fp)
   21424:	10000526 	beq	r2,zero,2143c <altera_avalon_jtag_uart_irq+0x1a8>
   21428:	e0bffb17 	ldw	r2,-20(fp)
   2142c:	10c00d17 	ldw	r3,52(r2)
   21430:	e0bffb17 	ldw	r2,-20(fp)
   21434:	10800c17 	ldw	r2,48(r2)
   21438:	18bfe51e 	bne	r3,r2,213d0 <__alt_mem_epcs_flash_controller_0+0xfffe03d0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2143c:	e0bffa17 	ldw	r2,-24(fp)
   21440:	103f9d26 	beq	r2,zero,212b8 <__alt_mem_epcs_flash_controller_0+0xfffe02b8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21444:	e0bffb17 	ldw	r2,-20(fp)
   21448:	10c00817 	ldw	r3,32(r2)
   2144c:	00bfff44 	movi	r2,-3
   21450:	1886703a 	and	r3,r3,r2
   21454:	e0bffb17 	ldw	r2,-20(fp)
   21458:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2145c:	e0bffb17 	ldw	r2,-20(fp)
   21460:	10800017 	ldw	r2,0(r2)
   21464:	10800104 	addi	r2,r2,4
   21468:	1007883a 	mov	r3,r2
   2146c:	e0bffb17 	ldw	r2,-20(fp)
   21470:	10800817 	ldw	r2,32(r2)
   21474:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21478:	e0bffc17 	ldw	r2,-16(fp)
   2147c:	10800104 	addi	r2,r2,4
   21480:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   21484:	003f8c06 	br	212b8 <__alt_mem_epcs_flash_controller_0+0xfffe02b8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   21488:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2148c:	0001883a 	nop
   21490:	e037883a 	mov	sp,fp
   21494:	df000017 	ldw	fp,0(sp)
   21498:	dec00104 	addi	sp,sp,4
   2149c:	f800283a 	ret

000214a0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   214a0:	defff804 	addi	sp,sp,-32
   214a4:	df000715 	stw	fp,28(sp)
   214a8:	df000704 	addi	fp,sp,28
   214ac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   214b0:	e0bffb17 	ldw	r2,-20(fp)
   214b4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   214b8:	e0bff917 	ldw	r2,-28(fp)
   214bc:	10800017 	ldw	r2,0(r2)
   214c0:	10800104 	addi	r2,r2,4
   214c4:	10800037 	ldwio	r2,0(r2)
   214c8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   214cc:	e0bffa17 	ldw	r2,-24(fp)
   214d0:	1081000c 	andi	r2,r2,1024
   214d4:	10000b26 	beq	r2,zero,21504 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   214d8:	e0bff917 	ldw	r2,-28(fp)
   214dc:	10800017 	ldw	r2,0(r2)
   214e0:	10800104 	addi	r2,r2,4
   214e4:	1007883a 	mov	r3,r2
   214e8:	e0bff917 	ldw	r2,-28(fp)
   214ec:	10800817 	ldw	r2,32(r2)
   214f0:	10810014 	ori	r2,r2,1024
   214f4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   214f8:	e0bff917 	ldw	r2,-28(fp)
   214fc:	10000915 	stw	zero,36(r2)
   21500:	00000a06 	br	2152c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   21504:	e0bff917 	ldw	r2,-28(fp)
   21508:	10c00917 	ldw	r3,36(r2)
   2150c:	00a00034 	movhi	r2,32768
   21510:	10bfff04 	addi	r2,r2,-4
   21514:	10c00536 	bltu	r2,r3,2152c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   21518:	e0bff917 	ldw	r2,-28(fp)
   2151c:	10800917 	ldw	r2,36(r2)
   21520:	10c00044 	addi	r3,r2,1
   21524:	e0bff917 	ldw	r2,-28(fp)
   21528:	10c00915 	stw	r3,36(r2)
   2152c:	d0a5dc17 	ldw	r2,-26768(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   21530:	e037883a 	mov	sp,fp
   21534:	df000017 	ldw	fp,0(sp)
   21538:	dec00104 	addi	sp,sp,4
   2153c:	f800283a 	ret

00021540 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   21540:	defffd04 	addi	sp,sp,-12
   21544:	df000215 	stw	fp,8(sp)
   21548:	df000204 	addi	fp,sp,8
   2154c:	e13ffe15 	stw	r4,-8(fp)
   21550:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21554:	00000506 	br	2156c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   21558:	e0bfff17 	ldw	r2,-4(fp)
   2155c:	1090000c 	andi	r2,r2,16384
   21560:	10000226 	beq	r2,zero,2156c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   21564:	00bffd44 	movi	r2,-11
   21568:	00000b06 	br	21598 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2156c:	e0bffe17 	ldw	r2,-8(fp)
   21570:	10c00d17 	ldw	r3,52(r2)
   21574:	e0bffe17 	ldw	r2,-8(fp)
   21578:	10800c17 	ldw	r2,48(r2)
   2157c:	18800526 	beq	r3,r2,21594 <altera_avalon_jtag_uart_close+0x54>
   21580:	e0bffe17 	ldw	r2,-8(fp)
   21584:	10c00917 	ldw	r3,36(r2)
   21588:	e0bffe17 	ldw	r2,-8(fp)
   2158c:	10800117 	ldw	r2,4(r2)
   21590:	18bff136 	bltu	r3,r2,21558 <__alt_mem_epcs_flash_controller_0+0xfffe0558>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   21594:	0005883a 	mov	r2,zero
}
   21598:	e037883a 	mov	sp,fp
   2159c:	df000017 	ldw	fp,0(sp)
   215a0:	dec00104 	addi	sp,sp,4
   215a4:	f800283a 	ret

000215a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   215a8:	defffa04 	addi	sp,sp,-24
   215ac:	df000515 	stw	fp,20(sp)
   215b0:	df000504 	addi	fp,sp,20
   215b4:	e13ffd15 	stw	r4,-12(fp)
   215b8:	e17ffe15 	stw	r5,-8(fp)
   215bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   215c0:	00bff9c4 	movi	r2,-25
   215c4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   215c8:	e0bffe17 	ldw	r2,-8(fp)
   215cc:	10da8060 	cmpeqi	r3,r2,27137
   215d0:	1800031e 	bne	r3,zero,215e0 <altera_avalon_jtag_uart_ioctl+0x38>
   215d4:	109a80a0 	cmpeqi	r2,r2,27138
   215d8:	1000181e 	bne	r2,zero,2163c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   215dc:	00002906 	br	21684 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   215e0:	e0bffd17 	ldw	r2,-12(fp)
   215e4:	10c00117 	ldw	r3,4(r2)
   215e8:	00a00034 	movhi	r2,32768
   215ec:	10bfffc4 	addi	r2,r2,-1
   215f0:	18802126 	beq	r3,r2,21678 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   215f4:	e0bfff17 	ldw	r2,-4(fp)
   215f8:	10800017 	ldw	r2,0(r2)
   215fc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   21600:	e0bffc17 	ldw	r2,-16(fp)
   21604:	10800090 	cmplti	r2,r2,2
   21608:	1000061e 	bne	r2,zero,21624 <altera_avalon_jtag_uart_ioctl+0x7c>
   2160c:	e0fffc17 	ldw	r3,-16(fp)
   21610:	00a00034 	movhi	r2,32768
   21614:	10bfffc4 	addi	r2,r2,-1
   21618:	18800226 	beq	r3,r2,21624 <altera_avalon_jtag_uart_ioctl+0x7c>
   2161c:	e0bffc17 	ldw	r2,-16(fp)
   21620:	00000206 	br	2162c <altera_avalon_jtag_uart_ioctl+0x84>
   21624:	00a00034 	movhi	r2,32768
   21628:	10bfff84 	addi	r2,r2,-2
   2162c:	e0fffd17 	ldw	r3,-12(fp)
   21630:	18800115 	stw	r2,4(r3)
      rc = 0;
   21634:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   21638:	00000f06 	br	21678 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2163c:	e0bffd17 	ldw	r2,-12(fp)
   21640:	10c00117 	ldw	r3,4(r2)
   21644:	00a00034 	movhi	r2,32768
   21648:	10bfffc4 	addi	r2,r2,-1
   2164c:	18800c26 	beq	r3,r2,21680 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   21650:	e0bffd17 	ldw	r2,-12(fp)
   21654:	10c00917 	ldw	r3,36(r2)
   21658:	e0bffd17 	ldw	r2,-12(fp)
   2165c:	10800117 	ldw	r2,4(r2)
   21660:	1885803a 	cmpltu	r2,r3,r2
   21664:	10c03fcc 	andi	r3,r2,255
   21668:	e0bfff17 	ldw	r2,-4(fp)
   2166c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   21670:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   21674:	00000206 	br	21680 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   21678:	0001883a 	nop
   2167c:	00000106 	br	21684 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   21680:	0001883a 	nop

  default:
    break;
  }

  return rc;
   21684:	e0bffb17 	ldw	r2,-20(fp)
}
   21688:	e037883a 	mov	sp,fp
   2168c:	df000017 	ldw	fp,0(sp)
   21690:	dec00104 	addi	sp,sp,4
   21694:	f800283a 	ret

00021698 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   21698:	defff304 	addi	sp,sp,-52
   2169c:	dfc00c15 	stw	ra,48(sp)
   216a0:	df000b15 	stw	fp,44(sp)
   216a4:	df000b04 	addi	fp,sp,44
   216a8:	e13ffc15 	stw	r4,-16(fp)
   216ac:	e17ffd15 	stw	r5,-12(fp)
   216b0:	e1bffe15 	stw	r6,-8(fp)
   216b4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   216b8:	e0bffd17 	ldw	r2,-12(fp)
   216bc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   216c0:	00004706 	br	217e0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   216c4:	e0bffc17 	ldw	r2,-16(fp)
   216c8:	10800a17 	ldw	r2,40(r2)
   216cc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   216d0:	e0bffc17 	ldw	r2,-16(fp)
   216d4:	10800b17 	ldw	r2,44(r2)
   216d8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   216dc:	e0fff717 	ldw	r3,-36(fp)
   216e0:	e0bff817 	ldw	r2,-32(fp)
   216e4:	18800536 	bltu	r3,r2,216fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   216e8:	e0fff717 	ldw	r3,-36(fp)
   216ec:	e0bff817 	ldw	r2,-32(fp)
   216f0:	1885c83a 	sub	r2,r3,r2
   216f4:	e0bff615 	stw	r2,-40(fp)
   216f8:	00000406 	br	2170c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   216fc:	00c20004 	movi	r3,2048
   21700:	e0bff817 	ldw	r2,-32(fp)
   21704:	1885c83a 	sub	r2,r3,r2
   21708:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2170c:	e0bff617 	ldw	r2,-40(fp)
   21710:	10001e26 	beq	r2,zero,2178c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   21714:	e0fffe17 	ldw	r3,-8(fp)
   21718:	e0bff617 	ldw	r2,-40(fp)
   2171c:	1880022e 	bgeu	r3,r2,21728 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   21720:	e0bffe17 	ldw	r2,-8(fp)
   21724:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   21728:	e0bffc17 	ldw	r2,-16(fp)
   2172c:	10c00e04 	addi	r3,r2,56
   21730:	e0bff817 	ldw	r2,-32(fp)
   21734:	1885883a 	add	r2,r3,r2
   21738:	e1bff617 	ldw	r6,-40(fp)
   2173c:	100b883a 	mov	r5,r2
   21740:	e13ff517 	ldw	r4,-44(fp)
   21744:	00234dc0 	call	234dc <memcpy>
      ptr   += n;
   21748:	e0fff517 	ldw	r3,-44(fp)
   2174c:	e0bff617 	ldw	r2,-40(fp)
   21750:	1885883a 	add	r2,r3,r2
   21754:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   21758:	e0fffe17 	ldw	r3,-8(fp)
   2175c:	e0bff617 	ldw	r2,-40(fp)
   21760:	1885c83a 	sub	r2,r3,r2
   21764:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21768:	e0fff817 	ldw	r3,-32(fp)
   2176c:	e0bff617 	ldw	r2,-40(fp)
   21770:	1885883a 	add	r2,r3,r2
   21774:	10c1ffcc 	andi	r3,r2,2047
   21778:	e0bffc17 	ldw	r2,-16(fp)
   2177c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   21780:	e0bffe17 	ldw	r2,-8(fp)
   21784:	00bfcf16 	blt	zero,r2,216c4 <__alt_mem_epcs_flash_controller_0+0xfffe06c4>
   21788:	00000106 	br	21790 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2178c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   21790:	e0fff517 	ldw	r3,-44(fp)
   21794:	e0bffd17 	ldw	r2,-12(fp)
   21798:	1880141e 	bne	r3,r2,217ec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2179c:	e0bfff17 	ldw	r2,-4(fp)
   217a0:	1090000c 	andi	r2,r2,16384
   217a4:	1000131e 	bne	r2,zero,217f4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   217a8:	0001883a 	nop
   217ac:	e0bffc17 	ldw	r2,-16(fp)
   217b0:	10c00a17 	ldw	r3,40(r2)
   217b4:	e0bff717 	ldw	r2,-36(fp)
   217b8:	1880051e 	bne	r3,r2,217d0 <altera_avalon_jtag_uart_read+0x138>
   217bc:	e0bffc17 	ldw	r2,-16(fp)
   217c0:	10c00917 	ldw	r3,36(r2)
   217c4:	e0bffc17 	ldw	r2,-16(fp)
   217c8:	10800117 	ldw	r2,4(r2)
   217cc:	18bff736 	bltu	r3,r2,217ac <__alt_mem_epcs_flash_controller_0+0xfffe07ac>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   217d0:	e0bffc17 	ldw	r2,-16(fp)
   217d4:	10c00a17 	ldw	r3,40(r2)
   217d8:	e0bff717 	ldw	r2,-36(fp)
   217dc:	18800726 	beq	r3,r2,217fc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   217e0:	e0bffe17 	ldw	r2,-8(fp)
   217e4:	00bfb716 	blt	zero,r2,216c4 <__alt_mem_epcs_flash_controller_0+0xfffe06c4>
   217e8:	00000506 	br	21800 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   217ec:	0001883a 	nop
   217f0:	00000306 	br	21800 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   217f4:	0001883a 	nop
   217f8:	00000106 	br	21800 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   217fc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   21800:	e0fff517 	ldw	r3,-44(fp)
   21804:	e0bffd17 	ldw	r2,-12(fp)
   21808:	18801826 	beq	r3,r2,2186c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2180c:	0005303a 	rdctl	r2,status
   21810:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21814:	e0fffb17 	ldw	r3,-20(fp)
   21818:	00bfff84 	movi	r2,-2
   2181c:	1884703a 	and	r2,r3,r2
   21820:	1001703a 	wrctl	status,r2
  
  return context;
   21824:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   21828:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2182c:	e0bffc17 	ldw	r2,-16(fp)
   21830:	10800817 	ldw	r2,32(r2)
   21834:	10c00054 	ori	r3,r2,1
   21838:	e0bffc17 	ldw	r2,-16(fp)
   2183c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21840:	e0bffc17 	ldw	r2,-16(fp)
   21844:	10800017 	ldw	r2,0(r2)
   21848:	10800104 	addi	r2,r2,4
   2184c:	1007883a 	mov	r3,r2
   21850:	e0bffc17 	ldw	r2,-16(fp)
   21854:	10800817 	ldw	r2,32(r2)
   21858:	18800035 	stwio	r2,0(r3)
   2185c:	e0bffa17 	ldw	r2,-24(fp)
   21860:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21864:	e0bff917 	ldw	r2,-28(fp)
   21868:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2186c:	e0fff517 	ldw	r3,-44(fp)
   21870:	e0bffd17 	ldw	r2,-12(fp)
   21874:	18800426 	beq	r3,r2,21888 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   21878:	e0fff517 	ldw	r3,-44(fp)
   2187c:	e0bffd17 	ldw	r2,-12(fp)
   21880:	1885c83a 	sub	r2,r3,r2
   21884:	00000606 	br	218a0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   21888:	e0bfff17 	ldw	r2,-4(fp)
   2188c:	1090000c 	andi	r2,r2,16384
   21890:	10000226 	beq	r2,zero,2189c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   21894:	00bffd44 	movi	r2,-11
   21898:	00000106 	br	218a0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2189c:	00bffec4 	movi	r2,-5
}
   218a0:	e037883a 	mov	sp,fp
   218a4:	dfc00117 	ldw	ra,4(sp)
   218a8:	df000017 	ldw	fp,0(sp)
   218ac:	dec00204 	addi	sp,sp,8
   218b0:	f800283a 	ret

000218b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   218b4:	defff304 	addi	sp,sp,-52
   218b8:	dfc00c15 	stw	ra,48(sp)
   218bc:	df000b15 	stw	fp,44(sp)
   218c0:	df000b04 	addi	fp,sp,44
   218c4:	e13ffc15 	stw	r4,-16(fp)
   218c8:	e17ffd15 	stw	r5,-12(fp)
   218cc:	e1bffe15 	stw	r6,-8(fp)
   218d0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   218d4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   218d8:	e0bffd17 	ldw	r2,-12(fp)
   218dc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   218e0:	00003706 	br	219c0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   218e4:	e0bffc17 	ldw	r2,-16(fp)
   218e8:	10800c17 	ldw	r2,48(r2)
   218ec:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   218f0:	e0bffc17 	ldw	r2,-16(fp)
   218f4:	10800d17 	ldw	r2,52(r2)
   218f8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   218fc:	e0fff917 	ldw	r3,-28(fp)
   21900:	e0bff517 	ldw	r2,-44(fp)
   21904:	1880062e 	bgeu	r3,r2,21920 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   21908:	e0fff517 	ldw	r3,-44(fp)
   2190c:	e0bff917 	ldw	r2,-28(fp)
   21910:	1885c83a 	sub	r2,r3,r2
   21914:	10bfffc4 	addi	r2,r2,-1
   21918:	e0bff615 	stw	r2,-40(fp)
   2191c:	00000b06 	br	2194c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   21920:	e0bff517 	ldw	r2,-44(fp)
   21924:	10000526 	beq	r2,zero,2193c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   21928:	00c20004 	movi	r3,2048
   2192c:	e0bff917 	ldw	r2,-28(fp)
   21930:	1885c83a 	sub	r2,r3,r2
   21934:	e0bff615 	stw	r2,-40(fp)
   21938:	00000406 	br	2194c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2193c:	00c1ffc4 	movi	r3,2047
   21940:	e0bff917 	ldw	r2,-28(fp)
   21944:	1885c83a 	sub	r2,r3,r2
   21948:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2194c:	e0bff617 	ldw	r2,-40(fp)
   21950:	10001e26 	beq	r2,zero,219cc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   21954:	e0fffe17 	ldw	r3,-8(fp)
   21958:	e0bff617 	ldw	r2,-40(fp)
   2195c:	1880022e 	bgeu	r3,r2,21968 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   21960:	e0bffe17 	ldw	r2,-8(fp)
   21964:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   21968:	e0bffc17 	ldw	r2,-16(fp)
   2196c:	10c20e04 	addi	r3,r2,2104
   21970:	e0bff917 	ldw	r2,-28(fp)
   21974:	1885883a 	add	r2,r3,r2
   21978:	e1bff617 	ldw	r6,-40(fp)
   2197c:	e17ffd17 	ldw	r5,-12(fp)
   21980:	1009883a 	mov	r4,r2
   21984:	00234dc0 	call	234dc <memcpy>
      ptr   += n;
   21988:	e0fffd17 	ldw	r3,-12(fp)
   2198c:	e0bff617 	ldw	r2,-40(fp)
   21990:	1885883a 	add	r2,r3,r2
   21994:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   21998:	e0fffe17 	ldw	r3,-8(fp)
   2199c:	e0bff617 	ldw	r2,-40(fp)
   219a0:	1885c83a 	sub	r2,r3,r2
   219a4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   219a8:	e0fff917 	ldw	r3,-28(fp)
   219ac:	e0bff617 	ldw	r2,-40(fp)
   219b0:	1885883a 	add	r2,r3,r2
   219b4:	10c1ffcc 	andi	r3,r2,2047
   219b8:	e0bffc17 	ldw	r2,-16(fp)
   219bc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   219c0:	e0bffe17 	ldw	r2,-8(fp)
   219c4:	00bfc716 	blt	zero,r2,218e4 <__alt_mem_epcs_flash_controller_0+0xfffe08e4>
   219c8:	00000106 	br	219d0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   219cc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   219d0:	0005303a 	rdctl	r2,status
   219d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   219d8:	e0fffb17 	ldw	r3,-20(fp)
   219dc:	00bfff84 	movi	r2,-2
   219e0:	1884703a 	and	r2,r3,r2
   219e4:	1001703a 	wrctl	status,r2
  
  return context;
   219e8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   219ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   219f0:	e0bffc17 	ldw	r2,-16(fp)
   219f4:	10800817 	ldw	r2,32(r2)
   219f8:	10c00094 	ori	r3,r2,2
   219fc:	e0bffc17 	ldw	r2,-16(fp)
   21a00:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21a04:	e0bffc17 	ldw	r2,-16(fp)
   21a08:	10800017 	ldw	r2,0(r2)
   21a0c:	10800104 	addi	r2,r2,4
   21a10:	1007883a 	mov	r3,r2
   21a14:	e0bffc17 	ldw	r2,-16(fp)
   21a18:	10800817 	ldw	r2,32(r2)
   21a1c:	18800035 	stwio	r2,0(r3)
   21a20:	e0bffa17 	ldw	r2,-24(fp)
   21a24:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21a28:	e0bff817 	ldw	r2,-32(fp)
   21a2c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   21a30:	e0bffe17 	ldw	r2,-8(fp)
   21a34:	0080100e 	bge	zero,r2,21a78 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   21a38:	e0bfff17 	ldw	r2,-4(fp)
   21a3c:	1090000c 	andi	r2,r2,16384
   21a40:	1000101e 	bne	r2,zero,21a84 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   21a44:	0001883a 	nop
   21a48:	e0bffc17 	ldw	r2,-16(fp)
   21a4c:	10c00d17 	ldw	r3,52(r2)
   21a50:	e0bff517 	ldw	r2,-44(fp)
   21a54:	1880051e 	bne	r3,r2,21a6c <altera_avalon_jtag_uart_write+0x1b8>
   21a58:	e0bffc17 	ldw	r2,-16(fp)
   21a5c:	10c00917 	ldw	r3,36(r2)
   21a60:	e0bffc17 	ldw	r2,-16(fp)
   21a64:	10800117 	ldw	r2,4(r2)
   21a68:	18bff736 	bltu	r3,r2,21a48 <__alt_mem_epcs_flash_controller_0+0xfffe0a48>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   21a6c:	e0bffc17 	ldw	r2,-16(fp)
   21a70:	10800917 	ldw	r2,36(r2)
   21a74:	1000051e 	bne	r2,zero,21a8c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   21a78:	e0bffe17 	ldw	r2,-8(fp)
   21a7c:	00bfd016 	blt	zero,r2,219c0 <__alt_mem_epcs_flash_controller_0+0xfffe09c0>
   21a80:	00000306 	br	21a90 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   21a84:	0001883a 	nop
   21a88:	00000106 	br	21a90 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   21a8c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   21a90:	e0fffd17 	ldw	r3,-12(fp)
   21a94:	e0bff717 	ldw	r2,-36(fp)
   21a98:	18800426 	beq	r3,r2,21aac <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   21a9c:	e0fffd17 	ldw	r3,-12(fp)
   21aa0:	e0bff717 	ldw	r2,-36(fp)
   21aa4:	1885c83a 	sub	r2,r3,r2
   21aa8:	00000606 	br	21ac4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   21aac:	e0bfff17 	ldw	r2,-4(fp)
   21ab0:	1090000c 	andi	r2,r2,16384
   21ab4:	10000226 	beq	r2,zero,21ac0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   21ab8:	00bffd44 	movi	r2,-11
   21abc:	00000106 	br	21ac4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   21ac0:	00bffec4 	movi	r2,-5
}
   21ac4:	e037883a 	mov	sp,fp
   21ac8:	dfc00117 	ldw	ra,4(sp)
   21acc:	df000017 	ldw	fp,0(sp)
   21ad0:	dec00204 	addi	sp,sp,8
   21ad4:	f800283a 	ret

00021ad8 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
   21ad8:	defff904 	addi	sp,sp,-28
   21adc:	dfc00615 	stw	ra,24(sp)
   21ae0:	df000515 	stw	fp,20(sp)
   21ae4:	df000504 	addi	fp,sp,20
   21ae8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
   21aec:	00800144 	movi	r2,5
   21af0:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
   21af4:	d8000215 	stw	zero,8(sp)
   21af8:	e0bffe44 	addi	r2,fp,-7
   21afc:	d8800115 	stw	r2,4(sp)
   21b00:	00800044 	movi	r2,1
   21b04:	d8800015 	stw	r2,0(sp)
   21b08:	e1fffe04 	addi	r7,fp,-8
   21b0c:	01800044 	movi	r6,1
   21b10:	000b883a 	mov	r5,zero
   21b14:	e13fff17 	ldw	r4,-4(fp)
   21b18:	0022eb00 	call	22eb0 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
   21b1c:	e0bffe43 	ldbu	r2,-7(fp)
}
   21b20:	e037883a 	mov	sp,fp
   21b24:	dfc00117 	ldw	ra,4(sp)
   21b28:	df000017 	ldw	fp,0(sp)
   21b2c:	dec00204 	addi	sp,sp,8
   21b30:	f800283a 	ret

00021b34 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
   21b34:	defffd04 	addi	sp,sp,-12
   21b38:	dfc00215 	stw	ra,8(sp)
   21b3c:	df000115 	stw	fp,4(sp)
   21b40:	df000104 	addi	fp,sp,4
   21b44:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
   21b48:	e13fff17 	ldw	r4,-4(fp)
   21b4c:	0021ad80 	call	21ad8 <epcs_read_status_register>
   21b50:	10803fcc 	andi	r2,r2,255
   21b54:	1080004c 	andi	r2,r2,1
}
   21b58:	e037883a 	mov	sp,fp
   21b5c:	dfc00117 	ldw	ra,4(sp)
   21b60:	df000017 	ldw	fp,0(sp)
   21b64:	dec00204 	addi	sp,sp,8
   21b68:	f800283a 	ret

00021b6c <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
   21b6c:	defffd04 	addi	sp,sp,-12
   21b70:	dfc00215 	stw	ra,8(sp)
   21b74:	df000115 	stw	fp,4(sp)
   21b78:	df000104 	addi	fp,sp,4
   21b7c:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
   21b80:	0001883a 	nop
   21b84:	e13fff17 	ldw	r4,-4(fp)
   21b88:	0021b340 	call	21b34 <epcs_test_wip>
   21b8c:	103ffd1e 	bne	r2,zero,21b84 <__alt_mem_epcs_flash_controller_0+0xfffe0b84>
  {
  }
}
   21b90:	0001883a 	nop
   21b94:	e037883a 	mov	sp,fp
   21b98:	dfc00117 	ldw	ra,4(sp)
   21b9c:	df000017 	ldw	fp,0(sp)
   21ba0:	dec00204 	addi	sp,sp,8
   21ba4:	f800283a 	ret

00021ba8 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
   21ba8:	defff604 	addi	sp,sp,-40
   21bac:	dfc00915 	stw	ra,36(sp)
   21bb0:	df000815 	stw	fp,32(sp)
   21bb4:	df000804 	addi	fp,sp,32
   21bb8:	e13ffd15 	stw	r4,-12(fp)
   21bbc:	e17ffe15 	stw	r5,-8(fp)
   21bc0:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
   21bc4:	e0bfff17 	ldw	r2,-4(fp)
   21bc8:	10001226 	beq	r2,zero,21c14 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
   21bcc:	00bff604 	movi	r2,-40
   21bd0:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
   21bd4:	e0bffe17 	ldw	r2,-8(fp)
   21bd8:	1004d63a 	srli	r2,r2,24
   21bdc:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
   21be0:	e0bffe17 	ldw	r2,-8(fp)
   21be4:	1004d43a 	srli	r2,r2,16
   21be8:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
   21bec:	e0bffe17 	ldw	r2,-8(fp)
   21bf0:	1004d23a 	srli	r2,r2,8
   21bf4:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
   21bf8:	e0bffe17 	ldw	r2,-8(fp)
   21bfc:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
   21c00:	00800144 	movi	r2,5
   21c04:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
   21c08:	e13ffd17 	ldw	r4,-12(fp)
   21c0c:	002205c0 	call	2205c <epcs_enter_4_bytes_mode>
   21c10:	00000c06 	br	21c44 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
   21c14:	00bff604 	movi	r2,-40
   21c18:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
   21c1c:	e0bffe17 	ldw	r2,-8(fp)
   21c20:	1004d43a 	srli	r2,r2,16
   21c24:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
   21c28:	e0bffe17 	ldw	r2,-8(fp)
   21c2c:	1004d23a 	srli	r2,r2,8
   21c30:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
   21c34:	e0bffe17 	ldw	r2,-8(fp)
   21c38:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
   21c3c:	00800104 	movi	r2,4
   21c40:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
   21c44:	e13ffd17 	ldw	r4,-12(fp)
   21c48:	0021d980 	call	21d98 <epcs_write_enable>

  alt_avalon_spi_command(
   21c4c:	e0bffb03 	ldbu	r2,-20(fp)
   21c50:	e0fffb44 	addi	r3,fp,-19
   21c54:	d8000215 	stw	zero,8(sp)
   21c58:	d8000115 	stw	zero,4(sp)
   21c5c:	d8000015 	stw	zero,0(sp)
   21c60:	180f883a 	mov	r7,r3
   21c64:	100d883a 	mov	r6,r2
   21c68:	000b883a 	mov	r5,zero
   21c6c:	e13ffd17 	ldw	r4,-12(fp)
   21c70:	0022eb00 	call	22eb0 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   21c74:	e13ffd17 	ldw	r4,-12(fp)
   21c78:	0021b6c0 	call	21b6c <epcs_await_wip_released>

  if(four_bytes_mode)
   21c7c:	e0bfff17 	ldw	r2,-4(fp)
   21c80:	10000226 	beq	r2,zero,21c8c <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
   21c84:	e13ffd17 	ldw	r4,-12(fp)
   21c88:	00220b80 	call	220b8 <epcs_exit_4_bytes_mode>
  }
}
   21c8c:	0001883a 	nop
   21c90:	e037883a 	mov	sp,fp
   21c94:	dfc00117 	ldw	ra,4(sp)
   21c98:	df000017 	ldw	fp,0(sp)
   21c9c:	dec00204 	addi	sp,sp,8
   21ca0:	f800283a 	ret

00021ca4 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
   21ca4:	defff404 	addi	sp,sp,-48
   21ca8:	dfc00b15 	stw	ra,44(sp)
   21cac:	df000a15 	stw	fp,40(sp)
   21cb0:	df000a04 	addi	fp,sp,40
   21cb4:	e13ffc15 	stw	r4,-16(fp)
   21cb8:	e17ffd15 	stw	r5,-12(fp)
   21cbc:	e1bffe15 	stw	r6,-8(fp)
   21cc0:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
   21cc4:	008000c4 	movi	r2,3
   21cc8:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   21ccc:	e0800217 	ldw	r2,8(fp)
   21cd0:	10001026 	beq	r2,zero,21d14 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
   21cd4:	e0bffd17 	ldw	r2,-12(fp)
   21cd8:	1004d63a 	srli	r2,r2,24
   21cdc:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
   21ce0:	e0bffd17 	ldw	r2,-12(fp)
   21ce4:	1005d43a 	srai	r2,r2,16
   21ce8:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
   21cec:	e0bffd17 	ldw	r2,-12(fp)
   21cf0:	1005d23a 	srai	r2,r2,8
   21cf4:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
   21cf8:	e0bffd17 	ldw	r2,-12(fp)
   21cfc:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
   21d00:	00800144 	movi	r2,5
   21d04:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
   21d08:	e13ffc17 	ldw	r4,-16(fp)
   21d0c:	002205c0 	call	2205c <epcs_enter_4_bytes_mode>
   21d10:	00000a06 	br	21d3c <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
   21d14:	e0bffd17 	ldw	r2,-12(fp)
   21d18:	1005d43a 	srai	r2,r2,16
   21d1c:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
   21d20:	e0bffd17 	ldw	r2,-12(fp)
   21d24:	1005d23a 	srai	r2,r2,8
   21d28:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
   21d2c:	e0bffd17 	ldw	r2,-12(fp)
   21d30:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
   21d34:	00800104 	movi	r2,4
   21d38:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
   21d3c:	e13ffc17 	ldw	r4,-16(fp)
   21d40:	0021b6c0 	call	21b6c <epcs_await_wip_released>

  alt_avalon_spi_command(
   21d44:	e0bfff17 	ldw	r2,-4(fp)
   21d48:	e13ffa04 	addi	r4,fp,-24
   21d4c:	d8000215 	stw	zero,8(sp)
   21d50:	e0fffe17 	ldw	r3,-8(fp)
   21d54:	d8c00115 	stw	r3,4(sp)
   21d58:	d8800015 	stw	r2,0(sp)
   21d5c:	200f883a 	mov	r7,r4
   21d60:	e1bff917 	ldw	r6,-28(fp)
   21d64:	000b883a 	mov	r5,zero
   21d68:	e13ffc17 	ldw	r4,-16(fp)
   21d6c:	0022eb00 	call	22eb0 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
   21d70:	e0800217 	ldw	r2,8(fp)
   21d74:	10000226 	beq	r2,zero,21d80 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
   21d78:	e13ffc17 	ldw	r4,-16(fp)
   21d7c:	00220b80 	call	220b8 <epcs_exit_4_bytes_mode>
  }

  return length;
   21d80:	e0bfff17 	ldw	r2,-4(fp)
}
   21d84:	e037883a 	mov	sp,fp
   21d88:	dfc00117 	ldw	ra,4(sp)
   21d8c:	df000017 	ldw	fp,0(sp)
   21d90:	dec00204 	addi	sp,sp,8
   21d94:	f800283a 	ret

00021d98 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
   21d98:	defff904 	addi	sp,sp,-28
   21d9c:	dfc00615 	stw	ra,24(sp)
   21da0:	df000515 	stw	fp,20(sp)
   21da4:	df000504 	addi	fp,sp,20
   21da8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
   21dac:	00800184 	movi	r2,6
   21db0:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
   21db4:	d8000215 	stw	zero,8(sp)
   21db8:	d8000115 	stw	zero,4(sp)
   21dbc:	d8000015 	stw	zero,0(sp)
   21dc0:	e1fffe04 	addi	r7,fp,-8
   21dc4:	01800044 	movi	r6,1
   21dc8:	000b883a 	mov	r5,zero
   21dcc:	e13fff17 	ldw	r4,-4(fp)
   21dd0:	0022eb00 	call	22eb0 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
   21dd4:	0001883a 	nop
   21dd8:	e037883a 	mov	sp,fp
   21ddc:	dfc00117 	ldw	ra,4(sp)
   21de0:	df000017 	ldw	fp,0(sp)
   21de4:	dec00204 	addi	sp,sp,8
   21de8:	f800283a 	ret

00021dec <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
   21dec:	defff804 	addi	sp,sp,-32
   21df0:	dfc00715 	stw	ra,28(sp)
   21df4:	df000615 	stw	fp,24(sp)
   21df8:	df000604 	addi	fp,sp,24
   21dfc:	e13ffe15 	stw	r4,-8(fp)
   21e00:	2805883a 	mov	r2,r5
   21e04:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
   21e08:	00800044 	movi	r2,1
   21e0c:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
   21e10:	e0bfff03 	ldbu	r2,-4(fp)
   21e14:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
   21e18:	d8000215 	stw	zero,8(sp)
   21e1c:	d8000115 	stw	zero,4(sp)
   21e20:	d8000015 	stw	zero,0(sp)
   21e24:	e1fffd04 	addi	r7,fp,-12
   21e28:	01800084 	movi	r6,2
   21e2c:	000b883a 	mov	r5,zero
   21e30:	e13ffe17 	ldw	r4,-8(fp)
   21e34:	0022eb00 	call	22eb0 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
   21e38:	e13ffe17 	ldw	r4,-8(fp)
   21e3c:	0021b6c0 	call	21b6c <epcs_await_wip_released>
}
   21e40:	0001883a 	nop
   21e44:	e037883a 	mov	sp,fp
   21e48:	dfc00117 	ldw	ra,4(sp)
   21e4c:	df000017 	ldw	fp,0(sp)
   21e50:	dec00204 	addi	sp,sp,8
   21e54:	f800283a 	ret

00021e58 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
   21e58:	defff404 	addi	sp,sp,-48
   21e5c:	dfc00b15 	stw	ra,44(sp)
   21e60:	df000a15 	stw	fp,40(sp)
   21e64:	df000a04 	addi	fp,sp,40
   21e68:	e13ffc15 	stw	r4,-16(fp)
   21e6c:	e17ffd15 	stw	r5,-12(fp)
   21e70:	e1bffe15 	stw	r6,-8(fp)
   21e74:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
   21e78:	00800084 	movi	r2,2
   21e7c:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
   21e80:	e0800217 	ldw	r2,8(fp)
   21e84:	10001026 	beq	r2,zero,21ec8 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
   21e88:	e0bffd17 	ldw	r2,-12(fp)
   21e8c:	1004d63a 	srli	r2,r2,24
   21e90:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
   21e94:	e0bffd17 	ldw	r2,-12(fp)
   21e98:	1005d43a 	srai	r2,r2,16
   21e9c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
   21ea0:	e0bffd17 	ldw	r2,-12(fp)
   21ea4:	1005d23a 	srai	r2,r2,8
   21ea8:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
   21eac:	e0bffd17 	ldw	r2,-12(fp)
   21eb0:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
   21eb4:	00800144 	movi	r2,5
   21eb8:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
   21ebc:	e13ffc17 	ldw	r4,-16(fp)
   21ec0:	002205c0 	call	2205c <epcs_enter_4_bytes_mode>
   21ec4:	00000a06 	br	21ef0 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
   21ec8:	e0bffd17 	ldw	r2,-12(fp)
   21ecc:	1005d43a 	srai	r2,r2,16
   21ed0:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
   21ed4:	e0bffd17 	ldw	r2,-12(fp)
   21ed8:	1005d23a 	srai	r2,r2,8
   21edc:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
   21ee0:	e0bffd17 	ldw	r2,-12(fp)
   21ee4:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
   21ee8:	00800104 	movi	r2,4
   21eec:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
   21ef0:	e13ffc17 	ldw	r4,-16(fp)
   21ef4:	0021d980 	call	21d98 <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
   21ef8:	e0fffa04 	addi	r3,fp,-24
   21efc:	00800044 	movi	r2,1
   21f00:	d8800215 	stw	r2,8(sp)
   21f04:	d8000115 	stw	zero,4(sp)
   21f08:	d8000015 	stw	zero,0(sp)
   21f0c:	180f883a 	mov	r7,r3
   21f10:	e1bff917 	ldw	r6,-28(fp)
   21f14:	000b883a 	mov	r5,zero
   21f18:	e13ffc17 	ldw	r4,-16(fp)
   21f1c:	0022eb00 	call	22eb0 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
   21f20:	e0bfff17 	ldw	r2,-4(fp)
   21f24:	d8000215 	stw	zero,8(sp)
   21f28:	d8000115 	stw	zero,4(sp)
   21f2c:	d8000015 	stw	zero,0(sp)
   21f30:	e1fffe17 	ldw	r7,-8(fp)
   21f34:	100d883a 	mov	r6,r2
   21f38:	000b883a 	mov	r5,zero
   21f3c:	e13ffc17 	ldw	r4,-16(fp)
   21f40:	0022eb00 	call	22eb0 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
   21f44:	e13ffc17 	ldw	r4,-16(fp)
   21f48:	0021b6c0 	call	21b6c <epcs_await_wip_released>

  if(four_bytes_mode)
   21f4c:	e0800217 	ldw	r2,8(fp)
   21f50:	10000226 	beq	r2,zero,21f5c <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
   21f54:	e13ffc17 	ldw	r4,-16(fp)
   21f58:	00220b80 	call	220b8 <epcs_exit_4_bytes_mode>
  }

  return length;
   21f5c:	e0bfff17 	ldw	r2,-4(fp)
}
   21f60:	e037883a 	mov	sp,fp
   21f64:	dfc00117 	ldw	ra,4(sp)
   21f68:	df000017 	ldw	fp,0(sp)
   21f6c:	dec00204 	addi	sp,sp,8
   21f70:	f800283a 	ret

00021f74 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
   21f74:	defff804 	addi	sp,sp,-32
   21f78:	dfc00715 	stw	ra,28(sp)
   21f7c:	df000615 	stw	fp,24(sp)
   21f80:	df000604 	addi	fp,sp,24
   21f84:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
   21f88:	00bfeac4 	movi	r2,-85
   21f8c:	e0bffd05 	stb	r2,-12(fp)
   21f90:	e03ffd45 	stb	zero,-11(fp)
   21f94:	e03ffd85 	stb	zero,-10(fp)
   21f98:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
   21f9c:	d8000215 	stw	zero,8(sp)
   21fa0:	e0bffe04 	addi	r2,fp,-8
   21fa4:	d8800115 	stw	r2,4(sp)
   21fa8:	00800044 	movi	r2,1
   21fac:	d8800015 	stw	r2,0(sp)
   21fb0:	e1fffd04 	addi	r7,fp,-12
   21fb4:	01800104 	movi	r6,4
   21fb8:	000b883a 	mov	r5,zero
   21fbc:	e13fff17 	ldw	r4,-4(fp)
   21fc0:	0022eb00 	call	22eb0 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
   21fc4:	e0bffe03 	ldbu	r2,-8(fp)
}
   21fc8:	e037883a 	mov	sp,fp
   21fcc:	dfc00117 	ldw	ra,4(sp)
   21fd0:	df000017 	ldw	fp,0(sp)
   21fd4:	dec00204 	addi	sp,sp,8
   21fd8:	f800283a 	ret

00021fdc <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
   21fdc:	defff904 	addi	sp,sp,-28
   21fe0:	dfc00615 	stw	ra,24(sp)
   21fe4:	df000515 	stw	fp,20(sp)
   21fe8:	df000504 	addi	fp,sp,20
   21fec:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
   21ff0:	00bfe7c4 	movi	r2,-97
   21ff4:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
   21ff8:	d8000215 	stw	zero,8(sp)
   21ffc:	e0bffe44 	addi	r2,fp,-7
   22000:	d8800115 	stw	r2,4(sp)
   22004:	008000c4 	movi	r2,3
   22008:	d8800015 	stw	r2,0(sp)
   2200c:	e1fffe04 	addi	r7,fp,-8
   22010:	01800044 	movi	r6,1
   22014:	000b883a 	mov	r5,zero
   22018:	e13fff17 	ldw	r4,-4(fp)
   2201c:	0022eb00 	call	22eb0 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
   22020:	e0bffe43 	ldbu	r2,-7(fp)
   22024:	10803fcc 	andi	r2,r2,255
   22028:	1006943a 	slli	r3,r2,16
   2202c:	e0bffe83 	ldbu	r2,-6(fp)
   22030:	10803fcc 	andi	r2,r2,255
   22034:	1004923a 	slli	r2,r2,8
   22038:	1886b03a 	or	r3,r3,r2
   2203c:	e0bffec3 	ldbu	r2,-5(fp)
   22040:	10803fcc 	andi	r2,r2,255
   22044:	1884b03a 	or	r2,r3,r2
}
   22048:	e037883a 	mov	sp,fp
   2204c:	dfc00117 	ldw	ra,4(sp)
   22050:	df000017 	ldw	fp,0(sp)
   22054:	dec00204 	addi	sp,sp,8
   22058:	f800283a 	ret

0002205c <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
   2205c:	defff904 	addi	sp,sp,-28
   22060:	dfc00615 	stw	ra,24(sp)
   22064:	df000515 	stw	fp,20(sp)
   22068:	df000504 	addi	fp,sp,20
   2206c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
   22070:	00bfedc4 	movi	r2,-73
   22074:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   22078:	e13fff17 	ldw	r4,-4(fp)
   2207c:	0021d980 	call	21d98 <epcs_write_enable>

  alt_avalon_spi_command(
   22080:	d8000215 	stw	zero,8(sp)
   22084:	d8000115 	stw	zero,4(sp)
   22088:	d8000015 	stw	zero,0(sp)
   2208c:	e1fffe04 	addi	r7,fp,-8
   22090:	01800044 	movi	r6,1
   22094:	000b883a 	mov	r5,zero
   22098:	e13fff17 	ldw	r4,-4(fp)
   2209c:	0022eb00 	call	22eb0 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   220a0:	0001883a 	nop
}
   220a4:	e037883a 	mov	sp,fp
   220a8:	dfc00117 	ldw	ra,4(sp)
   220ac:	df000017 	ldw	fp,0(sp)
   220b0:	dec00204 	addi	sp,sp,8
   220b4:	f800283a 	ret

000220b8 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
   220b8:	defff904 	addi	sp,sp,-28
   220bc:	dfc00615 	stw	ra,24(sp)
   220c0:	df000515 	stw	fp,20(sp)
   220c4:	df000504 	addi	fp,sp,20
   220c8:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
   220cc:	00bffa44 	movi	r2,-23
   220d0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
   220d4:	e13fff17 	ldw	r4,-4(fp)
   220d8:	0021d980 	call	21d98 <epcs_write_enable>

  alt_avalon_spi_command(
   220dc:	d8000215 	stw	zero,8(sp)
   220e0:	d8000115 	stw	zero,4(sp)
   220e4:	d8000015 	stw	zero,0(sp)
   220e8:	e1fffe04 	addi	r7,fp,-8
   220ec:	01800044 	movi	r6,1
   220f0:	000b883a 	mov	r5,zero
   220f4:	e13fff17 	ldw	r4,-4(fp)
   220f8:	0022eb00 	call	22eb0 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  return;
   220fc:	0001883a 	nop
}
   22100:	e037883a 	mov	sp,fp
   22104:	dfc00117 	ldw	ra,4(sp)
   22108:	df000017 	ldw	fp,0(sp)
   2210c:	dec00204 	addi	sp,sp,8
   22110:	f800283a 	ret

00022114 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   22114:	defff504 	addi	sp,sp,-44
   22118:	df000a15 	stw	fp,40(sp)
   2211c:	df000a04 	addi	fp,sp,40
   22120:	e13ffc15 	stw	r4,-16(fp)
   22124:	e17ffd15 	stw	r5,-12(fp)
   22128:	e1bffe15 	stw	r6,-8(fp)
   2212c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   22130:	e03ff615 	stw	zero,-40(fp)
   22134:	d0a5dc17 	ldw	r2,-26768(gp)
  
  if (alt_ticks_per_second ())
   22138:	10003c26 	beq	r2,zero,2222c <alt_alarm_start+0x118>
  {
    if (alarm)
   2213c:	e0bffc17 	ldw	r2,-16(fp)
   22140:	10003826 	beq	r2,zero,22224 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   22144:	e0bffc17 	ldw	r2,-16(fp)
   22148:	e0fffe17 	ldw	r3,-8(fp)
   2214c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   22150:	e0bffc17 	ldw	r2,-16(fp)
   22154:	e0ffff17 	ldw	r3,-4(fp)
   22158:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2215c:	0005303a 	rdctl	r2,status
   22160:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22164:	e0fff917 	ldw	r3,-28(fp)
   22168:	00bfff84 	movi	r2,-2
   2216c:	1884703a 	and	r2,r3,r2
   22170:	1001703a 	wrctl	status,r2
  
  return context;
   22174:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   22178:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2217c:	d0a5dd17 	ldw	r2,-26764(gp)
      
      current_nticks = alt_nticks();
   22180:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   22184:	e0fffd17 	ldw	r3,-12(fp)
   22188:	e0bff617 	ldw	r2,-40(fp)
   2218c:	1885883a 	add	r2,r3,r2
   22190:	10c00044 	addi	r3,r2,1
   22194:	e0bffc17 	ldw	r2,-16(fp)
   22198:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2219c:	e0bffc17 	ldw	r2,-16(fp)
   221a0:	10c00217 	ldw	r3,8(r2)
   221a4:	e0bff617 	ldw	r2,-40(fp)
   221a8:	1880042e 	bgeu	r3,r2,221bc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   221ac:	e0bffc17 	ldw	r2,-16(fp)
   221b0:	00c00044 	movi	r3,1
   221b4:	10c00405 	stb	r3,16(r2)
   221b8:	00000206 	br	221c4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   221bc:	e0bffc17 	ldw	r2,-16(fp)
   221c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   221c4:	e0bffc17 	ldw	r2,-16(fp)
   221c8:	d0e00904 	addi	r3,gp,-32732
   221cc:	e0fffa15 	stw	r3,-24(fp)
   221d0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   221d4:	e0bffb17 	ldw	r2,-20(fp)
   221d8:	e0fffa17 	ldw	r3,-24(fp)
   221dc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   221e0:	e0bffa17 	ldw	r2,-24(fp)
   221e4:	10c00017 	ldw	r3,0(r2)
   221e8:	e0bffb17 	ldw	r2,-20(fp)
   221ec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   221f0:	e0bffa17 	ldw	r2,-24(fp)
   221f4:	10800017 	ldw	r2,0(r2)
   221f8:	e0fffb17 	ldw	r3,-20(fp)
   221fc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22200:	e0bffa17 	ldw	r2,-24(fp)
   22204:	e0fffb17 	ldw	r3,-20(fp)
   22208:	10c00015 	stw	r3,0(r2)
   2220c:	e0bff817 	ldw	r2,-32(fp)
   22210:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22214:	e0bff717 	ldw	r2,-36(fp)
   22218:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2221c:	0005883a 	mov	r2,zero
   22220:	00000306 	br	22230 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   22224:	00bffa84 	movi	r2,-22
   22228:	00000106 	br	22230 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2222c:	00bfde84 	movi	r2,-134
  }
}
   22230:	e037883a 	mov	sp,fp
   22234:	df000017 	ldw	fp,0(sp)
   22238:	dec00104 	addi	sp,sp,4
   2223c:	f800283a 	ret

00022240 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22240:	defffe04 	addi	sp,sp,-8
   22244:	dfc00115 	stw	ra,4(sp)
   22248:	df000015 	stw	fp,0(sp)
   2224c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22250:	d0a00517 	ldw	r2,-32748(gp)
   22254:	10000326 	beq	r2,zero,22264 <alt_get_errno+0x24>
   22258:	d0a00517 	ldw	r2,-32748(gp)
   2225c:	103ee83a 	callr	r2
   22260:	00000106 	br	22268 <alt_get_errno+0x28>
   22264:	d0a5df04 	addi	r2,gp,-26756
}
   22268:	e037883a 	mov	sp,fp
   2226c:	dfc00117 	ldw	ra,4(sp)
   22270:	df000017 	ldw	fp,0(sp)
   22274:	dec00204 	addi	sp,sp,8
   22278:	f800283a 	ret

0002227c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2227c:	defffb04 	addi	sp,sp,-20
   22280:	dfc00415 	stw	ra,16(sp)
   22284:	df000315 	stw	fp,12(sp)
   22288:	df000304 	addi	fp,sp,12
   2228c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   22290:	e0bfff17 	ldw	r2,-4(fp)
   22294:	10000616 	blt	r2,zero,222b0 <close+0x34>
   22298:	e0bfff17 	ldw	r2,-4(fp)
   2229c:	10c00324 	muli	r3,r2,12
   222a0:	008000b4 	movhi	r2,2
   222a4:	1092cd04 	addi	r2,r2,19252
   222a8:	1885883a 	add	r2,r3,r2
   222ac:	00000106 	br	222b4 <close+0x38>
   222b0:	0005883a 	mov	r2,zero
   222b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   222b8:	e0bffd17 	ldw	r2,-12(fp)
   222bc:	10001926 	beq	r2,zero,22324 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   222c0:	e0bffd17 	ldw	r2,-12(fp)
   222c4:	10800017 	ldw	r2,0(r2)
   222c8:	10800417 	ldw	r2,16(r2)
   222cc:	10000626 	beq	r2,zero,222e8 <close+0x6c>
   222d0:	e0bffd17 	ldw	r2,-12(fp)
   222d4:	10800017 	ldw	r2,0(r2)
   222d8:	10800417 	ldw	r2,16(r2)
   222dc:	e13ffd17 	ldw	r4,-12(fp)
   222e0:	103ee83a 	callr	r2
   222e4:	00000106 	br	222ec <close+0x70>
   222e8:	0005883a 	mov	r2,zero
   222ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   222f0:	e13fff17 	ldw	r4,-4(fp)
   222f4:	0022c840 	call	22c84 <alt_release_fd>
    if (rval < 0)
   222f8:	e0bffe17 	ldw	r2,-8(fp)
   222fc:	1000070e 	bge	r2,zero,2231c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   22300:	00222400 	call	22240 <alt_get_errno>
   22304:	1007883a 	mov	r3,r2
   22308:	e0bffe17 	ldw	r2,-8(fp)
   2230c:	0085c83a 	sub	r2,zero,r2
   22310:	18800015 	stw	r2,0(r3)
      return -1;
   22314:	00bfffc4 	movi	r2,-1
   22318:	00000706 	br	22338 <close+0xbc>
    }
    return 0;
   2231c:	0005883a 	mov	r2,zero
   22320:	00000506 	br	22338 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22324:	00222400 	call	22240 <alt_get_errno>
   22328:	1007883a 	mov	r3,r2
   2232c:	00801444 	movi	r2,81
   22330:	18800015 	stw	r2,0(r3)
    return -1;
   22334:	00bfffc4 	movi	r2,-1
  }
}
   22338:	e037883a 	mov	sp,fp
   2233c:	dfc00117 	ldw	ra,4(sp)
   22340:	df000017 	ldw	fp,0(sp)
   22344:	dec00204 	addi	sp,sp,8
   22348:	f800283a 	ret

0002234c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2234c:	defffe04 	addi	sp,sp,-8
   22350:	df000115 	stw	fp,4(sp)
   22354:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   22358:	e03fff15 	stw	zero,-4(fp)
   2235c:	00000506 	br	22374 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   22360:	e0bfff17 	ldw	r2,-4(fp)
   22364:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   22368:	e0bfff17 	ldw	r2,-4(fp)
   2236c:	10800804 	addi	r2,r2,32
   22370:	e0bfff15 	stw	r2,-4(fp)
   22374:	e0bfff17 	ldw	r2,-4(fp)
   22378:	10820030 	cmpltui	r2,r2,2048
   2237c:	103ff81e 	bne	r2,zero,22360 <__alt_mem_epcs_flash_controller_0+0xfffe1360>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   22380:	0001883a 	nop
   22384:	e037883a 	mov	sp,fp
   22388:	df000017 	ldw	fp,0(sp)
   2238c:	dec00104 	addi	sp,sp,4
   22390:	f800283a 	ret

00022394 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   22394:	defffc04 	addi	sp,sp,-16
   22398:	df000315 	stw	fp,12(sp)
   2239c:	df000304 	addi	fp,sp,12
   223a0:	e13ffd15 	stw	r4,-12(fp)
   223a4:	e17ffe15 	stw	r5,-8(fp)
   223a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   223ac:	e0bfff17 	ldw	r2,-4(fp)
}
   223b0:	e037883a 	mov	sp,fp
   223b4:	df000017 	ldw	fp,0(sp)
   223b8:	dec00104 	addi	sp,sp,4
   223bc:	f800283a 	ret

000223c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   223c0:	defffe04 	addi	sp,sp,-8
   223c4:	dfc00115 	stw	ra,4(sp)
   223c8:	df000015 	stw	fp,0(sp)
   223cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   223d0:	d0a00517 	ldw	r2,-32748(gp)
   223d4:	10000326 	beq	r2,zero,223e4 <alt_get_errno+0x24>
   223d8:	d0a00517 	ldw	r2,-32748(gp)
   223dc:	103ee83a 	callr	r2
   223e0:	00000106 	br	223e8 <alt_get_errno+0x28>
   223e4:	d0a5df04 	addi	r2,gp,-26756
}
   223e8:	e037883a 	mov	sp,fp
   223ec:	dfc00117 	ldw	ra,4(sp)
   223f0:	df000017 	ldw	fp,0(sp)
   223f4:	dec00204 	addi	sp,sp,8
   223f8:	f800283a 	ret

000223fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   223fc:	defffa04 	addi	sp,sp,-24
   22400:	dfc00515 	stw	ra,20(sp)
   22404:	df000415 	stw	fp,16(sp)
   22408:	df000404 	addi	fp,sp,16
   2240c:	e13ffe15 	stw	r4,-8(fp)
   22410:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   22414:	e0bffe17 	ldw	r2,-8(fp)
   22418:	10000326 	beq	r2,zero,22428 <alt_dev_llist_insert+0x2c>
   2241c:	e0bffe17 	ldw	r2,-8(fp)
   22420:	10800217 	ldw	r2,8(r2)
   22424:	1000061e 	bne	r2,zero,22440 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   22428:	00223c00 	call	223c0 <alt_get_errno>
   2242c:	1007883a 	mov	r3,r2
   22430:	00800584 	movi	r2,22
   22434:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   22438:	00bffa84 	movi	r2,-22
   2243c:	00001306 	br	2248c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   22440:	e0bffe17 	ldw	r2,-8(fp)
   22444:	e0ffff17 	ldw	r3,-4(fp)
   22448:	e0fffc15 	stw	r3,-16(fp)
   2244c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22450:	e0bffd17 	ldw	r2,-12(fp)
   22454:	e0fffc17 	ldw	r3,-16(fp)
   22458:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2245c:	e0bffc17 	ldw	r2,-16(fp)
   22460:	10c00017 	ldw	r3,0(r2)
   22464:	e0bffd17 	ldw	r2,-12(fp)
   22468:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2246c:	e0bffc17 	ldw	r2,-16(fp)
   22470:	10800017 	ldw	r2,0(r2)
   22474:	e0fffd17 	ldw	r3,-12(fp)
   22478:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2247c:	e0bffc17 	ldw	r2,-16(fp)
   22480:	e0fffd17 	ldw	r3,-12(fp)
   22484:	10c00015 	stw	r3,0(r2)

  return 0;  
   22488:	0005883a 	mov	r2,zero
}
   2248c:	e037883a 	mov	sp,fp
   22490:	dfc00117 	ldw	ra,4(sp)
   22494:	df000017 	ldw	fp,0(sp)
   22498:	dec00204 	addi	sp,sp,8
   2249c:	f800283a 	ret

000224a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   224a0:	defffd04 	addi	sp,sp,-12
   224a4:	dfc00215 	stw	ra,8(sp)
   224a8:	df000115 	stw	fp,4(sp)
   224ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   224b0:	008000b4 	movhi	r2,2
   224b4:	108e6104 	addi	r2,r2,14724
   224b8:	e0bfff15 	stw	r2,-4(fp)
   224bc:	00000606 	br	224d8 <_do_ctors+0x38>
        (*ctor) (); 
   224c0:	e0bfff17 	ldw	r2,-4(fp)
   224c4:	10800017 	ldw	r2,0(r2)
   224c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   224cc:	e0bfff17 	ldw	r2,-4(fp)
   224d0:	10bfff04 	addi	r2,r2,-4
   224d4:	e0bfff15 	stw	r2,-4(fp)
   224d8:	e0ffff17 	ldw	r3,-4(fp)
   224dc:	008000b4 	movhi	r2,2
   224e0:	108e6204 	addi	r2,r2,14728
   224e4:	18bff62e 	bgeu	r3,r2,224c0 <__alt_mem_epcs_flash_controller_0+0xfffe14c0>
        (*ctor) (); 
}
   224e8:	0001883a 	nop
   224ec:	e037883a 	mov	sp,fp
   224f0:	dfc00117 	ldw	ra,4(sp)
   224f4:	df000017 	ldw	fp,0(sp)
   224f8:	dec00204 	addi	sp,sp,8
   224fc:	f800283a 	ret

00022500 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   22500:	defffd04 	addi	sp,sp,-12
   22504:	dfc00215 	stw	ra,8(sp)
   22508:	df000115 	stw	fp,4(sp)
   2250c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22510:	008000b4 	movhi	r2,2
   22514:	108e6104 	addi	r2,r2,14724
   22518:	e0bfff15 	stw	r2,-4(fp)
   2251c:	00000606 	br	22538 <_do_dtors+0x38>
        (*dtor) (); 
   22520:	e0bfff17 	ldw	r2,-4(fp)
   22524:	10800017 	ldw	r2,0(r2)
   22528:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2252c:	e0bfff17 	ldw	r2,-4(fp)
   22530:	10bfff04 	addi	r2,r2,-4
   22534:	e0bfff15 	stw	r2,-4(fp)
   22538:	e0ffff17 	ldw	r3,-4(fp)
   2253c:	008000b4 	movhi	r2,2
   22540:	108e6204 	addi	r2,r2,14728
   22544:	18bff62e 	bgeu	r3,r2,22520 <__alt_mem_epcs_flash_controller_0+0xfffe1520>
        (*dtor) (); 
}
   22548:	0001883a 	nop
   2254c:	e037883a 	mov	sp,fp
   22550:	dfc00117 	ldw	ra,4(sp)
   22554:	df000017 	ldw	fp,0(sp)
   22558:	dec00204 	addi	sp,sp,8
   2255c:	f800283a 	ret

00022560 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
   22560:	defffc04 	addi	sp,sp,-16
   22564:	dfc00315 	stw	ra,12(sp)
   22568:	df000215 	stw	fp,8(sp)
   2256c:	df000204 	addi	fp,sp,8
   22570:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
   22574:	d1600604 	addi	r5,gp,-32744
   22578:	e13fff17 	ldw	r4,-4(fp)
   2257c:	00230ac0 	call	230ac <alt_find_dev>
   22580:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
   22584:	e0bffe17 	ldw	r2,-8(fp)
   22588:	10000926 	beq	r2,zero,225b0 <alt_flash_open_dev+0x50>
   2258c:	e0bffe17 	ldw	r2,-8(fp)
   22590:	10800317 	ldw	r2,12(r2)
   22594:	10000626 	beq	r2,zero,225b0 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
   22598:	e0bffe17 	ldw	r2,-8(fp)
   2259c:	10800317 	ldw	r2,12(r2)
   225a0:	e17fff17 	ldw	r5,-4(fp)
   225a4:	e13ffe17 	ldw	r4,-8(fp)
   225a8:	103ee83a 	callr	r2
   225ac:	00000106 	br	225b4 <alt_flash_open_dev+0x54>
  }

  return dev;
   225b0:	e0bffe17 	ldw	r2,-8(fp)
}
   225b4:	e037883a 	mov	sp,fp
   225b8:	dfc00117 	ldw	ra,4(sp)
   225bc:	df000017 	ldw	fp,0(sp)
   225c0:	dec00204 	addi	sp,sp,8
   225c4:	f800283a 	ret

000225c8 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
   225c8:	defffd04 	addi	sp,sp,-12
   225cc:	dfc00215 	stw	ra,8(sp)
   225d0:	df000115 	stw	fp,4(sp)
   225d4:	df000104 	addi	fp,sp,4
   225d8:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
   225dc:	e0bfff17 	ldw	r2,-4(fp)
   225e0:	10000826 	beq	r2,zero,22604 <alt_flash_close_dev+0x3c>
   225e4:	e0bfff17 	ldw	r2,-4(fp)
   225e8:	10800417 	ldw	r2,16(r2)
   225ec:	10000526 	beq	r2,zero,22604 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
   225f0:	e0bfff17 	ldw	r2,-4(fp)
   225f4:	10800417 	ldw	r2,16(r2)
   225f8:	e13fff17 	ldw	r4,-4(fp)
   225fc:	103ee83a 	callr	r2
  }
  return;
   22600:	0001883a 	nop
   22604:	0001883a 	nop
}
   22608:	e037883a 	mov	sp,fp
   2260c:	dfc00117 	ldw	ra,4(sp)
   22610:	df000017 	ldw	fp,0(sp)
   22614:	dec00204 	addi	sp,sp,8
   22618:	f800283a 	ret

0002261c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2261c:	defffe04 	addi	sp,sp,-8
   22620:	dfc00115 	stw	ra,4(sp)
   22624:	df000015 	stw	fp,0(sp)
   22628:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2262c:	01440004 	movi	r5,4096
   22630:	0009883a 	mov	r4,zero
   22634:	00232e80 	call	232e8 <alt_icache_flush>
#endif
}
   22638:	0001883a 	nop
   2263c:	e037883a 	mov	sp,fp
   22640:	dfc00117 	ldw	ra,4(sp)
   22644:	df000017 	ldw	fp,0(sp)
   22648:	dec00204 	addi	sp,sp,8
   2264c:	f800283a 	ret

00022650 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22650:	defff904 	addi	sp,sp,-28
   22654:	dfc00615 	stw	ra,24(sp)
   22658:	df000515 	stw	fp,20(sp)
   2265c:	df000504 	addi	fp,sp,20
   22660:	e13ffc15 	stw	r4,-16(fp)
   22664:	e17ffd15 	stw	r5,-12(fp)
   22668:	e1bffe15 	stw	r6,-8(fp)
   2266c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   22670:	e0800217 	ldw	r2,8(fp)
   22674:	d8800015 	stw	r2,0(sp)
   22678:	e1ffff17 	ldw	r7,-4(fp)
   2267c:	e1bffe17 	ldw	r6,-8(fp)
   22680:	e17ffd17 	ldw	r5,-12(fp)
   22684:	e13ffc17 	ldw	r4,-16(fp)
   22688:	00228000 	call	22800 <alt_iic_isr_register>
}  
   2268c:	e037883a 	mov	sp,fp
   22690:	dfc00117 	ldw	ra,4(sp)
   22694:	df000017 	ldw	fp,0(sp)
   22698:	dec00204 	addi	sp,sp,8
   2269c:	f800283a 	ret

000226a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   226a0:	defff904 	addi	sp,sp,-28
   226a4:	df000615 	stw	fp,24(sp)
   226a8:	df000604 	addi	fp,sp,24
   226ac:	e13ffe15 	stw	r4,-8(fp)
   226b0:	e17fff15 	stw	r5,-4(fp)
   226b4:	e0bfff17 	ldw	r2,-4(fp)
   226b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   226bc:	0005303a 	rdctl	r2,status
   226c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   226c4:	e0fffb17 	ldw	r3,-20(fp)
   226c8:	00bfff84 	movi	r2,-2
   226cc:	1884703a 	and	r2,r3,r2
   226d0:	1001703a 	wrctl	status,r2
  
  return context;
   226d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   226d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   226dc:	00c00044 	movi	r3,1
   226e0:	e0bffa17 	ldw	r2,-24(fp)
   226e4:	1884983a 	sll	r2,r3,r2
   226e8:	1007883a 	mov	r3,r2
   226ec:	d0a5db17 	ldw	r2,-26772(gp)
   226f0:	1884b03a 	or	r2,r3,r2
   226f4:	d0a5db15 	stw	r2,-26772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   226f8:	d0a5db17 	ldw	r2,-26772(gp)
   226fc:	100170fa 	wrctl	ienable,r2
   22700:	e0bffc17 	ldw	r2,-16(fp)
   22704:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22708:	e0bffd17 	ldw	r2,-12(fp)
   2270c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22710:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   22714:	0001883a 	nop
}
   22718:	e037883a 	mov	sp,fp
   2271c:	df000017 	ldw	fp,0(sp)
   22720:	dec00104 	addi	sp,sp,4
   22724:	f800283a 	ret

00022728 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   22728:	defff904 	addi	sp,sp,-28
   2272c:	df000615 	stw	fp,24(sp)
   22730:	df000604 	addi	fp,sp,24
   22734:	e13ffe15 	stw	r4,-8(fp)
   22738:	e17fff15 	stw	r5,-4(fp)
   2273c:	e0bfff17 	ldw	r2,-4(fp)
   22740:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22744:	0005303a 	rdctl	r2,status
   22748:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2274c:	e0fffb17 	ldw	r3,-20(fp)
   22750:	00bfff84 	movi	r2,-2
   22754:	1884703a 	and	r2,r3,r2
   22758:	1001703a 	wrctl	status,r2
  
  return context;
   2275c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22760:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   22764:	00c00044 	movi	r3,1
   22768:	e0bffa17 	ldw	r2,-24(fp)
   2276c:	1884983a 	sll	r2,r3,r2
   22770:	0084303a 	nor	r2,zero,r2
   22774:	1007883a 	mov	r3,r2
   22778:	d0a5db17 	ldw	r2,-26772(gp)
   2277c:	1884703a 	and	r2,r3,r2
   22780:	d0a5db15 	stw	r2,-26772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22784:	d0a5db17 	ldw	r2,-26772(gp)
   22788:	100170fa 	wrctl	ienable,r2
   2278c:	e0bffc17 	ldw	r2,-16(fp)
   22790:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22794:	e0bffd17 	ldw	r2,-12(fp)
   22798:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2279c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   227a0:	0001883a 	nop
}
   227a4:	e037883a 	mov	sp,fp
   227a8:	df000017 	ldw	fp,0(sp)
   227ac:	dec00104 	addi	sp,sp,4
   227b0:	f800283a 	ret

000227b4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   227b4:	defffc04 	addi	sp,sp,-16
   227b8:	df000315 	stw	fp,12(sp)
   227bc:	df000304 	addi	fp,sp,12
   227c0:	e13ffe15 	stw	r4,-8(fp)
   227c4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   227c8:	000530fa 	rdctl	r2,ienable
   227cc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   227d0:	00c00044 	movi	r3,1
   227d4:	e0bfff17 	ldw	r2,-4(fp)
   227d8:	1884983a 	sll	r2,r3,r2
   227dc:	1007883a 	mov	r3,r2
   227e0:	e0bffd17 	ldw	r2,-12(fp)
   227e4:	1884703a 	and	r2,r3,r2
   227e8:	1004c03a 	cmpne	r2,r2,zero
   227ec:	10803fcc 	andi	r2,r2,255
}
   227f0:	e037883a 	mov	sp,fp
   227f4:	df000017 	ldw	fp,0(sp)
   227f8:	dec00104 	addi	sp,sp,4
   227fc:	f800283a 	ret

00022800 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22800:	defff504 	addi	sp,sp,-44
   22804:	dfc00a15 	stw	ra,40(sp)
   22808:	df000915 	stw	fp,36(sp)
   2280c:	df000904 	addi	fp,sp,36
   22810:	e13ffc15 	stw	r4,-16(fp)
   22814:	e17ffd15 	stw	r5,-12(fp)
   22818:	e1bffe15 	stw	r6,-8(fp)
   2281c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   22820:	00bffa84 	movi	r2,-22
   22824:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   22828:	e0bffd17 	ldw	r2,-12(fp)
   2282c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   22830:	e0bff817 	ldw	r2,-32(fp)
   22834:	10800808 	cmpgei	r2,r2,32
   22838:	1000271e 	bne	r2,zero,228d8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2283c:	0005303a 	rdctl	r2,status
   22840:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22844:	e0fffb17 	ldw	r3,-20(fp)
   22848:	00bfff84 	movi	r2,-2
   2284c:	1884703a 	and	r2,r3,r2
   22850:	1001703a 	wrctl	status,r2
  
  return context;
   22854:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   22858:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   2285c:	008000b4 	movhi	r2,2
   22860:	109a1604 	addi	r2,r2,26712
   22864:	e0fff817 	ldw	r3,-32(fp)
   22868:	180690fa 	slli	r3,r3,3
   2286c:	10c5883a 	add	r2,r2,r3
   22870:	e0fffe17 	ldw	r3,-8(fp)
   22874:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   22878:	008000b4 	movhi	r2,2
   2287c:	109a1604 	addi	r2,r2,26712
   22880:	e0fff817 	ldw	r3,-32(fp)
   22884:	180690fa 	slli	r3,r3,3
   22888:	10c5883a 	add	r2,r2,r3
   2288c:	10800104 	addi	r2,r2,4
   22890:	e0ffff17 	ldw	r3,-4(fp)
   22894:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   22898:	e0bffe17 	ldw	r2,-8(fp)
   2289c:	10000526 	beq	r2,zero,228b4 <alt_iic_isr_register+0xb4>
   228a0:	e0bff817 	ldw	r2,-32(fp)
   228a4:	100b883a 	mov	r5,r2
   228a8:	e13ffc17 	ldw	r4,-16(fp)
   228ac:	00226a00 	call	226a0 <alt_ic_irq_enable>
   228b0:	00000406 	br	228c4 <alt_iic_isr_register+0xc4>
   228b4:	e0bff817 	ldw	r2,-32(fp)
   228b8:	100b883a 	mov	r5,r2
   228bc:	e13ffc17 	ldw	r4,-16(fp)
   228c0:	00227280 	call	22728 <alt_ic_irq_disable>
   228c4:	e0bff715 	stw	r2,-36(fp)
   228c8:	e0bffa17 	ldw	r2,-24(fp)
   228cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   228d0:	e0bff917 	ldw	r2,-28(fp)
   228d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   228d8:	e0bff717 	ldw	r2,-36(fp)
}
   228dc:	e037883a 	mov	sp,fp
   228e0:	dfc00117 	ldw	ra,4(sp)
   228e4:	df000017 	ldw	fp,0(sp)
   228e8:	dec00204 	addi	sp,sp,8
   228ec:	f800283a 	ret

000228f0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   228f0:	defff904 	addi	sp,sp,-28
   228f4:	dfc00615 	stw	ra,24(sp)
   228f8:	df000515 	stw	fp,20(sp)
   228fc:	df000504 	addi	fp,sp,20
   22900:	e13ffc15 	stw	r4,-16(fp)
   22904:	e17ffd15 	stw	r5,-12(fp)
   22908:	e1bffe15 	stw	r6,-8(fp)
   2290c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   22910:	e1bfff17 	ldw	r6,-4(fp)
   22914:	e17ffe17 	ldw	r5,-8(fp)
   22918:	e13ffd17 	ldw	r4,-12(fp)
   2291c:	0022b300 	call	22b30 <open>
   22920:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   22924:	e0bffb17 	ldw	r2,-20(fp)
   22928:	10001c16 	blt	r2,zero,2299c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   2292c:	008000b4 	movhi	r2,2
   22930:	1092cd04 	addi	r2,r2,19252
   22934:	e0fffb17 	ldw	r3,-20(fp)
   22938:	18c00324 	muli	r3,r3,12
   2293c:	10c5883a 	add	r2,r2,r3
   22940:	10c00017 	ldw	r3,0(r2)
   22944:	e0bffc17 	ldw	r2,-16(fp)
   22948:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2294c:	008000b4 	movhi	r2,2
   22950:	1092cd04 	addi	r2,r2,19252
   22954:	e0fffb17 	ldw	r3,-20(fp)
   22958:	18c00324 	muli	r3,r3,12
   2295c:	10c5883a 	add	r2,r2,r3
   22960:	10800104 	addi	r2,r2,4
   22964:	10c00017 	ldw	r3,0(r2)
   22968:	e0bffc17 	ldw	r2,-16(fp)
   2296c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   22970:	008000b4 	movhi	r2,2
   22974:	1092cd04 	addi	r2,r2,19252
   22978:	e0fffb17 	ldw	r3,-20(fp)
   2297c:	18c00324 	muli	r3,r3,12
   22980:	10c5883a 	add	r2,r2,r3
   22984:	10800204 	addi	r2,r2,8
   22988:	10c00017 	ldw	r3,0(r2)
   2298c:	e0bffc17 	ldw	r2,-16(fp)
   22990:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   22994:	e13ffb17 	ldw	r4,-20(fp)
   22998:	0022c840 	call	22c84 <alt_release_fd>
  }
} 
   2299c:	0001883a 	nop
   229a0:	e037883a 	mov	sp,fp
   229a4:	dfc00117 	ldw	ra,4(sp)
   229a8:	df000017 	ldw	fp,0(sp)
   229ac:	dec00204 	addi	sp,sp,8
   229b0:	f800283a 	ret

000229b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   229b4:	defffb04 	addi	sp,sp,-20
   229b8:	dfc00415 	stw	ra,16(sp)
   229bc:	df000315 	stw	fp,12(sp)
   229c0:	df000304 	addi	fp,sp,12
   229c4:	e13ffd15 	stw	r4,-12(fp)
   229c8:	e17ffe15 	stw	r5,-8(fp)
   229cc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   229d0:	01c07fc4 	movi	r7,511
   229d4:	01800044 	movi	r6,1
   229d8:	e17ffd17 	ldw	r5,-12(fp)
   229dc:	010000b4 	movhi	r4,2
   229e0:	2112d004 	addi	r4,r4,19264
   229e4:	00228f00 	call	228f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   229e8:	01c07fc4 	movi	r7,511
   229ec:	000d883a 	mov	r6,zero
   229f0:	e17ffe17 	ldw	r5,-8(fp)
   229f4:	010000b4 	movhi	r4,2
   229f8:	2112cd04 	addi	r4,r4,19252
   229fc:	00228f00 	call	228f0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   22a00:	01c07fc4 	movi	r7,511
   22a04:	01800044 	movi	r6,1
   22a08:	e17fff17 	ldw	r5,-4(fp)
   22a0c:	010000b4 	movhi	r4,2
   22a10:	2112d304 	addi	r4,r4,19276
   22a14:	00228f00 	call	228f0 <alt_open_fd>
}  
   22a18:	0001883a 	nop
   22a1c:	e037883a 	mov	sp,fp
   22a20:	dfc00117 	ldw	ra,4(sp)
   22a24:	df000017 	ldw	fp,0(sp)
   22a28:	dec00204 	addi	sp,sp,8
   22a2c:	f800283a 	ret

00022a30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22a30:	defffe04 	addi	sp,sp,-8
   22a34:	dfc00115 	stw	ra,4(sp)
   22a38:	df000015 	stw	fp,0(sp)
   22a3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22a40:	d0a00517 	ldw	r2,-32748(gp)
   22a44:	10000326 	beq	r2,zero,22a54 <alt_get_errno+0x24>
   22a48:	d0a00517 	ldw	r2,-32748(gp)
   22a4c:	103ee83a 	callr	r2
   22a50:	00000106 	br	22a58 <alt_get_errno+0x28>
   22a54:	d0a5df04 	addi	r2,gp,-26756
}
   22a58:	e037883a 	mov	sp,fp
   22a5c:	dfc00117 	ldw	ra,4(sp)
   22a60:	df000017 	ldw	fp,0(sp)
   22a64:	dec00204 	addi	sp,sp,8
   22a68:	f800283a 	ret

00022a6c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   22a6c:	defffd04 	addi	sp,sp,-12
   22a70:	df000215 	stw	fp,8(sp)
   22a74:	df000204 	addi	fp,sp,8
   22a78:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   22a7c:	e0bfff17 	ldw	r2,-4(fp)
   22a80:	10800217 	ldw	r2,8(r2)
   22a84:	10d00034 	orhi	r3,r2,16384
   22a88:	e0bfff17 	ldw	r2,-4(fp)
   22a8c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22a90:	e03ffe15 	stw	zero,-8(fp)
   22a94:	00001d06 	br	22b0c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22a98:	008000b4 	movhi	r2,2
   22a9c:	1092cd04 	addi	r2,r2,19252
   22aa0:	e0fffe17 	ldw	r3,-8(fp)
   22aa4:	18c00324 	muli	r3,r3,12
   22aa8:	10c5883a 	add	r2,r2,r3
   22aac:	10c00017 	ldw	r3,0(r2)
   22ab0:	e0bfff17 	ldw	r2,-4(fp)
   22ab4:	10800017 	ldw	r2,0(r2)
   22ab8:	1880111e 	bne	r3,r2,22b00 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22abc:	008000b4 	movhi	r2,2
   22ac0:	1092cd04 	addi	r2,r2,19252
   22ac4:	e0fffe17 	ldw	r3,-8(fp)
   22ac8:	18c00324 	muli	r3,r3,12
   22acc:	10c5883a 	add	r2,r2,r3
   22ad0:	10800204 	addi	r2,r2,8
   22ad4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22ad8:	1000090e 	bge	r2,zero,22b00 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   22adc:	e0bffe17 	ldw	r2,-8(fp)
   22ae0:	10c00324 	muli	r3,r2,12
   22ae4:	008000b4 	movhi	r2,2
   22ae8:	1092cd04 	addi	r2,r2,19252
   22aec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22af0:	e0bfff17 	ldw	r2,-4(fp)
   22af4:	18800226 	beq	r3,r2,22b00 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   22af8:	00bffcc4 	movi	r2,-13
   22afc:	00000806 	br	22b20 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22b00:	e0bffe17 	ldw	r2,-8(fp)
   22b04:	10800044 	addi	r2,r2,1
   22b08:	e0bffe15 	stw	r2,-8(fp)
   22b0c:	d0a00417 	ldw	r2,-32752(gp)
   22b10:	1007883a 	mov	r3,r2
   22b14:	e0bffe17 	ldw	r2,-8(fp)
   22b18:	18bfdf2e 	bgeu	r3,r2,22a98 <__alt_mem_epcs_flash_controller_0+0xfffe1a98>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   22b1c:	0005883a 	mov	r2,zero
}
   22b20:	e037883a 	mov	sp,fp
   22b24:	df000017 	ldw	fp,0(sp)
   22b28:	dec00104 	addi	sp,sp,4
   22b2c:	f800283a 	ret

00022b30 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   22b30:	defff604 	addi	sp,sp,-40
   22b34:	dfc00915 	stw	ra,36(sp)
   22b38:	df000815 	stw	fp,32(sp)
   22b3c:	df000804 	addi	fp,sp,32
   22b40:	e13ffd15 	stw	r4,-12(fp)
   22b44:	e17ffe15 	stw	r5,-8(fp)
   22b48:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   22b4c:	00bfffc4 	movi	r2,-1
   22b50:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   22b54:	00bffb44 	movi	r2,-19
   22b58:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   22b5c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   22b60:	d1600204 	addi	r5,gp,-32760
   22b64:	e13ffd17 	ldw	r4,-12(fp)
   22b68:	00230ac0 	call	230ac <alt_find_dev>
   22b6c:	e0bff815 	stw	r2,-32(fp)
   22b70:	e0bff817 	ldw	r2,-32(fp)
   22b74:	1000051e 	bne	r2,zero,22b8c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   22b78:	e13ffd17 	ldw	r4,-12(fp)
   22b7c:	002313c0 	call	2313c <alt_find_file>
   22b80:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   22b84:	00800044 	movi	r2,1
   22b88:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   22b8c:	e0bff817 	ldw	r2,-32(fp)
   22b90:	10002926 	beq	r2,zero,22c38 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   22b94:	e13ff817 	ldw	r4,-32(fp)
   22b98:	00232440 	call	23244 <alt_get_fd>
   22b9c:	e0bff915 	stw	r2,-28(fp)
   22ba0:	e0bff917 	ldw	r2,-28(fp)
   22ba4:	1000030e 	bge	r2,zero,22bb4 <open+0x84>
    {
      status = index;
   22ba8:	e0bff917 	ldw	r2,-28(fp)
   22bac:	e0bffa15 	stw	r2,-24(fp)
   22bb0:	00002306 	br	22c40 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   22bb4:	e0bff917 	ldw	r2,-28(fp)
   22bb8:	10c00324 	muli	r3,r2,12
   22bbc:	008000b4 	movhi	r2,2
   22bc0:	1092cd04 	addi	r2,r2,19252
   22bc4:	1885883a 	add	r2,r3,r2
   22bc8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   22bcc:	e0fffe17 	ldw	r3,-8(fp)
   22bd0:	00900034 	movhi	r2,16384
   22bd4:	10bfffc4 	addi	r2,r2,-1
   22bd8:	1886703a 	and	r3,r3,r2
   22bdc:	e0bffc17 	ldw	r2,-16(fp)
   22be0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   22be4:	e0bffb17 	ldw	r2,-20(fp)
   22be8:	1000051e 	bne	r2,zero,22c00 <open+0xd0>
   22bec:	e13ffc17 	ldw	r4,-16(fp)
   22bf0:	0022a6c0 	call	22a6c <alt_file_locked>
   22bf4:	e0bffa15 	stw	r2,-24(fp)
   22bf8:	e0bffa17 	ldw	r2,-24(fp)
   22bfc:	10001016 	blt	r2,zero,22c40 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   22c00:	e0bff817 	ldw	r2,-32(fp)
   22c04:	10800317 	ldw	r2,12(r2)
   22c08:	10000826 	beq	r2,zero,22c2c <open+0xfc>
   22c0c:	e0bff817 	ldw	r2,-32(fp)
   22c10:	10800317 	ldw	r2,12(r2)
   22c14:	e1ffff17 	ldw	r7,-4(fp)
   22c18:	e1bffe17 	ldw	r6,-8(fp)
   22c1c:	e17ffd17 	ldw	r5,-12(fp)
   22c20:	e13ffc17 	ldw	r4,-16(fp)
   22c24:	103ee83a 	callr	r2
   22c28:	00000106 	br	22c30 <open+0x100>
   22c2c:	0005883a 	mov	r2,zero
   22c30:	e0bffa15 	stw	r2,-24(fp)
   22c34:	00000206 	br	22c40 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   22c38:	00bffb44 	movi	r2,-19
   22c3c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   22c40:	e0bffa17 	ldw	r2,-24(fp)
   22c44:	1000090e 	bge	r2,zero,22c6c <open+0x13c>
  {
    alt_release_fd (index);  
   22c48:	e13ff917 	ldw	r4,-28(fp)
   22c4c:	0022c840 	call	22c84 <alt_release_fd>
    ALT_ERRNO = -status;
   22c50:	0022a300 	call	22a30 <alt_get_errno>
   22c54:	1007883a 	mov	r3,r2
   22c58:	e0bffa17 	ldw	r2,-24(fp)
   22c5c:	0085c83a 	sub	r2,zero,r2
   22c60:	18800015 	stw	r2,0(r3)
    return -1;
   22c64:	00bfffc4 	movi	r2,-1
   22c68:	00000106 	br	22c70 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   22c6c:	e0bff917 	ldw	r2,-28(fp)
}
   22c70:	e037883a 	mov	sp,fp
   22c74:	dfc00117 	ldw	ra,4(sp)
   22c78:	df000017 	ldw	fp,0(sp)
   22c7c:	dec00204 	addi	sp,sp,8
   22c80:	f800283a 	ret

00022c84 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   22c84:	defffe04 	addi	sp,sp,-8
   22c88:	df000115 	stw	fp,4(sp)
   22c8c:	df000104 	addi	fp,sp,4
   22c90:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   22c94:	e0bfff17 	ldw	r2,-4(fp)
   22c98:	108000d0 	cmplti	r2,r2,3
   22c9c:	10000d1e 	bne	r2,zero,22cd4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   22ca0:	008000b4 	movhi	r2,2
   22ca4:	1092cd04 	addi	r2,r2,19252
   22ca8:	e0ffff17 	ldw	r3,-4(fp)
   22cac:	18c00324 	muli	r3,r3,12
   22cb0:	10c5883a 	add	r2,r2,r3
   22cb4:	10800204 	addi	r2,r2,8
   22cb8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   22cbc:	008000b4 	movhi	r2,2
   22cc0:	1092cd04 	addi	r2,r2,19252
   22cc4:	e0ffff17 	ldw	r3,-4(fp)
   22cc8:	18c00324 	muli	r3,r3,12
   22ccc:	10c5883a 	add	r2,r2,r3
   22cd0:	10000015 	stw	zero,0(r2)
  }
}
   22cd4:	0001883a 	nop
   22cd8:	e037883a 	mov	sp,fp
   22cdc:	df000017 	ldw	fp,0(sp)
   22ce0:	dec00104 	addi	sp,sp,4
   22ce4:	f800283a 	ret

00022ce8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   22ce8:	defffa04 	addi	sp,sp,-24
   22cec:	df000515 	stw	fp,20(sp)
   22cf0:	df000504 	addi	fp,sp,20
   22cf4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22cf8:	0005303a 	rdctl	r2,status
   22cfc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22d00:	e0fffc17 	ldw	r3,-16(fp)
   22d04:	00bfff84 	movi	r2,-2
   22d08:	1884703a 	and	r2,r3,r2
   22d0c:	1001703a 	wrctl	status,r2
  
  return context;
   22d10:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   22d14:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   22d18:	e0bfff17 	ldw	r2,-4(fp)
   22d1c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   22d20:	e0bffd17 	ldw	r2,-12(fp)
   22d24:	10800017 	ldw	r2,0(r2)
   22d28:	e0fffd17 	ldw	r3,-12(fp)
   22d2c:	18c00117 	ldw	r3,4(r3)
   22d30:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   22d34:	e0bffd17 	ldw	r2,-12(fp)
   22d38:	10800117 	ldw	r2,4(r2)
   22d3c:	e0fffd17 	ldw	r3,-12(fp)
   22d40:	18c00017 	ldw	r3,0(r3)
   22d44:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   22d48:	e0bffd17 	ldw	r2,-12(fp)
   22d4c:	e0fffd17 	ldw	r3,-12(fp)
   22d50:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   22d54:	e0bffd17 	ldw	r2,-12(fp)
   22d58:	e0fffd17 	ldw	r3,-12(fp)
   22d5c:	10c00015 	stw	r3,0(r2)
   22d60:	e0bffb17 	ldw	r2,-20(fp)
   22d64:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22d68:	e0bffe17 	ldw	r2,-8(fp)
   22d6c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   22d70:	0001883a 	nop
   22d74:	e037883a 	mov	sp,fp
   22d78:	df000017 	ldw	fp,0(sp)
   22d7c:	dec00104 	addi	sp,sp,4
   22d80:	f800283a 	ret

00022d84 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   22d84:	defffb04 	addi	sp,sp,-20
   22d88:	dfc00415 	stw	ra,16(sp)
   22d8c:	df000315 	stw	fp,12(sp)
   22d90:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   22d94:	d0a00917 	ldw	r2,-32732(gp)
   22d98:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   22d9c:	d0a5dd17 	ldw	r2,-26764(gp)
   22da0:	10800044 	addi	r2,r2,1
   22da4:	d0a5dd15 	stw	r2,-26764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   22da8:	00002e06 	br	22e64 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   22dac:	e0bffd17 	ldw	r2,-12(fp)
   22db0:	10800017 	ldw	r2,0(r2)
   22db4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   22db8:	e0bffd17 	ldw	r2,-12(fp)
   22dbc:	10800403 	ldbu	r2,16(r2)
   22dc0:	10803fcc 	andi	r2,r2,255
   22dc4:	10000426 	beq	r2,zero,22dd8 <alt_tick+0x54>
   22dc8:	d0a5dd17 	ldw	r2,-26764(gp)
   22dcc:	1000021e 	bne	r2,zero,22dd8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   22dd0:	e0bffd17 	ldw	r2,-12(fp)
   22dd4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   22dd8:	e0bffd17 	ldw	r2,-12(fp)
   22ddc:	10800217 	ldw	r2,8(r2)
   22de0:	d0e5dd17 	ldw	r3,-26764(gp)
   22de4:	18801d36 	bltu	r3,r2,22e5c <alt_tick+0xd8>
   22de8:	e0bffd17 	ldw	r2,-12(fp)
   22dec:	10800403 	ldbu	r2,16(r2)
   22df0:	10803fcc 	andi	r2,r2,255
   22df4:	1000191e 	bne	r2,zero,22e5c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   22df8:	e0bffd17 	ldw	r2,-12(fp)
   22dfc:	10800317 	ldw	r2,12(r2)
   22e00:	e0fffd17 	ldw	r3,-12(fp)
   22e04:	18c00517 	ldw	r3,20(r3)
   22e08:	1809883a 	mov	r4,r3
   22e0c:	103ee83a 	callr	r2
   22e10:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   22e14:	e0bfff17 	ldw	r2,-4(fp)
   22e18:	1000031e 	bne	r2,zero,22e28 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   22e1c:	e13ffd17 	ldw	r4,-12(fp)
   22e20:	0022ce80 	call	22ce8 <alt_alarm_stop>
   22e24:	00000d06 	br	22e5c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   22e28:	e0bffd17 	ldw	r2,-12(fp)
   22e2c:	10c00217 	ldw	r3,8(r2)
   22e30:	e0bfff17 	ldw	r2,-4(fp)
   22e34:	1887883a 	add	r3,r3,r2
   22e38:	e0bffd17 	ldw	r2,-12(fp)
   22e3c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   22e40:	e0bffd17 	ldw	r2,-12(fp)
   22e44:	10c00217 	ldw	r3,8(r2)
   22e48:	d0a5dd17 	ldw	r2,-26764(gp)
   22e4c:	1880032e 	bgeu	r3,r2,22e5c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   22e50:	e0bffd17 	ldw	r2,-12(fp)
   22e54:	00c00044 	movi	r3,1
   22e58:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   22e5c:	e0bffe17 	ldw	r2,-8(fp)
   22e60:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   22e64:	e0fffd17 	ldw	r3,-12(fp)
   22e68:	d0a00904 	addi	r2,gp,-32732
   22e6c:	18bfcf1e 	bne	r3,r2,22dac <__alt_mem_epcs_flash_controller_0+0xfffe1dac>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   22e70:	0001883a 	nop
}
   22e74:	0001883a 	nop
   22e78:	e037883a 	mov	sp,fp
   22e7c:	dfc00117 	ldw	ra,4(sp)
   22e80:	df000017 	ldw	fp,0(sp)
   22e84:	dec00204 	addi	sp,sp,8
   22e88:	f800283a 	ret

00022e8c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   22e8c:	deffff04 	addi	sp,sp,-4
   22e90:	df000015 	stw	fp,0(sp)
   22e94:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   22e98:	000170fa 	wrctl	ienable,zero
}
   22e9c:	0001883a 	nop
   22ea0:	e037883a 	mov	sp,fp
   22ea4:	df000017 	ldw	fp,0(sp)
   22ea8:	dec00104 	addi	sp,sp,4
   22eac:	f800283a 	ret

00022eb0 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   22eb0:	defff404 	addi	sp,sp,-48
   22eb4:	df000b15 	stw	fp,44(sp)
   22eb8:	df000b04 	addi	fp,sp,44
   22ebc:	e13ffc15 	stw	r4,-16(fp)
   22ec0:	e17ffd15 	stw	r5,-12(fp)
   22ec4:	e1bffe15 	stw	r6,-8(fp)
   22ec8:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   22ecc:	e0ffff17 	ldw	r3,-4(fp)
   22ed0:	e0bffe17 	ldw	r2,-8(fp)
   22ed4:	1885883a 	add	r2,r3,r2
   22ed8:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   22edc:	e0c00217 	ldw	r3,8(fp)
   22ee0:	e0800117 	ldw	r2,4(fp)
   22ee4:	1885883a 	add	r2,r3,r2
   22ee8:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   22eec:	e0800117 	ldw	r2,4(fp)
   22ef0:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   22ef4:	e0bffe17 	ldw	r2,-8(fp)
   22ef8:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   22efc:	00800044 	movi	r2,1
   22f00:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   22f04:	e0bffc17 	ldw	r2,-16(fp)
   22f08:	10800504 	addi	r2,r2,20
   22f0c:	1009883a 	mov	r4,r2
   22f10:	00c00044 	movi	r3,1
   22f14:	e0bffd17 	ldw	r2,-12(fp)
   22f18:	1884983a 	sll	r2,r3,r2
   22f1c:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   22f20:	e0800317 	ldw	r2,12(fp)
   22f24:	1080008c 	andi	r2,r2,2
   22f28:	1000051e 	bne	r2,zero,22f40 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   22f2c:	e0bffc17 	ldw	r2,-16(fp)
   22f30:	10800304 	addi	r2,r2,12
   22f34:	1007883a 	mov	r3,r2
   22f38:	00810004 	movi	r2,1024
   22f3c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   22f40:	e0bffc17 	ldw	r2,-16(fp)
   22f44:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   22f48:	e0bffc17 	ldw	r2,-16(fp)
   22f4c:	10800204 	addi	r2,r2,8
   22f50:	10800037 	ldwio	r2,0(r2)
   22f54:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   22f58:	e0bffa17 	ldw	r2,-24(fp)
   22f5c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   22f60:	10000226 	beq	r2,zero,22f6c <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   22f64:	e0bff717 	ldw	r2,-36(fp)
   22f68:	1000031e 	bne	r2,zero,22f78 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   22f6c:	e0bffa17 	ldw	r2,-24(fp)
   22f70:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   22f74:	103ff426 	beq	r2,zero,22f48 <__alt_mem_epcs_flash_controller_0+0xfffe1f48>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   22f78:	e0bffa17 	ldw	r2,-24(fp)
   22f7c:	1080100c 	andi	r2,r2,64
   22f80:	10001e26 	beq	r2,zero,22ffc <alt_avalon_spi_command+0x14c>
   22f84:	e0bff717 	ldw	r2,-36(fp)
   22f88:	00801c0e 	bge	zero,r2,22ffc <alt_avalon_spi_command+0x14c>
    {
      credits--;
   22f8c:	e0bff717 	ldw	r2,-36(fp)
   22f90:	10bfffc4 	addi	r2,r2,-1
   22f94:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   22f98:	e0ffff17 	ldw	r3,-4(fp)
   22f9c:	e0bff817 	ldw	r2,-32(fp)
   22fa0:	18800a2e 	bgeu	r3,r2,22fcc <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   22fa4:	e0bffc17 	ldw	r2,-16(fp)
   22fa8:	10800104 	addi	r2,r2,4
   22fac:	1009883a 	mov	r4,r2
   22fb0:	e0bfff17 	ldw	r2,-4(fp)
   22fb4:	10c00044 	addi	r3,r2,1
   22fb8:	e0ffff15 	stw	r3,-4(fp)
   22fbc:	10800003 	ldbu	r2,0(r2)
   22fc0:	10803fcc 	andi	r2,r2,255
   22fc4:	20800035 	stwio	r2,0(r4)
   22fc8:	00000c06 	br	22ffc <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   22fcc:	e0bff517 	ldw	r2,-44(fp)
   22fd0:	10000826 	beq	r2,zero,22ff4 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   22fd4:	e0bff517 	ldw	r2,-44(fp)
   22fd8:	10bfffc4 	addi	r2,r2,-1
   22fdc:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   22fe0:	e0bffc17 	ldw	r2,-16(fp)
   22fe4:	10800104 	addi	r2,r2,4
   22fe8:	0007883a 	mov	r3,zero
   22fec:	10c00035 	stwio	r3,0(r2)
   22ff0:	00000206 	br	22ffc <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   22ff4:	00bf0004 	movi	r2,-1024
   22ff8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   22ffc:	e0bffa17 	ldw	r2,-24(fp)
   23000:	1080200c 	andi	r2,r2,128
   23004:	103fd026 	beq	r2,zero,22f48 <__alt_mem_epcs_flash_controller_0+0xfffe1f48>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   23008:	e0bffc17 	ldw	r2,-16(fp)
   2300c:	10800037 	ldwio	r2,0(r2)
   23010:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   23014:	e0bff617 	ldw	r2,-40(fp)
   23018:	10000426 	beq	r2,zero,2302c <alt_avalon_spi_command+0x17c>
        read_ignore--;
   2301c:	e0bff617 	ldw	r2,-40(fp)
   23020:	10bfffc4 	addi	r2,r2,-1
   23024:	e0bff615 	stw	r2,-40(fp)
   23028:	00000506 	br	23040 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
   2302c:	e0800217 	ldw	r2,8(fp)
   23030:	10c00044 	addi	r3,r2,1
   23034:	e0c00215 	stw	r3,8(fp)
   23038:	e0fffb17 	ldw	r3,-20(fp)
   2303c:	10c00005 	stb	r3,0(r2)
      credits++;
   23040:	e0bff717 	ldw	r2,-36(fp)
   23044:	10800044 	addi	r2,r2,1
   23048:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   2304c:	e0bff617 	ldw	r2,-40(fp)
   23050:	103fbd1e 	bne	r2,zero,22f48 <__alt_mem_epcs_flash_controller_0+0xfffe1f48>
   23054:	e0c00217 	ldw	r3,8(fp)
   23058:	e0bff917 	ldw	r2,-28(fp)
   2305c:	18bfba1e 	bne	r3,r2,22f48 <__alt_mem_epcs_flash_controller_0+0xfffe1f48>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   23060:	e0bffc17 	ldw	r2,-16(fp)
   23064:	10800204 	addi	r2,r2,8
   23068:	10800037 	ldwio	r2,0(r2)
   2306c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   23070:	e0bffa17 	ldw	r2,-24(fp)
   23074:	1080080c 	andi	r2,r2,32
   23078:	103ff926 	beq	r2,zero,23060 <__alt_mem_epcs_flash_controller_0+0xfffe2060>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   2307c:	e0800317 	ldw	r2,12(fp)
   23080:	1080004c 	andi	r2,r2,1
   23084:	1000041e 	bne	r2,zero,23098 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   23088:	e0bffc17 	ldw	r2,-16(fp)
   2308c:	10800304 	addi	r2,r2,12
   23090:	0007883a 	mov	r3,zero
   23094:	10c00035 	stwio	r3,0(r2)

  return read_length;
   23098:	e0800117 	ldw	r2,4(fp)
}
   2309c:	e037883a 	mov	sp,fp
   230a0:	df000017 	ldw	fp,0(sp)
   230a4:	dec00104 	addi	sp,sp,4
   230a8:	f800283a 	ret

000230ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   230ac:	defffa04 	addi	sp,sp,-24
   230b0:	dfc00515 	stw	ra,20(sp)
   230b4:	df000415 	stw	fp,16(sp)
   230b8:	df000404 	addi	fp,sp,16
   230bc:	e13ffe15 	stw	r4,-8(fp)
   230c0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   230c4:	e0bfff17 	ldw	r2,-4(fp)
   230c8:	10800017 	ldw	r2,0(r2)
   230cc:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   230d0:	e13ffe17 	ldw	r4,-8(fp)
   230d4:	00236240 	call	23624 <strlen>
   230d8:	10800044 	addi	r2,r2,1
   230dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   230e0:	00000d06 	br	23118 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   230e4:	e0bffc17 	ldw	r2,-16(fp)
   230e8:	10800217 	ldw	r2,8(r2)
   230ec:	e0fffd17 	ldw	r3,-12(fp)
   230f0:	180d883a 	mov	r6,r3
   230f4:	e17ffe17 	ldw	r5,-8(fp)
   230f8:	1009883a 	mov	r4,r2
   230fc:	00234600 	call	23460 <memcmp>
   23100:	1000021e 	bne	r2,zero,2310c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   23104:	e0bffc17 	ldw	r2,-16(fp)
   23108:	00000706 	br	23128 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2310c:	e0bffc17 	ldw	r2,-16(fp)
   23110:	10800017 	ldw	r2,0(r2)
   23114:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   23118:	e0fffc17 	ldw	r3,-16(fp)
   2311c:	e0bfff17 	ldw	r2,-4(fp)
   23120:	18bff01e 	bne	r3,r2,230e4 <__alt_mem_epcs_flash_controller_0+0xfffe20e4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   23124:	0005883a 	mov	r2,zero
}
   23128:	e037883a 	mov	sp,fp
   2312c:	dfc00117 	ldw	ra,4(sp)
   23130:	df000017 	ldw	fp,0(sp)
   23134:	dec00204 	addi	sp,sp,8
   23138:	f800283a 	ret

0002313c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2313c:	defffb04 	addi	sp,sp,-20
   23140:	dfc00415 	stw	ra,16(sp)
   23144:	df000315 	stw	fp,12(sp)
   23148:	df000304 	addi	fp,sp,12
   2314c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   23150:	d0a00017 	ldw	r2,-32768(gp)
   23154:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   23158:	00003106 	br	23220 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   2315c:	e0bffd17 	ldw	r2,-12(fp)
   23160:	10800217 	ldw	r2,8(r2)
   23164:	1009883a 	mov	r4,r2
   23168:	00236240 	call	23624 <strlen>
   2316c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   23170:	e0bffd17 	ldw	r2,-12(fp)
   23174:	10c00217 	ldw	r3,8(r2)
   23178:	e0bffe17 	ldw	r2,-8(fp)
   2317c:	10bfffc4 	addi	r2,r2,-1
   23180:	1885883a 	add	r2,r3,r2
   23184:	10800003 	ldbu	r2,0(r2)
   23188:	10803fcc 	andi	r2,r2,255
   2318c:	1080201c 	xori	r2,r2,128
   23190:	10bfe004 	addi	r2,r2,-128
   23194:	10800bd8 	cmpnei	r2,r2,47
   23198:	1000031e 	bne	r2,zero,231a8 <alt_find_file+0x6c>
    {
      len -= 1;
   2319c:	e0bffe17 	ldw	r2,-8(fp)
   231a0:	10bfffc4 	addi	r2,r2,-1
   231a4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   231a8:	e0bffe17 	ldw	r2,-8(fp)
   231ac:	e0ffff17 	ldw	r3,-4(fp)
   231b0:	1885883a 	add	r2,r3,r2
   231b4:	10800003 	ldbu	r2,0(r2)
   231b8:	10803fcc 	andi	r2,r2,255
   231bc:	1080201c 	xori	r2,r2,128
   231c0:	10bfe004 	addi	r2,r2,-128
   231c4:	10800be0 	cmpeqi	r2,r2,47
   231c8:	1000081e 	bne	r2,zero,231ec <alt_find_file+0xb0>
   231cc:	e0bffe17 	ldw	r2,-8(fp)
   231d0:	e0ffff17 	ldw	r3,-4(fp)
   231d4:	1885883a 	add	r2,r3,r2
   231d8:	10800003 	ldbu	r2,0(r2)
   231dc:	10803fcc 	andi	r2,r2,255
   231e0:	1080201c 	xori	r2,r2,128
   231e4:	10bfe004 	addi	r2,r2,-128
   231e8:	10000a1e 	bne	r2,zero,23214 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   231ec:	e0bffd17 	ldw	r2,-12(fp)
   231f0:	10800217 	ldw	r2,8(r2)
   231f4:	e0fffe17 	ldw	r3,-8(fp)
   231f8:	180d883a 	mov	r6,r3
   231fc:	e17fff17 	ldw	r5,-4(fp)
   23200:	1009883a 	mov	r4,r2
   23204:	00234600 	call	23460 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   23208:	1000021e 	bne	r2,zero,23214 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2320c:	e0bffd17 	ldw	r2,-12(fp)
   23210:	00000706 	br	23230 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   23214:	e0bffd17 	ldw	r2,-12(fp)
   23218:	10800017 	ldw	r2,0(r2)
   2321c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   23220:	e0fffd17 	ldw	r3,-12(fp)
   23224:	d0a00004 	addi	r2,gp,-32768
   23228:	18bfcc1e 	bne	r3,r2,2315c <__alt_mem_epcs_flash_controller_0+0xfffe215c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2322c:	0005883a 	mov	r2,zero
}
   23230:	e037883a 	mov	sp,fp
   23234:	dfc00117 	ldw	ra,4(sp)
   23238:	df000017 	ldw	fp,0(sp)
   2323c:	dec00204 	addi	sp,sp,8
   23240:	f800283a 	ret

00023244 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   23244:	defffc04 	addi	sp,sp,-16
   23248:	df000315 	stw	fp,12(sp)
   2324c:	df000304 	addi	fp,sp,12
   23250:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   23254:	00bffa04 	movi	r2,-24
   23258:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2325c:	e03ffd15 	stw	zero,-12(fp)
   23260:	00001906 	br	232c8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   23264:	008000b4 	movhi	r2,2
   23268:	1092cd04 	addi	r2,r2,19252
   2326c:	e0fffd17 	ldw	r3,-12(fp)
   23270:	18c00324 	muli	r3,r3,12
   23274:	10c5883a 	add	r2,r2,r3
   23278:	10800017 	ldw	r2,0(r2)
   2327c:	10000f1e 	bne	r2,zero,232bc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   23280:	008000b4 	movhi	r2,2
   23284:	1092cd04 	addi	r2,r2,19252
   23288:	e0fffd17 	ldw	r3,-12(fp)
   2328c:	18c00324 	muli	r3,r3,12
   23290:	10c5883a 	add	r2,r2,r3
   23294:	e0ffff17 	ldw	r3,-4(fp)
   23298:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2329c:	d0e00417 	ldw	r3,-32752(gp)
   232a0:	e0bffd17 	ldw	r2,-12(fp)
   232a4:	1880020e 	bge	r3,r2,232b0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   232a8:	e0bffd17 	ldw	r2,-12(fp)
   232ac:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   232b0:	e0bffd17 	ldw	r2,-12(fp)
   232b4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   232b8:	00000606 	br	232d4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   232bc:	e0bffd17 	ldw	r2,-12(fp)
   232c0:	10800044 	addi	r2,r2,1
   232c4:	e0bffd15 	stw	r2,-12(fp)
   232c8:	e0bffd17 	ldw	r2,-12(fp)
   232cc:	10800810 	cmplti	r2,r2,32
   232d0:	103fe41e 	bne	r2,zero,23264 <__alt_mem_epcs_flash_controller_0+0xfffe2264>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   232d4:	e0bffe17 	ldw	r2,-8(fp)
}
   232d8:	e037883a 	mov	sp,fp
   232dc:	df000017 	ldw	fp,0(sp)
   232e0:	dec00104 	addi	sp,sp,4
   232e4:	f800283a 	ret

000232e8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   232e8:	defffb04 	addi	sp,sp,-20
   232ec:	df000415 	stw	fp,16(sp)
   232f0:	df000404 	addi	fp,sp,16
   232f4:	e13ffe15 	stw	r4,-8(fp)
   232f8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   232fc:	e0bfff17 	ldw	r2,-4(fp)
   23300:	10840070 	cmpltui	r2,r2,4097
   23304:	1000021e 	bne	r2,zero,23310 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   23308:	00840004 	movi	r2,4096
   2330c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   23310:	e0fffe17 	ldw	r3,-8(fp)
   23314:	e0bfff17 	ldw	r2,-4(fp)
   23318:	1885883a 	add	r2,r3,r2
   2331c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   23320:	e0bffe17 	ldw	r2,-8(fp)
   23324:	e0bffc15 	stw	r2,-16(fp)
   23328:	00000506 	br	23340 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   2332c:	e0bffc17 	ldw	r2,-16(fp)
   23330:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   23334:	e0bffc17 	ldw	r2,-16(fp)
   23338:	10800804 	addi	r2,r2,32
   2333c:	e0bffc15 	stw	r2,-16(fp)
   23340:	e0fffc17 	ldw	r3,-16(fp)
   23344:	e0bffd17 	ldw	r2,-12(fp)
   23348:	18bff836 	bltu	r3,r2,2332c <__alt_mem_epcs_flash_controller_0+0xfffe232c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   2334c:	e0bffe17 	ldw	r2,-8(fp)
   23350:	108007cc 	andi	r2,r2,31
   23354:	10000226 	beq	r2,zero,23360 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   23358:	e0bffc17 	ldw	r2,-16(fp)
   2335c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   23360:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   23364:	0001883a 	nop
   23368:	e037883a 	mov	sp,fp
   2336c:	df000017 	ldw	fp,0(sp)
   23370:	dec00104 	addi	sp,sp,4
   23374:	f800283a 	ret

00023378 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   23378:	defffe04 	addi	sp,sp,-8
   2337c:	df000115 	stw	fp,4(sp)
   23380:	df000104 	addi	fp,sp,4
   23384:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   23388:	e0bfff17 	ldw	r2,-4(fp)
   2338c:	10bffe84 	addi	r2,r2,-6
   23390:	10c00428 	cmpgeui	r3,r2,16
   23394:	18001a1e 	bne	r3,zero,23400 <alt_exception_cause_generated_bad_addr+0x88>
   23398:	100690ba 	slli	r3,r2,2
   2339c:	008000b4 	movhi	r2,2
   233a0:	108cec04 	addi	r2,r2,13232
   233a4:	1885883a 	add	r2,r3,r2
   233a8:	10800017 	ldw	r2,0(r2)
   233ac:	1000683a 	jmp	r2
   233b0:	000233f0 	cmpltui	zero,zero,2255
   233b4:	000233f0 	cmpltui	zero,zero,2255
   233b8:	00023400 	call	2340 <__reset-0x1dcc0>
   233bc:	00023400 	call	2340 <__reset-0x1dcc0>
   233c0:	00023400 	call	2340 <__reset-0x1dcc0>
   233c4:	000233f0 	cmpltui	zero,zero,2255
   233c8:	000233f8 	rdprs	zero,zero,2255
   233cc:	00023400 	call	2340 <__reset-0x1dcc0>
   233d0:	000233f0 	cmpltui	zero,zero,2255
   233d4:	000233f0 	cmpltui	zero,zero,2255
   233d8:	00023400 	call	2340 <__reset-0x1dcc0>
   233dc:	000233f0 	cmpltui	zero,zero,2255
   233e0:	000233f8 	rdprs	zero,zero,2255
   233e4:	00023400 	call	2340 <__reset-0x1dcc0>
   233e8:	00023400 	call	2340 <__reset-0x1dcc0>
   233ec:	000233f0 	cmpltui	zero,zero,2255
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   233f0:	00800044 	movi	r2,1
   233f4:	00000306 	br	23404 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   233f8:	0005883a 	mov	r2,zero
   233fc:	00000106 	br	23404 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   23400:	0005883a 	mov	r2,zero
  }
}
   23404:	e037883a 	mov	sp,fp
   23408:	df000017 	ldw	fp,0(sp)
   2340c:	dec00104 	addi	sp,sp,4
   23410:	f800283a 	ret

00023414 <atexit>:
   23414:	200b883a 	mov	r5,r4
   23418:	000f883a 	mov	r7,zero
   2341c:	000d883a 	mov	r6,zero
   23420:	0009883a 	mov	r4,zero
   23424:	00236bc1 	jmpi	236bc <__register_exitproc>

00023428 <exit>:
   23428:	defffe04 	addi	sp,sp,-8
   2342c:	000b883a 	mov	r5,zero
   23430:	dc000015 	stw	r16,0(sp)
   23434:	dfc00115 	stw	ra,4(sp)
   23438:	2021883a 	mov	r16,r4
   2343c:	00237d40 	call	237d4 <__call_exitprocs>
   23440:	008000b4 	movhi	r2,2
   23444:	10944104 	addi	r2,r2,20740
   23448:	11000017 	ldw	r4,0(r2)
   2344c:	20800f17 	ldw	r2,60(r4)
   23450:	10000126 	beq	r2,zero,23458 <exit+0x30>
   23454:	103ee83a 	callr	r2
   23458:	8009883a 	mov	r4,r16
   2345c:	00239540 	call	23954 <_exit>

00023460 <memcmp>:
   23460:	01c000c4 	movi	r7,3
   23464:	3980192e 	bgeu	r7,r6,234cc <memcmp+0x6c>
   23468:	2144b03a 	or	r2,r4,r5
   2346c:	11c4703a 	and	r2,r2,r7
   23470:	10000f26 	beq	r2,zero,234b0 <memcmp+0x50>
   23474:	20800003 	ldbu	r2,0(r4)
   23478:	28c00003 	ldbu	r3,0(r5)
   2347c:	10c0151e 	bne	r2,r3,234d4 <memcmp+0x74>
   23480:	31bfff84 	addi	r6,r6,-2
   23484:	01ffffc4 	movi	r7,-1
   23488:	00000406 	br	2349c <memcmp+0x3c>
   2348c:	20800003 	ldbu	r2,0(r4)
   23490:	28c00003 	ldbu	r3,0(r5)
   23494:	31bfffc4 	addi	r6,r6,-1
   23498:	10c00e1e 	bne	r2,r3,234d4 <memcmp+0x74>
   2349c:	21000044 	addi	r4,r4,1
   234a0:	29400044 	addi	r5,r5,1
   234a4:	31fff91e 	bne	r6,r7,2348c <__alt_mem_epcs_flash_controller_0+0xfffe248c>
   234a8:	0005883a 	mov	r2,zero
   234ac:	f800283a 	ret
   234b0:	20c00017 	ldw	r3,0(r4)
   234b4:	28800017 	ldw	r2,0(r5)
   234b8:	18bfee1e 	bne	r3,r2,23474 <__alt_mem_epcs_flash_controller_0+0xfffe2474>
   234bc:	31bfff04 	addi	r6,r6,-4
   234c0:	21000104 	addi	r4,r4,4
   234c4:	29400104 	addi	r5,r5,4
   234c8:	39bff936 	bltu	r7,r6,234b0 <__alt_mem_epcs_flash_controller_0+0xfffe24b0>
   234cc:	303fe91e 	bne	r6,zero,23474 <__alt_mem_epcs_flash_controller_0+0xfffe2474>
   234d0:	003ff506 	br	234a8 <__alt_mem_epcs_flash_controller_0+0xfffe24a8>
   234d4:	10c5c83a 	sub	r2,r2,r3
   234d8:	f800283a 	ret

000234dc <memcpy>:
   234dc:	defffd04 	addi	sp,sp,-12
   234e0:	dfc00215 	stw	ra,8(sp)
   234e4:	dc400115 	stw	r17,4(sp)
   234e8:	dc000015 	stw	r16,0(sp)
   234ec:	00c003c4 	movi	r3,15
   234f0:	2005883a 	mov	r2,r4
   234f4:	1980452e 	bgeu	r3,r6,2360c <memcpy+0x130>
   234f8:	2906b03a 	or	r3,r5,r4
   234fc:	18c000cc 	andi	r3,r3,3
   23500:	1800441e 	bne	r3,zero,23614 <memcpy+0x138>
   23504:	347ffc04 	addi	r17,r6,-16
   23508:	8822d13a 	srli	r17,r17,4
   2350c:	28c00104 	addi	r3,r5,4
   23510:	23400104 	addi	r13,r4,4
   23514:	8820913a 	slli	r16,r17,4
   23518:	2b000204 	addi	r12,r5,8
   2351c:	22c00204 	addi	r11,r4,8
   23520:	84000504 	addi	r16,r16,20
   23524:	2a800304 	addi	r10,r5,12
   23528:	22400304 	addi	r9,r4,12
   2352c:	2c21883a 	add	r16,r5,r16
   23530:	2811883a 	mov	r8,r5
   23534:	200f883a 	mov	r7,r4
   23538:	41000017 	ldw	r4,0(r8)
   2353c:	1fc00017 	ldw	ra,0(r3)
   23540:	63c00017 	ldw	r15,0(r12)
   23544:	39000015 	stw	r4,0(r7)
   23548:	53800017 	ldw	r14,0(r10)
   2354c:	6fc00015 	stw	ra,0(r13)
   23550:	5bc00015 	stw	r15,0(r11)
   23554:	4b800015 	stw	r14,0(r9)
   23558:	18c00404 	addi	r3,r3,16
   2355c:	39c00404 	addi	r7,r7,16
   23560:	42000404 	addi	r8,r8,16
   23564:	6b400404 	addi	r13,r13,16
   23568:	63000404 	addi	r12,r12,16
   2356c:	5ac00404 	addi	r11,r11,16
   23570:	52800404 	addi	r10,r10,16
   23574:	4a400404 	addi	r9,r9,16
   23578:	1c3fef1e 	bne	r3,r16,23538 <__alt_mem_epcs_flash_controller_0+0xfffe2538>
   2357c:	89c00044 	addi	r7,r17,1
   23580:	380e913a 	slli	r7,r7,4
   23584:	310003cc 	andi	r4,r6,15
   23588:	02c000c4 	movi	r11,3
   2358c:	11c7883a 	add	r3,r2,r7
   23590:	29cb883a 	add	r5,r5,r7
   23594:	5900212e 	bgeu	r11,r4,2361c <memcpy+0x140>
   23598:	1813883a 	mov	r9,r3
   2359c:	2811883a 	mov	r8,r5
   235a0:	200f883a 	mov	r7,r4
   235a4:	42800017 	ldw	r10,0(r8)
   235a8:	4a400104 	addi	r9,r9,4
   235ac:	39ffff04 	addi	r7,r7,-4
   235b0:	4abfff15 	stw	r10,-4(r9)
   235b4:	42000104 	addi	r8,r8,4
   235b8:	59fffa36 	bltu	r11,r7,235a4 <__alt_mem_epcs_flash_controller_0+0xfffe25a4>
   235bc:	213fff04 	addi	r4,r4,-4
   235c0:	2008d0ba 	srli	r4,r4,2
   235c4:	318000cc 	andi	r6,r6,3
   235c8:	21000044 	addi	r4,r4,1
   235cc:	2109883a 	add	r4,r4,r4
   235d0:	2109883a 	add	r4,r4,r4
   235d4:	1907883a 	add	r3,r3,r4
   235d8:	290b883a 	add	r5,r5,r4
   235dc:	30000626 	beq	r6,zero,235f8 <memcpy+0x11c>
   235e0:	198d883a 	add	r6,r3,r6
   235e4:	29c00003 	ldbu	r7,0(r5)
   235e8:	18c00044 	addi	r3,r3,1
   235ec:	29400044 	addi	r5,r5,1
   235f0:	19ffffc5 	stb	r7,-1(r3)
   235f4:	19bffb1e 	bne	r3,r6,235e4 <__alt_mem_epcs_flash_controller_0+0xfffe25e4>
   235f8:	dfc00217 	ldw	ra,8(sp)
   235fc:	dc400117 	ldw	r17,4(sp)
   23600:	dc000017 	ldw	r16,0(sp)
   23604:	dec00304 	addi	sp,sp,12
   23608:	f800283a 	ret
   2360c:	2007883a 	mov	r3,r4
   23610:	003ff206 	br	235dc <__alt_mem_epcs_flash_controller_0+0xfffe25dc>
   23614:	2007883a 	mov	r3,r4
   23618:	003ff106 	br	235e0 <__alt_mem_epcs_flash_controller_0+0xfffe25e0>
   2361c:	200d883a 	mov	r6,r4
   23620:	003fee06 	br	235dc <__alt_mem_epcs_flash_controller_0+0xfffe25dc>

00023624 <strlen>:
   23624:	208000cc 	andi	r2,r4,3
   23628:	10002026 	beq	r2,zero,236ac <strlen+0x88>
   2362c:	20800007 	ldb	r2,0(r4)
   23630:	10002026 	beq	r2,zero,236b4 <strlen+0x90>
   23634:	2005883a 	mov	r2,r4
   23638:	00000206 	br	23644 <strlen+0x20>
   2363c:	10c00007 	ldb	r3,0(r2)
   23640:	18001826 	beq	r3,zero,236a4 <strlen+0x80>
   23644:	10800044 	addi	r2,r2,1
   23648:	10c000cc 	andi	r3,r2,3
   2364c:	183ffb1e 	bne	r3,zero,2363c <__alt_mem_epcs_flash_controller_0+0xfffe263c>
   23650:	10c00017 	ldw	r3,0(r2)
   23654:	01ffbff4 	movhi	r7,65279
   23658:	39ffbfc4 	addi	r7,r7,-257
   2365c:	00ca303a 	nor	r5,zero,r3
   23660:	01a02074 	movhi	r6,32897
   23664:	19c7883a 	add	r3,r3,r7
   23668:	31a02004 	addi	r6,r6,-32640
   2366c:	1946703a 	and	r3,r3,r5
   23670:	1986703a 	and	r3,r3,r6
   23674:	1800091e 	bne	r3,zero,2369c <strlen+0x78>
   23678:	10800104 	addi	r2,r2,4
   2367c:	10c00017 	ldw	r3,0(r2)
   23680:	19cb883a 	add	r5,r3,r7
   23684:	00c6303a 	nor	r3,zero,r3
   23688:	28c6703a 	and	r3,r5,r3
   2368c:	1986703a 	and	r3,r3,r6
   23690:	183ff926 	beq	r3,zero,23678 <__alt_mem_epcs_flash_controller_0+0xfffe2678>
   23694:	00000106 	br	2369c <strlen+0x78>
   23698:	10800044 	addi	r2,r2,1
   2369c:	10c00007 	ldb	r3,0(r2)
   236a0:	183ffd1e 	bne	r3,zero,23698 <__alt_mem_epcs_flash_controller_0+0xfffe2698>
   236a4:	1105c83a 	sub	r2,r2,r4
   236a8:	f800283a 	ret
   236ac:	2005883a 	mov	r2,r4
   236b0:	003fe706 	br	23650 <__alt_mem_epcs_flash_controller_0+0xfffe2650>
   236b4:	0005883a 	mov	r2,zero
   236b8:	f800283a 	ret

000236bc <__register_exitproc>:
   236bc:	defffa04 	addi	sp,sp,-24
   236c0:	dc000315 	stw	r16,12(sp)
   236c4:	040000b4 	movhi	r16,2
   236c8:	84144104 	addi	r16,r16,20740
   236cc:	80c00017 	ldw	r3,0(r16)
   236d0:	dc400415 	stw	r17,16(sp)
   236d4:	dfc00515 	stw	ra,20(sp)
   236d8:	18805217 	ldw	r2,328(r3)
   236dc:	2023883a 	mov	r17,r4
   236e0:	10003726 	beq	r2,zero,237c0 <__register_exitproc+0x104>
   236e4:	10c00117 	ldw	r3,4(r2)
   236e8:	010007c4 	movi	r4,31
   236ec:	20c00e16 	blt	r4,r3,23728 <__register_exitproc+0x6c>
   236f0:	1a000044 	addi	r8,r3,1
   236f4:	8800221e 	bne	r17,zero,23780 <__register_exitproc+0xc4>
   236f8:	18c00084 	addi	r3,r3,2
   236fc:	18c7883a 	add	r3,r3,r3
   23700:	18c7883a 	add	r3,r3,r3
   23704:	12000115 	stw	r8,4(r2)
   23708:	10c7883a 	add	r3,r2,r3
   2370c:	19400015 	stw	r5,0(r3)
   23710:	0005883a 	mov	r2,zero
   23714:	dfc00517 	ldw	ra,20(sp)
   23718:	dc400417 	ldw	r17,16(sp)
   2371c:	dc000317 	ldw	r16,12(sp)
   23720:	dec00604 	addi	sp,sp,24
   23724:	f800283a 	ret
   23728:	00800034 	movhi	r2,0
   2372c:	10800004 	addi	r2,r2,0
   23730:	10002626 	beq	r2,zero,237cc <__register_exitproc+0x110>
   23734:	01006404 	movi	r4,400
   23738:	d9400015 	stw	r5,0(sp)
   2373c:	d9800115 	stw	r6,4(sp)
   23740:	d9c00215 	stw	r7,8(sp)
   23744:	00000000 	call	0 <__reset-0x20000>
   23748:	d9400017 	ldw	r5,0(sp)
   2374c:	d9800117 	ldw	r6,4(sp)
   23750:	d9c00217 	ldw	r7,8(sp)
   23754:	10001d26 	beq	r2,zero,237cc <__register_exitproc+0x110>
   23758:	81000017 	ldw	r4,0(r16)
   2375c:	10000115 	stw	zero,4(r2)
   23760:	02000044 	movi	r8,1
   23764:	22405217 	ldw	r9,328(r4)
   23768:	0007883a 	mov	r3,zero
   2376c:	12400015 	stw	r9,0(r2)
   23770:	20805215 	stw	r2,328(r4)
   23774:	10006215 	stw	zero,392(r2)
   23778:	10006315 	stw	zero,396(r2)
   2377c:	883fde26 	beq	r17,zero,236f8 <__alt_mem_epcs_flash_controller_0+0xfffe26f8>
   23780:	18c9883a 	add	r4,r3,r3
   23784:	2109883a 	add	r4,r4,r4
   23788:	1109883a 	add	r4,r2,r4
   2378c:	21802215 	stw	r6,136(r4)
   23790:	01800044 	movi	r6,1
   23794:	12406217 	ldw	r9,392(r2)
   23798:	30cc983a 	sll	r6,r6,r3
   2379c:	4992b03a 	or	r9,r9,r6
   237a0:	12406215 	stw	r9,392(r2)
   237a4:	21c04215 	stw	r7,264(r4)
   237a8:	01000084 	movi	r4,2
   237ac:	893fd21e 	bne	r17,r4,236f8 <__alt_mem_epcs_flash_controller_0+0xfffe26f8>
   237b0:	11006317 	ldw	r4,396(r2)
   237b4:	218cb03a 	or	r6,r4,r6
   237b8:	11806315 	stw	r6,396(r2)
   237bc:	003fce06 	br	236f8 <__alt_mem_epcs_flash_controller_0+0xfffe26f8>
   237c0:	18805304 	addi	r2,r3,332
   237c4:	18805215 	stw	r2,328(r3)
   237c8:	003fc606 	br	236e4 <__alt_mem_epcs_flash_controller_0+0xfffe26e4>
   237cc:	00bfffc4 	movi	r2,-1
   237d0:	003fd006 	br	23714 <__alt_mem_epcs_flash_controller_0+0xfffe2714>

000237d4 <__call_exitprocs>:
   237d4:	defff504 	addi	sp,sp,-44
   237d8:	df000915 	stw	fp,36(sp)
   237dc:	dd400615 	stw	r21,24(sp)
   237e0:	dc800315 	stw	r18,12(sp)
   237e4:	dfc00a15 	stw	ra,40(sp)
   237e8:	ddc00815 	stw	r23,32(sp)
   237ec:	dd800715 	stw	r22,28(sp)
   237f0:	dd000515 	stw	r20,20(sp)
   237f4:	dcc00415 	stw	r19,16(sp)
   237f8:	dc400215 	stw	r17,8(sp)
   237fc:	dc000115 	stw	r16,4(sp)
   23800:	d9000015 	stw	r4,0(sp)
   23804:	2839883a 	mov	fp,r5
   23808:	04800044 	movi	r18,1
   2380c:	057fffc4 	movi	r21,-1
   23810:	008000b4 	movhi	r2,2
   23814:	10944104 	addi	r2,r2,20740
   23818:	12000017 	ldw	r8,0(r2)
   2381c:	45005217 	ldw	r20,328(r8)
   23820:	44c05204 	addi	r19,r8,328
   23824:	a0001c26 	beq	r20,zero,23898 <__call_exitprocs+0xc4>
   23828:	a0800117 	ldw	r2,4(r20)
   2382c:	15ffffc4 	addi	r23,r2,-1
   23830:	b8000d16 	blt	r23,zero,23868 <__call_exitprocs+0x94>
   23834:	14000044 	addi	r16,r2,1
   23838:	8421883a 	add	r16,r16,r16
   2383c:	8421883a 	add	r16,r16,r16
   23840:	84402004 	addi	r17,r16,128
   23844:	a463883a 	add	r17,r20,r17
   23848:	a421883a 	add	r16,r20,r16
   2384c:	e0001e26 	beq	fp,zero,238c8 <__call_exitprocs+0xf4>
   23850:	80804017 	ldw	r2,256(r16)
   23854:	e0801c26 	beq	fp,r2,238c8 <__call_exitprocs+0xf4>
   23858:	bdffffc4 	addi	r23,r23,-1
   2385c:	843fff04 	addi	r16,r16,-4
   23860:	8c7fff04 	addi	r17,r17,-4
   23864:	bd7ff91e 	bne	r23,r21,2384c <__alt_mem_epcs_flash_controller_0+0xfffe284c>
   23868:	00800034 	movhi	r2,0
   2386c:	10800004 	addi	r2,r2,0
   23870:	10000926 	beq	r2,zero,23898 <__call_exitprocs+0xc4>
   23874:	a0800117 	ldw	r2,4(r20)
   23878:	1000301e 	bne	r2,zero,2393c <__call_exitprocs+0x168>
   2387c:	a0800017 	ldw	r2,0(r20)
   23880:	10003226 	beq	r2,zero,2394c <__call_exitprocs+0x178>
   23884:	a009883a 	mov	r4,r20
   23888:	98800015 	stw	r2,0(r19)
   2388c:	00000000 	call	0 <__reset-0x20000>
   23890:	9d000017 	ldw	r20,0(r19)
   23894:	a03fe41e 	bne	r20,zero,23828 <__alt_mem_epcs_flash_controller_0+0xfffe2828>
   23898:	dfc00a17 	ldw	ra,40(sp)
   2389c:	df000917 	ldw	fp,36(sp)
   238a0:	ddc00817 	ldw	r23,32(sp)
   238a4:	dd800717 	ldw	r22,28(sp)
   238a8:	dd400617 	ldw	r21,24(sp)
   238ac:	dd000517 	ldw	r20,20(sp)
   238b0:	dcc00417 	ldw	r19,16(sp)
   238b4:	dc800317 	ldw	r18,12(sp)
   238b8:	dc400217 	ldw	r17,8(sp)
   238bc:	dc000117 	ldw	r16,4(sp)
   238c0:	dec00b04 	addi	sp,sp,44
   238c4:	f800283a 	ret
   238c8:	a0800117 	ldw	r2,4(r20)
   238cc:	80c00017 	ldw	r3,0(r16)
   238d0:	10bfffc4 	addi	r2,r2,-1
   238d4:	15c01426 	beq	r2,r23,23928 <__call_exitprocs+0x154>
   238d8:	80000015 	stw	zero,0(r16)
   238dc:	183fde26 	beq	r3,zero,23858 <__alt_mem_epcs_flash_controller_0+0xfffe2858>
   238e0:	95c8983a 	sll	r4,r18,r23
   238e4:	a0806217 	ldw	r2,392(r20)
   238e8:	a5800117 	ldw	r22,4(r20)
   238ec:	2084703a 	and	r2,r4,r2
   238f0:	10000b26 	beq	r2,zero,23920 <__call_exitprocs+0x14c>
   238f4:	a0806317 	ldw	r2,396(r20)
   238f8:	2088703a 	and	r4,r4,r2
   238fc:	20000c1e 	bne	r4,zero,23930 <__call_exitprocs+0x15c>
   23900:	89400017 	ldw	r5,0(r17)
   23904:	d9000017 	ldw	r4,0(sp)
   23908:	183ee83a 	callr	r3
   2390c:	a0800117 	ldw	r2,4(r20)
   23910:	15bfbf1e 	bne	r2,r22,23810 <__alt_mem_epcs_flash_controller_0+0xfffe2810>
   23914:	98800017 	ldw	r2,0(r19)
   23918:	153fcf26 	beq	r2,r20,23858 <__alt_mem_epcs_flash_controller_0+0xfffe2858>
   2391c:	003fbc06 	br	23810 <__alt_mem_epcs_flash_controller_0+0xfffe2810>
   23920:	183ee83a 	callr	r3
   23924:	003ff906 	br	2390c <__alt_mem_epcs_flash_controller_0+0xfffe290c>
   23928:	a5c00115 	stw	r23,4(r20)
   2392c:	003feb06 	br	238dc <__alt_mem_epcs_flash_controller_0+0xfffe28dc>
   23930:	89000017 	ldw	r4,0(r17)
   23934:	183ee83a 	callr	r3
   23938:	003ff406 	br	2390c <__alt_mem_epcs_flash_controller_0+0xfffe290c>
   2393c:	a0800017 	ldw	r2,0(r20)
   23940:	a027883a 	mov	r19,r20
   23944:	1029883a 	mov	r20,r2
   23948:	003fb606 	br	23824 <__alt_mem_epcs_flash_controller_0+0xfffe2824>
   2394c:	0005883a 	mov	r2,zero
   23950:	003ffb06 	br	23940 <__alt_mem_epcs_flash_controller_0+0xfffe2940>

00023954 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   23954:	defffd04 	addi	sp,sp,-12
   23958:	df000215 	stw	fp,8(sp)
   2395c:	df000204 	addi	fp,sp,8
   23960:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   23964:	0001883a 	nop
   23968:	e0bfff17 	ldw	r2,-4(fp)
   2396c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   23970:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   23974:	10000226 	beq	r2,zero,23980 <_exit+0x2c>
    ALT_SIM_FAIL();
   23978:	002af070 	cmpltui	zero,zero,43969
   2397c:	00000106 	br	23984 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   23980:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   23984:	003fff06 	br	23984 <__alt_mem_epcs_flash_controller_0+0xfffe2984>
