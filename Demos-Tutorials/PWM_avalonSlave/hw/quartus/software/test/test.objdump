
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00003bf8 memsz 0x00003bf8 flags r-x
    LOAD off    0x00004c18 vaddr 0x00023c18 paddr 0x00025270 align 2**12
         filesz 0x00001658 memsz 0x00001658 flags rw-
    LOAD off    0x000068c8 vaddr 0x000268c8 paddr 0x000268c8 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000389c  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  00023ae0  00023ae0  00004ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001658  00023c18  00025270  00004c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  000268c8  000268c8  000068c8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000269e8  000269e8  00006270  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006270  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006d0  00000000  00000000  00006298  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008b1d  00000000  00000000  00006968  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003219  00000000  00000000  0000f485  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003450  00000000  00000000  0001269e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000c80  00000000  00000000  00015af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002003  00000000  00000000  00016770  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000036bd  00000000  00000000  00018773  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0001be30  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000718  00000000  00000000  0001be60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001e1ba  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001e1bd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001e1c9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001e1ca  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001e1cb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001e1d6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001e1e1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0001e1ec  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002c  00000000  00000000  0001e1f6  2**0
                  CONTENTS, READONLY
 26 .jdi          00005961  00000000  00000000  0001e222  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00031843  00000000  00000000  00023b83  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00023ae0 l    d  .rodata	00000000 .rodata
00023c18 l    d  .rwdata	00000000 .rwdata
000268c8 l    d  .bss	00000000 .bss
000269e8 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
000218a0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00021a08 l     F .text	00000034 alt_dev_reg
00023c18 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00021ce0 l     F .text	0000020c altera_avalon_jtag_uart_irq
00021eec l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00022650 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000227a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000227d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00022c44 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00022d84 l     F .text	0000003c alt_get_errno
00022dc0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00024e20 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000268e0 g     O .bss	00000004 alt_instruction_exception_handler
0002198c g     F .text	0000007c alt_main
000268e8 g     O .bss	00000100 alt_irq
00025270 g       *ABS*	00000000 __flash_rwdata_start
00020624 g     F .text	000000dc .hidden __gtdf2
000231e0 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
000268e4 g     O .bss	00000004 errno
000268cc g     O .bss	00000004 alt_argv
0002d244 g       *ABS*	00000000 _gp
00024ca0 g     O .rwdata	00000180 alt_fd_list
00023204 g     F .text	00000090 alt_find_dev
00023634 g     F .text	00000148 memcpy
00022d08 g     F .text	0000007c alt_io_redirect
00023ae0 g       *ABS*	00000000 __DTOR_END__
000234d0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000220e4 g     F .text	0000021c altera_avalon_jtag_uart_read
00020290 g     F .text	000000d4 generate_pwm
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00020568 g     F .text	00000064 .hidden __udivsi3
000203fc g     F .text	00000074 .hidden __fixunsdfsi
00023440 g     F .text	00000090 alt_icache_flush
00025254 g     O .rwdata	00000004 alt_max_fd
00025268 g     O .rwdata	00000004 _global_impure_ptr
000269e8 g       *ABS*	00000000 __bss_end
00022b54 g     F .text	000000f0 alt_iic_isr_register
000230d8 g     F .text	00000108 alt_tick
00021794 g     F .text	000000a8 .hidden __floatunsidf
00022b08 g     F .text	0000004c alt_ic_irq_enabled
0002303c g     F .text	0000009c alt_alarm_stop
000268d4 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00024c78 g     O .rwdata	00000028 alt_dev_null
0002275c g     F .text	00000048 alt_dcache_flush_all
00021714 g     F .text	00000080 .hidden __fixdfsi
00025270 g       *ABS*	00000000 __ram_rwdata_end
0002524c g     O .rwdata	00000008 alt_dev_list
00023c18 g       *ABS*	00000000 __ram_rodata_end
000205cc g     F .text	00000058 .hidden __umodsi3
000269e8 g       *ABS*	00000000 end
00021c20 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00023ae0 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002183c g     F .text	00000064 .hidden __clzsi2
00022300 g     F .text	00000224 altera_avalon_jtag_uart_write
0002392c g     F .text	00000180 __call_exitprocs
00020244 g     F .text	0000004c _start
000268d8 g     O .bss	00000004 _alt_tick_rate
000268dc g     O .bss	00000004 _alt_nticks
00021a74 g     F .text	00000048 alt_sys_init
00023814 g     F .text	00000118 __register_exitproc
00021f8c g     F .text	00000068 altera_avalon_jtag_uart_close
00023c18 g       *ABS*	00000000 __ram_rwdata_start
00023ae0 g       *ABS*	00000000 __ram_rodata_start
00021abc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002339c g     F .text	000000a4 alt_get_fd
000235b8 g     F .text	0000007c memcmp
00021b7c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000269e8 g       *ABS*	00000000 __alt_stack_base
00021bcc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00020700 g     F .text	00000718 .hidden __muldf3
00023294 g     F .text	00000108 alt_find_file
0002280c g     F .text	000000a4 alt_dev_llist_insert
000268c8 g       *ABS*	00000000 __bss_start
00020364 g     F .text	00000098 main
000268d0 g     O .bss	00000004 alt_envp
00021b1c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00025258 g     O .rwdata	00000004 alt_errno
00020470 g     F .text	00000084 .hidden __divsi3
00023ae0 g       *ABS*	00000000 __CTOR_END__
00023ae0 g       *ABS*	00000000 __flash_rodata_start
00023ae0 g       *ABS*	00000000 __DTOR_LIST__
00021a3c g     F .text	00000038 alt_irq_init
00022fd8 g     F .text	00000064 alt_release_fd
00023ae0 g     O .rodata	00000100 .hidden __clz_tab
0002356c g     F .text	00000014 atexit
0002526c g     O .rwdata	00000004 _impure_ptr
000268c8 g     O .bss	00000004 alt_argc
00022910 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00025244 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000229a4 g     F .text	00000050 alt_ic_isr_register
00025270 g       *ABS*	00000000 _edata
000269e8 g       *ABS*	00000000 _end
00020244 g       *ABS*	00000000 __ram_exceptions_end
00021ff4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00022a7c g     F .text	0000008c alt_ic_irq_disable
00023580 g     F .text	00000038 exit
000204f4 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00023aac g     F .text	00000034 _exit
00022524 g     F .text	0000012c alt_alarm_start
0002377c g     F .text	00000098 strlen
00022e84 g     F .text	00000154 open
00020624 g     F .text	000000dc .hidden __gedf2
00022970 g     F .text	00000034 alt_icache_flush_all
0002525c g     O .rwdata	00000004 alt_priority_mask
000229f4 g     F .text	00000088 alt_ic_irq_enable
00020e18 g     F .text	000008fc .hidden __subdf3
00025260 g     O .rwdata	00000008 alt_alarm_list
000228b0 g     F .text	00000060 _do_ctors
0002268c g     F .text	000000d0 close
00021908 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__reset-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000b4 	movhi	r2,2
   20140:	109a3a04 	addi	r2,r2,26856
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000b4 	movhi	r2,2
   20158:	109a3a04 	addi	r2,r2,26856
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a5a717 	ldw	r2,-26980(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a5a717 	ldw	r2,-26980(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2025c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20260:	d6b49114 	ori	gp,gp,53828
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20268:	109a3214 	ori	r2,r2,26824

    movhi r3, %hi(__bss_end)
   2026c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20270:	18da7a14 	ori	r3,r3,27112

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	00219080 	call	21908 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	002198c0 	call	2198c <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <__alt_data_end+0xfffe028c>

00020290 <generate_pwm>:

/* generate_pwm:
* inputs: period in milliseconds, percent duty cycle, and polarity (either 0 or 1).
* sets the Avalon bus registers to output a pwm with these characteristics.
*/
void generate_pwm(int period, double dc, int polarity){
   20290:	defff704 	addi	sp,sp,-36
   20294:	dfc00815 	stw	ra,32(sp)
   20298:	df000715 	stw	fp,28(sp)
   2029c:	df000704 	addi	fp,sp,28
   202a0:	e13ffc15 	stw	r4,-16(fp)
   202a4:	e17ffd15 	stw	r5,-12(fp)
   202a8:	e1bffe15 	stw	r6,-8(fp)
   202ac:	e1ffff15 	stw	r7,-4(fp)
	uint32_t set_period = period*1000000/20; //convert ms to ns and clk period is 20 ns so divide by that
   202b0:	e0fffc17 	ldw	r3,-16(fp)
   202b4:	008003f4 	movhi	r2,15
   202b8:	10909004 	addi	r2,r2,16960
   202bc:	1885383a 	mul	r2,r3,r2
   202c0:	01400504 	movi	r5,20
   202c4:	1009883a 	mov	r4,r2
   202c8:	00204700 	call	20470 <__divsi3>
   202cc:	e0bff915 	stw	r2,-28(fp)
	uint32_t set_dc = set_period*dc;
   202d0:	e13ff917 	ldw	r4,-28(fp)
   202d4:	00217940 	call	21794 <__floatunsidf>
   202d8:	1011883a 	mov	r8,r2
   202dc:	1813883a 	mov	r9,r3
   202e0:	e1bffd17 	ldw	r6,-12(fp)
   202e4:	e1fffe17 	ldw	r7,-8(fp)
   202e8:	4009883a 	mov	r4,r8
   202ec:	480b883a 	mov	r5,r9
   202f0:	00207000 	call	20700 <__muldf3>
   202f4:	1009883a 	mov	r4,r2
   202f8:	180b883a 	mov	r5,r3
   202fc:	2005883a 	mov	r2,r4
   20300:	2807883a 	mov	r3,r5
   20304:	1009883a 	mov	r4,r2
   20308:	180b883a 	mov	r5,r3
   2030c:	00203fc0 	call	203fc <__fixunsdfsi>
   20310:	e0bffa15 	stw	r2,-24(fp)
	uint32_t set_pol = polarity;
   20314:	e0bfff17 	ldw	r2,-4(fp)
   20318:	e0bffb15 	stw	r2,-20(fp)

	IOWR_32DIRECT(PWM_0_BASE, 0, set_period);
   2031c:	e0fff917 	ldw	r3,-28(fp)
   20320:	00800134 	movhi	r2,4
   20324:	10840004 	addi	r2,r2,4096
   20328:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PWM_0_BASE, 1, set_dc);
   2032c:	e0fffa17 	ldw	r3,-24(fp)
   20330:	00800134 	movhi	r2,4
   20334:	10840044 	addi	r2,r2,4097
   20338:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PWM_0_BASE, 2, set_pol);
   2033c:	e0fffb17 	ldw	r3,-20(fp)
   20340:	00800134 	movhi	r2,4
   20344:	10840084 	addi	r2,r2,4098
   20348:	10c00035 	stwio	r3,0(r2)
}
   2034c:	0001883a 	nop
   20350:	e037883a 	mov	sp,fp
   20354:	dfc00117 	ldw	ra,4(sp)
   20358:	df000017 	ldw	fp,0(sp)
   2035c:	dec00204 	addi	sp,sp,8
   20360:	f800283a 	ret

00020364 <main>:

int main()
{
   20364:	defffd04 	addi	sp,sp,-12
   20368:	dfc00215 	stw	ra,8(sp)
   2036c:	df000115 	stw	fp,4(sp)
   20370:	df000104 	addi	fp,sp,4
	//this code should repeatedly move the arm of a servo motor back and fourth with a short pause in between
	//the servo should be connected to GPIO_0 pin 1 header of the board and gnd which is GPIO_0 pin 12

	int i =0;
   20374:	e03fff15 	stw	zero,-4(fp)
	while(1){
		generate_pwm(20, .05, 1);
   20378:	01c00044 	movi	r7,1
   2037c:	016666b4 	movhi	r5,39322
   20380:	29666684 	addi	r5,r5,-26214
   20384:	018feab4 	movhi	r6,16298
   20388:	31a66644 	addi	r6,r6,-26215
   2038c:	01000504 	movi	r4,20
   20390:	00202900 	call	20290 <generate_pwm>
		for (i=0; i<1000000; i++);
   20394:	e03fff15 	stw	zero,-4(fp)
   20398:	00000306 	br	203a8 <main+0x44>
   2039c:	e0bfff17 	ldw	r2,-4(fp)
   203a0:	10800044 	addi	r2,r2,1
   203a4:	e0bfff15 	stw	r2,-4(fp)
   203a8:	e0ffff17 	ldw	r3,-4(fp)
   203ac:	008003f4 	movhi	r2,15
   203b0:	10908fc4 	addi	r2,r2,16959
   203b4:	10fff90e 	bge	r2,r3,2039c <__alt_data_end+0xfffe039c>
		generate_pwm(20, .1, 1);
   203b8:	01c00044 	movi	r7,1
   203bc:	016666b4 	movhi	r5,39322
   203c0:	29666684 	addi	r5,r5,-26214
   203c4:	018feeb4 	movhi	r6,16314
   203c8:	31a66644 	addi	r6,r6,-26215
   203cc:	01000504 	movi	r4,20
   203d0:	00202900 	call	20290 <generate_pwm>
		for(i=0;i<1000000; i++);
   203d4:	e03fff15 	stw	zero,-4(fp)
   203d8:	00000306 	br	203e8 <main+0x84>
   203dc:	e0bfff17 	ldw	r2,-4(fp)
   203e0:	10800044 	addi	r2,r2,1
   203e4:	e0bfff15 	stw	r2,-4(fp)
   203e8:	e0ffff17 	ldw	r3,-4(fp)
   203ec:	008003f4 	movhi	r2,15
   203f0:	10908fc4 	addi	r2,r2,16959
   203f4:	10fff90e 	bge	r2,r3,203dc <__alt_data_end+0xfffe03dc>
	}
   203f8:	003fdf06 	br	20378 <__alt_data_end+0xfffe0378>

000203fc <__fixunsdfsi>:
   203fc:	defffd04 	addi	sp,sp,-12
   20400:	000d883a 	mov	r6,zero
   20404:	01d07834 	movhi	r7,16864
   20408:	dc400115 	stw	r17,4(sp)
   2040c:	dc000015 	stw	r16,0(sp)
   20410:	dfc00215 	stw	ra,8(sp)
   20414:	2023883a 	mov	r17,r4
   20418:	2821883a 	mov	r16,r5
   2041c:	00206240 	call	20624 <__gedf2>
   20420:	1000080e 	bge	r2,zero,20444 <__fixunsdfsi+0x48>
   20424:	8809883a 	mov	r4,r17
   20428:	800b883a 	mov	r5,r16
   2042c:	00217140 	call	21714 <__fixdfsi>
   20430:	dfc00217 	ldw	ra,8(sp)
   20434:	dc400117 	ldw	r17,4(sp)
   20438:	dc000017 	ldw	r16,0(sp)
   2043c:	dec00304 	addi	sp,sp,12
   20440:	f800283a 	ret
   20444:	000d883a 	mov	r6,zero
   20448:	01d07834 	movhi	r7,16864
   2044c:	8809883a 	mov	r4,r17
   20450:	800b883a 	mov	r5,r16
   20454:	0020e180 	call	20e18 <__subdf3>
   20458:	180b883a 	mov	r5,r3
   2045c:	1009883a 	mov	r4,r2
   20460:	00217140 	call	21714 <__fixdfsi>
   20464:	00e00034 	movhi	r3,32768
   20468:	10c5883a 	add	r2,r2,r3
   2046c:	003ff006 	br	20430 <__alt_data_end+0xfffe0430>

00020470 <__divsi3>:
   20470:	20001b16 	blt	r4,zero,204e0 <__divsi3+0x70>
   20474:	000f883a 	mov	r7,zero
   20478:	28001616 	blt	r5,zero,204d4 <__divsi3+0x64>
   2047c:	200d883a 	mov	r6,r4
   20480:	29001a2e 	bgeu	r5,r4,204ec <__divsi3+0x7c>
   20484:	00800804 	movi	r2,32
   20488:	00c00044 	movi	r3,1
   2048c:	00000106 	br	20494 <__divsi3+0x24>
   20490:	10000d26 	beq	r2,zero,204c8 <__divsi3+0x58>
   20494:	294b883a 	add	r5,r5,r5
   20498:	10bfffc4 	addi	r2,r2,-1
   2049c:	18c7883a 	add	r3,r3,r3
   204a0:	293ffb36 	bltu	r5,r4,20490 <__alt_data_end+0xfffe0490>
   204a4:	0005883a 	mov	r2,zero
   204a8:	18000726 	beq	r3,zero,204c8 <__divsi3+0x58>
   204ac:	0005883a 	mov	r2,zero
   204b0:	31400236 	bltu	r6,r5,204bc <__divsi3+0x4c>
   204b4:	314dc83a 	sub	r6,r6,r5
   204b8:	10c4b03a 	or	r2,r2,r3
   204bc:	1806d07a 	srli	r3,r3,1
   204c0:	280ad07a 	srli	r5,r5,1
   204c4:	183ffa1e 	bne	r3,zero,204b0 <__alt_data_end+0xfffe04b0>
   204c8:	38000126 	beq	r7,zero,204d0 <__divsi3+0x60>
   204cc:	0085c83a 	sub	r2,zero,r2
   204d0:	f800283a 	ret
   204d4:	014bc83a 	sub	r5,zero,r5
   204d8:	39c0005c 	xori	r7,r7,1
   204dc:	003fe706 	br	2047c <__alt_data_end+0xfffe047c>
   204e0:	0109c83a 	sub	r4,zero,r4
   204e4:	01c00044 	movi	r7,1
   204e8:	003fe306 	br	20478 <__alt_data_end+0xfffe0478>
   204ec:	00c00044 	movi	r3,1
   204f0:	003fee06 	br	204ac <__alt_data_end+0xfffe04ac>

000204f4 <__modsi3>:
   204f4:	20001716 	blt	r4,zero,20554 <__modsi3+0x60>
   204f8:	000f883a 	mov	r7,zero
   204fc:	2005883a 	mov	r2,r4
   20500:	28001216 	blt	r5,zero,2054c <__modsi3+0x58>
   20504:	2900162e 	bgeu	r5,r4,20560 <__modsi3+0x6c>
   20508:	01800804 	movi	r6,32
   2050c:	00c00044 	movi	r3,1
   20510:	00000106 	br	20518 <__modsi3+0x24>
   20514:	30000a26 	beq	r6,zero,20540 <__modsi3+0x4c>
   20518:	294b883a 	add	r5,r5,r5
   2051c:	31bfffc4 	addi	r6,r6,-1
   20520:	18c7883a 	add	r3,r3,r3
   20524:	293ffb36 	bltu	r5,r4,20514 <__alt_data_end+0xfffe0514>
   20528:	18000526 	beq	r3,zero,20540 <__modsi3+0x4c>
   2052c:	1806d07a 	srli	r3,r3,1
   20530:	11400136 	bltu	r2,r5,20538 <__modsi3+0x44>
   20534:	1145c83a 	sub	r2,r2,r5
   20538:	280ad07a 	srli	r5,r5,1
   2053c:	183ffb1e 	bne	r3,zero,2052c <__alt_data_end+0xfffe052c>
   20540:	38000126 	beq	r7,zero,20548 <__modsi3+0x54>
   20544:	0085c83a 	sub	r2,zero,r2
   20548:	f800283a 	ret
   2054c:	014bc83a 	sub	r5,zero,r5
   20550:	003fec06 	br	20504 <__alt_data_end+0xfffe0504>
   20554:	0109c83a 	sub	r4,zero,r4
   20558:	01c00044 	movi	r7,1
   2055c:	003fe706 	br	204fc <__alt_data_end+0xfffe04fc>
   20560:	00c00044 	movi	r3,1
   20564:	003ff106 	br	2052c <__alt_data_end+0xfffe052c>

00020568 <__udivsi3>:
   20568:	200d883a 	mov	r6,r4
   2056c:	2900152e 	bgeu	r5,r4,205c4 <__udivsi3+0x5c>
   20570:	28001416 	blt	r5,zero,205c4 <__udivsi3+0x5c>
   20574:	00800804 	movi	r2,32
   20578:	00c00044 	movi	r3,1
   2057c:	00000206 	br	20588 <__udivsi3+0x20>
   20580:	10000e26 	beq	r2,zero,205bc <__udivsi3+0x54>
   20584:	28000516 	blt	r5,zero,2059c <__udivsi3+0x34>
   20588:	294b883a 	add	r5,r5,r5
   2058c:	10bfffc4 	addi	r2,r2,-1
   20590:	18c7883a 	add	r3,r3,r3
   20594:	293ffa36 	bltu	r5,r4,20580 <__alt_data_end+0xfffe0580>
   20598:	18000826 	beq	r3,zero,205bc <__udivsi3+0x54>
   2059c:	0005883a 	mov	r2,zero
   205a0:	31400236 	bltu	r6,r5,205ac <__udivsi3+0x44>
   205a4:	314dc83a 	sub	r6,r6,r5
   205a8:	10c4b03a 	or	r2,r2,r3
   205ac:	1806d07a 	srli	r3,r3,1
   205b0:	280ad07a 	srli	r5,r5,1
   205b4:	183ffa1e 	bne	r3,zero,205a0 <__alt_data_end+0xfffe05a0>
   205b8:	f800283a 	ret
   205bc:	0005883a 	mov	r2,zero
   205c0:	f800283a 	ret
   205c4:	00c00044 	movi	r3,1
   205c8:	003ff406 	br	2059c <__alt_data_end+0xfffe059c>

000205cc <__umodsi3>:
   205cc:	2005883a 	mov	r2,r4
   205d0:	2900122e 	bgeu	r5,r4,2061c <__umodsi3+0x50>
   205d4:	28001116 	blt	r5,zero,2061c <__umodsi3+0x50>
   205d8:	01800804 	movi	r6,32
   205dc:	00c00044 	movi	r3,1
   205e0:	00000206 	br	205ec <__umodsi3+0x20>
   205e4:	30000c26 	beq	r6,zero,20618 <__umodsi3+0x4c>
   205e8:	28000516 	blt	r5,zero,20600 <__umodsi3+0x34>
   205ec:	294b883a 	add	r5,r5,r5
   205f0:	31bfffc4 	addi	r6,r6,-1
   205f4:	18c7883a 	add	r3,r3,r3
   205f8:	293ffa36 	bltu	r5,r4,205e4 <__alt_data_end+0xfffe05e4>
   205fc:	18000626 	beq	r3,zero,20618 <__umodsi3+0x4c>
   20600:	1806d07a 	srli	r3,r3,1
   20604:	11400136 	bltu	r2,r5,2060c <__umodsi3+0x40>
   20608:	1145c83a 	sub	r2,r2,r5
   2060c:	280ad07a 	srli	r5,r5,1
   20610:	183ffb1e 	bne	r3,zero,20600 <__alt_data_end+0xfffe0600>
   20614:	f800283a 	ret
   20618:	f800283a 	ret
   2061c:	00c00044 	movi	r3,1
   20620:	003ff706 	br	20600 <__alt_data_end+0xfffe0600>

00020624 <__gedf2>:
   20624:	2804d53a 	srli	r2,r5,20
   20628:	3806d53a 	srli	r3,r7,20
   2062c:	02000434 	movhi	r8,16
   20630:	423fffc4 	addi	r8,r8,-1
   20634:	1081ffcc 	andi	r2,r2,2047
   20638:	0241ffc4 	movi	r9,2047
   2063c:	2a14703a 	and	r10,r5,r8
   20640:	18c1ffcc 	andi	r3,r3,2047
   20644:	3a10703a 	and	r8,r7,r8
   20648:	280ad7fa 	srli	r5,r5,31
   2064c:	380ed7fa 	srli	r7,r7,31
   20650:	12401d26 	beq	r2,r9,206c8 <__gedf2+0xa4>
   20654:	0241ffc4 	movi	r9,2047
   20658:	1a401226 	beq	r3,r9,206a4 <__gedf2+0x80>
   2065c:	1000081e 	bne	r2,zero,20680 <__gedf2+0x5c>
   20660:	2296b03a 	or	r11,r4,r10
   20664:	5813003a 	cmpeq	r9,r11,zero
   20668:	1800091e 	bne	r3,zero,20690 <__gedf2+0x6c>
   2066c:	3218b03a 	or	r12,r6,r8
   20670:	6000071e 	bne	r12,zero,20690 <__gedf2+0x6c>
   20674:	0005883a 	mov	r2,zero
   20678:	5800101e 	bne	r11,zero,206bc <__gedf2+0x98>
   2067c:	f800283a 	ret
   20680:	18000c1e 	bne	r3,zero,206b4 <__gedf2+0x90>
   20684:	3212b03a 	or	r9,r6,r8
   20688:	48000c26 	beq	r9,zero,206bc <__gedf2+0x98>
   2068c:	0013883a 	mov	r9,zero
   20690:	39c03fcc 	andi	r7,r7,255
   20694:	48000826 	beq	r9,zero,206b8 <__gedf2+0x94>
   20698:	38000926 	beq	r7,zero,206c0 <__gedf2+0x9c>
   2069c:	00800044 	movi	r2,1
   206a0:	f800283a 	ret
   206a4:	3212b03a 	or	r9,r6,r8
   206a8:	483fec26 	beq	r9,zero,2065c <__alt_data_end+0xfffe065c>
   206ac:	00bfff84 	movi	r2,-2
   206b0:	f800283a 	ret
   206b4:	39c03fcc 	andi	r7,r7,255
   206b8:	29c00626 	beq	r5,r7,206d4 <__gedf2+0xb0>
   206bc:	283ff726 	beq	r5,zero,2069c <__alt_data_end+0xfffe069c>
   206c0:	00bfffc4 	movi	r2,-1
   206c4:	f800283a 	ret
   206c8:	2292b03a 	or	r9,r4,r10
   206cc:	483fe126 	beq	r9,zero,20654 <__alt_data_end+0xfffe0654>
   206d0:	003ff606 	br	206ac <__alt_data_end+0xfffe06ac>
   206d4:	18bff916 	blt	r3,r2,206bc <__alt_data_end+0xfffe06bc>
   206d8:	10c00316 	blt	r2,r3,206e8 <__gedf2+0xc4>
   206dc:	42bff736 	bltu	r8,r10,206bc <__alt_data_end+0xfffe06bc>
   206e0:	52000326 	beq	r10,r8,206f0 <__gedf2+0xcc>
   206e4:	5200042e 	bgeu	r10,r8,206f8 <__gedf2+0xd4>
   206e8:	283fec1e 	bne	r5,zero,2069c <__alt_data_end+0xfffe069c>
   206ec:	003ff406 	br	206c0 <__alt_data_end+0xfffe06c0>
   206f0:	313ff236 	bltu	r6,r4,206bc <__alt_data_end+0xfffe06bc>
   206f4:	21bffc36 	bltu	r4,r6,206e8 <__alt_data_end+0xfffe06e8>
   206f8:	0005883a 	mov	r2,zero
   206fc:	f800283a 	ret

00020700 <__muldf3>:
   20700:	defff304 	addi	sp,sp,-52
   20704:	2804d53a 	srli	r2,r5,20
   20708:	dd800915 	stw	r22,36(sp)
   2070c:	282cd7fa 	srli	r22,r5,31
   20710:	dc000315 	stw	r16,12(sp)
   20714:	04000434 	movhi	r16,16
   20718:	dd400815 	stw	r21,32(sp)
   2071c:	dc800515 	stw	r18,20(sp)
   20720:	843fffc4 	addi	r16,r16,-1
   20724:	dfc00c15 	stw	ra,48(sp)
   20728:	df000b15 	stw	fp,44(sp)
   2072c:	ddc00a15 	stw	r23,40(sp)
   20730:	dd000715 	stw	r20,28(sp)
   20734:	dcc00615 	stw	r19,24(sp)
   20738:	dc400415 	stw	r17,16(sp)
   2073c:	1481ffcc 	andi	r18,r2,2047
   20740:	2c20703a 	and	r16,r5,r16
   20744:	b02b883a 	mov	r21,r22
   20748:	b2403fcc 	andi	r9,r22,255
   2074c:	90006026 	beq	r18,zero,208d0 <__muldf3+0x1d0>
   20750:	0081ffc4 	movi	r2,2047
   20754:	2029883a 	mov	r20,r4
   20758:	90803626 	beq	r18,r2,20834 <__muldf3+0x134>
   2075c:	80800434 	orhi	r2,r16,16
   20760:	100490fa 	slli	r2,r2,3
   20764:	2020d77a 	srli	r16,r4,29
   20768:	202890fa 	slli	r20,r4,3
   2076c:	94bf0044 	addi	r18,r18,-1023
   20770:	80a0b03a 	or	r16,r16,r2
   20774:	0027883a 	mov	r19,zero
   20778:	0039883a 	mov	fp,zero
   2077c:	3804d53a 	srli	r2,r7,20
   20780:	382ed7fa 	srli	r23,r7,31
   20784:	04400434 	movhi	r17,16
   20788:	8c7fffc4 	addi	r17,r17,-1
   2078c:	1081ffcc 	andi	r2,r2,2047
   20790:	3011883a 	mov	r8,r6
   20794:	3c62703a 	and	r17,r7,r17
   20798:	ba803fcc 	andi	r10,r23,255
   2079c:	10006d26 	beq	r2,zero,20954 <__muldf3+0x254>
   207a0:	00c1ffc4 	movi	r3,2047
   207a4:	10c06526 	beq	r2,r3,2093c <__muldf3+0x23c>
   207a8:	88c00434 	orhi	r3,r17,16
   207ac:	180690fa 	slli	r3,r3,3
   207b0:	3022d77a 	srli	r17,r6,29
   207b4:	301090fa 	slli	r8,r6,3
   207b8:	10bf0044 	addi	r2,r2,-1023
   207bc:	88e2b03a 	or	r17,r17,r3
   207c0:	000b883a 	mov	r5,zero
   207c4:	9085883a 	add	r2,r18,r2
   207c8:	2cc8b03a 	or	r4,r5,r19
   207cc:	00c003c4 	movi	r3,15
   207d0:	bdacf03a 	xor	r22,r23,r22
   207d4:	12c00044 	addi	r11,r2,1
   207d8:	19009936 	bltu	r3,r4,20a40 <__muldf3+0x340>
   207dc:	200890ba 	slli	r4,r4,2
   207e0:	00c000b4 	movhi	r3,2
   207e4:	18c1fd04 	addi	r3,r3,2036
   207e8:	20c9883a 	add	r4,r4,r3
   207ec:	20c00017 	ldw	r3,0(r4)
   207f0:	1800683a 	jmp	r3
   207f4:	00020a40 	call	20a4 <__reset-0x1df5c>
   207f8:	00020854 	movui	zero,2081
   207fc:	00020854 	movui	zero,2081
   20800:	00020850 	cmplti	zero,zero,2081
   20804:	00020a1c 	xori	zero,zero,2088
   20808:	00020a1c 	xori	zero,zero,2088
   2080c:	00020a04 	movi	zero,2088
   20810:	00020850 	cmplti	zero,zero,2081
   20814:	00020a1c 	xori	zero,zero,2088
   20818:	00020a04 	movi	zero,2088
   2081c:	00020a1c 	xori	zero,zero,2088
   20820:	00020850 	cmplti	zero,zero,2081
   20824:	00020a2c 	andhi	zero,zero,2088
   20828:	00020a2c 	andhi	zero,zero,2088
   2082c:	00020a2c 	andhi	zero,zero,2088
   20830:	00020c48 	cmpgei	zero,zero,2097
   20834:	2404b03a 	or	r2,r4,r16
   20838:	10006f1e 	bne	r2,zero,209f8 <__muldf3+0x2f8>
   2083c:	04c00204 	movi	r19,8
   20840:	0021883a 	mov	r16,zero
   20844:	0029883a 	mov	r20,zero
   20848:	07000084 	movi	fp,2
   2084c:	003fcb06 	br	2077c <__alt_data_end+0xfffe077c>
   20850:	502d883a 	mov	r22,r10
   20854:	00800084 	movi	r2,2
   20858:	28805726 	beq	r5,r2,209b8 <__muldf3+0x2b8>
   2085c:	008000c4 	movi	r2,3
   20860:	28816626 	beq	r5,r2,20dfc <__muldf3+0x6fc>
   20864:	00800044 	movi	r2,1
   20868:	2881411e 	bne	r5,r2,20d70 <__muldf3+0x670>
   2086c:	b02b883a 	mov	r21,r22
   20870:	0005883a 	mov	r2,zero
   20874:	000b883a 	mov	r5,zero
   20878:	0029883a 	mov	r20,zero
   2087c:	1004953a 	slli	r2,r2,20
   20880:	a8c03fcc 	andi	r3,r21,255
   20884:	04400434 	movhi	r17,16
   20888:	8c7fffc4 	addi	r17,r17,-1
   2088c:	180697fa 	slli	r3,r3,31
   20890:	2c4a703a 	and	r5,r5,r17
   20894:	288ab03a 	or	r5,r5,r2
   20898:	28c6b03a 	or	r3,r5,r3
   2089c:	a005883a 	mov	r2,r20
   208a0:	dfc00c17 	ldw	ra,48(sp)
   208a4:	df000b17 	ldw	fp,44(sp)
   208a8:	ddc00a17 	ldw	r23,40(sp)
   208ac:	dd800917 	ldw	r22,36(sp)
   208b0:	dd400817 	ldw	r21,32(sp)
   208b4:	dd000717 	ldw	r20,28(sp)
   208b8:	dcc00617 	ldw	r19,24(sp)
   208bc:	dc800517 	ldw	r18,20(sp)
   208c0:	dc400417 	ldw	r17,16(sp)
   208c4:	dc000317 	ldw	r16,12(sp)
   208c8:	dec00d04 	addi	sp,sp,52
   208cc:	f800283a 	ret
   208d0:	2404b03a 	or	r2,r4,r16
   208d4:	2027883a 	mov	r19,r4
   208d8:	10004226 	beq	r2,zero,209e4 <__muldf3+0x2e4>
   208dc:	8000fc26 	beq	r16,zero,20cd0 <__muldf3+0x5d0>
   208e0:	8009883a 	mov	r4,r16
   208e4:	d9800215 	stw	r6,8(sp)
   208e8:	d9c00015 	stw	r7,0(sp)
   208ec:	da400115 	stw	r9,4(sp)
   208f0:	002183c0 	call	2183c <__clzsi2>
   208f4:	d9800217 	ldw	r6,8(sp)
   208f8:	d9c00017 	ldw	r7,0(sp)
   208fc:	da400117 	ldw	r9,4(sp)
   20900:	113ffd44 	addi	r4,r2,-11
   20904:	00c00704 	movi	r3,28
   20908:	1900ed16 	blt	r3,r4,20cc0 <__muldf3+0x5c0>
   2090c:	00c00744 	movi	r3,29
   20910:	147ffe04 	addi	r17,r2,-8
   20914:	1907c83a 	sub	r3,r3,r4
   20918:	8460983a 	sll	r16,r16,r17
   2091c:	98c6d83a 	srl	r3,r19,r3
   20920:	9c68983a 	sll	r20,r19,r17
   20924:	1c20b03a 	or	r16,r3,r16
   20928:	1080fcc4 	addi	r2,r2,1011
   2092c:	00a5c83a 	sub	r18,zero,r2
   20930:	0027883a 	mov	r19,zero
   20934:	0039883a 	mov	fp,zero
   20938:	003f9006 	br	2077c <__alt_data_end+0xfffe077c>
   2093c:	3446b03a 	or	r3,r6,r17
   20940:	1800261e 	bne	r3,zero,209dc <__muldf3+0x2dc>
   20944:	0023883a 	mov	r17,zero
   20948:	0011883a 	mov	r8,zero
   2094c:	01400084 	movi	r5,2
   20950:	003f9c06 	br	207c4 <__alt_data_end+0xfffe07c4>
   20954:	3446b03a 	or	r3,r6,r17
   20958:	18001c26 	beq	r3,zero,209cc <__muldf3+0x2cc>
   2095c:	8800ce26 	beq	r17,zero,20c98 <__muldf3+0x598>
   20960:	8809883a 	mov	r4,r17
   20964:	d9800215 	stw	r6,8(sp)
   20968:	da400115 	stw	r9,4(sp)
   2096c:	da800015 	stw	r10,0(sp)
   20970:	002183c0 	call	2183c <__clzsi2>
   20974:	d9800217 	ldw	r6,8(sp)
   20978:	da400117 	ldw	r9,4(sp)
   2097c:	da800017 	ldw	r10,0(sp)
   20980:	113ffd44 	addi	r4,r2,-11
   20984:	00c00704 	movi	r3,28
   20988:	1900bf16 	blt	r3,r4,20c88 <__muldf3+0x588>
   2098c:	00c00744 	movi	r3,29
   20990:	123ffe04 	addi	r8,r2,-8
   20994:	1907c83a 	sub	r3,r3,r4
   20998:	8a22983a 	sll	r17,r17,r8
   2099c:	30c6d83a 	srl	r3,r6,r3
   209a0:	3210983a 	sll	r8,r6,r8
   209a4:	1c62b03a 	or	r17,r3,r17
   209a8:	1080fcc4 	addi	r2,r2,1011
   209ac:	0085c83a 	sub	r2,zero,r2
   209b0:	000b883a 	mov	r5,zero
   209b4:	003f8306 	br	207c4 <__alt_data_end+0xfffe07c4>
   209b8:	b02b883a 	mov	r21,r22
   209bc:	0081ffc4 	movi	r2,2047
   209c0:	000b883a 	mov	r5,zero
   209c4:	0029883a 	mov	r20,zero
   209c8:	003fac06 	br	2087c <__alt_data_end+0xfffe087c>
   209cc:	0023883a 	mov	r17,zero
   209d0:	0011883a 	mov	r8,zero
   209d4:	01400044 	movi	r5,1
   209d8:	003f7a06 	br	207c4 <__alt_data_end+0xfffe07c4>
   209dc:	014000c4 	movi	r5,3
   209e0:	003f7806 	br	207c4 <__alt_data_end+0xfffe07c4>
   209e4:	04c00104 	movi	r19,4
   209e8:	0021883a 	mov	r16,zero
   209ec:	0029883a 	mov	r20,zero
   209f0:	07000044 	movi	fp,1
   209f4:	003f6106 	br	2077c <__alt_data_end+0xfffe077c>
   209f8:	04c00304 	movi	r19,12
   209fc:	070000c4 	movi	fp,3
   20a00:	003f5e06 	br	2077c <__alt_data_end+0xfffe077c>
   20a04:	01400434 	movhi	r5,16
   20a08:	002b883a 	mov	r21,zero
   20a0c:	297fffc4 	addi	r5,r5,-1
   20a10:	053fffc4 	movi	r20,-1
   20a14:	0081ffc4 	movi	r2,2047
   20a18:	003f9806 	br	2087c <__alt_data_end+0xfffe087c>
   20a1c:	8023883a 	mov	r17,r16
   20a20:	a011883a 	mov	r8,r20
   20a24:	e00b883a 	mov	r5,fp
   20a28:	003f8a06 	br	20854 <__alt_data_end+0xfffe0854>
   20a2c:	8023883a 	mov	r17,r16
   20a30:	a011883a 	mov	r8,r20
   20a34:	482d883a 	mov	r22,r9
   20a38:	e00b883a 	mov	r5,fp
   20a3c:	003f8506 	br	20854 <__alt_data_end+0xfffe0854>
   20a40:	a00ad43a 	srli	r5,r20,16
   20a44:	401ad43a 	srli	r13,r8,16
   20a48:	a53fffcc 	andi	r20,r20,65535
   20a4c:	423fffcc 	andi	r8,r8,65535
   20a50:	4519383a 	mul	r12,r8,r20
   20a54:	4147383a 	mul	r3,r8,r5
   20a58:	6d09383a 	mul	r4,r13,r20
   20a5c:	600cd43a 	srli	r6,r12,16
   20a60:	2b5d383a 	mul	r14,r5,r13
   20a64:	20c9883a 	add	r4,r4,r3
   20a68:	310d883a 	add	r6,r6,r4
   20a6c:	30c0022e 	bgeu	r6,r3,20a78 <__muldf3+0x378>
   20a70:	00c00074 	movhi	r3,1
   20a74:	70dd883a 	add	r14,r14,r3
   20a78:	8826d43a 	srli	r19,r17,16
   20a7c:	8bffffcc 	andi	r15,r17,65535
   20a80:	7d23383a 	mul	r17,r15,r20
   20a84:	7949383a 	mul	r4,r15,r5
   20a88:	9d29383a 	mul	r20,r19,r20
   20a8c:	8814d43a 	srli	r10,r17,16
   20a90:	3012943a 	slli	r9,r6,16
   20a94:	a129883a 	add	r20,r20,r4
   20a98:	633fffcc 	andi	r12,r12,65535
   20a9c:	5515883a 	add	r10,r10,r20
   20aa0:	3006d43a 	srli	r3,r6,16
   20aa4:	4b13883a 	add	r9,r9,r12
   20aa8:	2ccb383a 	mul	r5,r5,r19
   20aac:	5100022e 	bgeu	r10,r4,20ab8 <__muldf3+0x3b8>
   20ab0:	01000074 	movhi	r4,1
   20ab4:	290b883a 	add	r5,r5,r4
   20ab8:	802ad43a 	srli	r21,r16,16
   20abc:	843fffcc 	andi	r16,r16,65535
   20ac0:	440d383a 	mul	r6,r8,r16
   20ac4:	4565383a 	mul	r18,r8,r21
   20ac8:	8349383a 	mul	r4,r16,r13
   20acc:	500e943a 	slli	r7,r10,16
   20ad0:	3010d43a 	srli	r8,r6,16
   20ad4:	5028d43a 	srli	r20,r10,16
   20ad8:	2489883a 	add	r4,r4,r18
   20adc:	8abfffcc 	andi	r10,r17,65535
   20ae0:	3a95883a 	add	r10,r7,r10
   20ae4:	4119883a 	add	r12,r8,r4
   20ae8:	a169883a 	add	r20,r20,r5
   20aec:	1a87883a 	add	r3,r3,r10
   20af0:	6d5b383a 	mul	r13,r13,r21
   20af4:	6480022e 	bgeu	r12,r18,20b00 <__muldf3+0x400>
   20af8:	01000074 	movhi	r4,1
   20afc:	691b883a 	add	r13,r13,r4
   20b00:	7c25383a 	mul	r18,r15,r16
   20b04:	7d4b383a 	mul	r5,r15,r21
   20b08:	84cf383a 	mul	r7,r16,r19
   20b0c:	901ed43a 	srli	r15,r18,16
   20b10:	6008d43a 	srli	r4,r12,16
   20b14:	6010943a 	slli	r8,r12,16
   20b18:	394f883a 	add	r7,r7,r5
   20b1c:	333fffcc 	andi	r12,r6,65535
   20b20:	79df883a 	add	r15,r15,r7
   20b24:	235b883a 	add	r13,r4,r13
   20b28:	9d63383a 	mul	r17,r19,r21
   20b2c:	4309883a 	add	r4,r8,r12
   20b30:	7940022e 	bgeu	r15,r5,20b3c <__muldf3+0x43c>
   20b34:	01400074 	movhi	r5,1
   20b38:	8963883a 	add	r17,r17,r5
   20b3c:	780a943a 	slli	r5,r15,16
   20b40:	91bfffcc 	andi	r6,r18,65535
   20b44:	70c7883a 	add	r3,r14,r3
   20b48:	298d883a 	add	r6,r5,r6
   20b4c:	1a8f803a 	cmpltu	r7,r3,r10
   20b50:	350b883a 	add	r5,r6,r20
   20b54:	20c7883a 	add	r3,r4,r3
   20b58:	3955883a 	add	r10,r7,r5
   20b5c:	1909803a 	cmpltu	r4,r3,r4
   20b60:	6a91883a 	add	r8,r13,r10
   20b64:	780cd43a 	srli	r6,r15,16
   20b68:	2219883a 	add	r12,r4,r8
   20b6c:	2d0b803a 	cmpltu	r5,r5,r20
   20b70:	51cf803a 	cmpltu	r7,r10,r7
   20b74:	29ceb03a 	or	r7,r5,r7
   20b78:	4351803a 	cmpltu	r8,r8,r13
   20b7c:	610b803a 	cmpltu	r5,r12,r4
   20b80:	4148b03a 	or	r4,r8,r5
   20b84:	398f883a 	add	r7,r7,r6
   20b88:	3909883a 	add	r4,r7,r4
   20b8c:	1810927a 	slli	r8,r3,9
   20b90:	2449883a 	add	r4,r4,r17
   20b94:	2008927a 	slli	r4,r4,9
   20b98:	6022d5fa 	srli	r17,r12,23
   20b9c:	1806d5fa 	srli	r3,r3,23
   20ba0:	4252b03a 	or	r9,r8,r9
   20ba4:	600a927a 	slli	r5,r12,9
   20ba8:	4810c03a 	cmpne	r8,r9,zero
   20bac:	2462b03a 	or	r17,r4,r17
   20bb0:	40c6b03a 	or	r3,r8,r3
   20bb4:	8900402c 	andhi	r4,r17,256
   20bb8:	1950b03a 	or	r8,r3,r5
   20bbc:	20000726 	beq	r4,zero,20bdc <__muldf3+0x4dc>
   20bc0:	4006d07a 	srli	r3,r8,1
   20bc4:	880497fa 	slli	r2,r17,31
   20bc8:	4200004c 	andi	r8,r8,1
   20bcc:	8822d07a 	srli	r17,r17,1
   20bd0:	1a10b03a 	or	r8,r3,r8
   20bd4:	1210b03a 	or	r8,r2,r8
   20bd8:	5805883a 	mov	r2,r11
   20bdc:	1140ffc4 	addi	r5,r2,1023
   20be0:	0140440e 	bge	zero,r5,20cf4 <__muldf3+0x5f4>
   20be4:	40c001cc 	andi	r3,r8,7
   20be8:	18000726 	beq	r3,zero,20c08 <__muldf3+0x508>
   20bec:	40c003cc 	andi	r3,r8,15
   20bf0:	01000104 	movi	r4,4
   20bf4:	19000426 	beq	r3,r4,20c08 <__muldf3+0x508>
   20bf8:	4107883a 	add	r3,r8,r4
   20bfc:	1a11803a 	cmpltu	r8,r3,r8
   20c00:	8a23883a 	add	r17,r17,r8
   20c04:	1811883a 	mov	r8,r3
   20c08:	88c0402c 	andhi	r3,r17,256
   20c0c:	18000426 	beq	r3,zero,20c20 <__muldf3+0x520>
   20c10:	11410004 	addi	r5,r2,1024
   20c14:	00bfc034 	movhi	r2,65280
   20c18:	10bfffc4 	addi	r2,r2,-1
   20c1c:	88a2703a 	and	r17,r17,r2
   20c20:	0081ff84 	movi	r2,2046
   20c24:	117f6416 	blt	r2,r5,209b8 <__alt_data_end+0xfffe09b8>
   20c28:	8828977a 	slli	r20,r17,29
   20c2c:	4010d0fa 	srli	r8,r8,3
   20c30:	8822927a 	slli	r17,r17,9
   20c34:	2881ffcc 	andi	r2,r5,2047
   20c38:	a228b03a 	or	r20,r20,r8
   20c3c:	880ad33a 	srli	r5,r17,12
   20c40:	b02b883a 	mov	r21,r22
   20c44:	003f0d06 	br	2087c <__alt_data_end+0xfffe087c>
   20c48:	8080022c 	andhi	r2,r16,8
   20c4c:	10000926 	beq	r2,zero,20c74 <__muldf3+0x574>
   20c50:	8880022c 	andhi	r2,r17,8
   20c54:	1000071e 	bne	r2,zero,20c74 <__muldf3+0x574>
   20c58:	00800434 	movhi	r2,16
   20c5c:	89400234 	orhi	r5,r17,8
   20c60:	10bfffc4 	addi	r2,r2,-1
   20c64:	b82b883a 	mov	r21,r23
   20c68:	288a703a 	and	r5,r5,r2
   20c6c:	4029883a 	mov	r20,r8
   20c70:	003f6806 	br	20a14 <__alt_data_end+0xfffe0a14>
   20c74:	00800434 	movhi	r2,16
   20c78:	81400234 	orhi	r5,r16,8
   20c7c:	10bfffc4 	addi	r2,r2,-1
   20c80:	288a703a 	and	r5,r5,r2
   20c84:	003f6306 	br	20a14 <__alt_data_end+0xfffe0a14>
   20c88:	147ff604 	addi	r17,r2,-40
   20c8c:	3462983a 	sll	r17,r6,r17
   20c90:	0011883a 	mov	r8,zero
   20c94:	003f4406 	br	209a8 <__alt_data_end+0xfffe09a8>
   20c98:	3009883a 	mov	r4,r6
   20c9c:	d9800215 	stw	r6,8(sp)
   20ca0:	da400115 	stw	r9,4(sp)
   20ca4:	da800015 	stw	r10,0(sp)
   20ca8:	002183c0 	call	2183c <__clzsi2>
   20cac:	10800804 	addi	r2,r2,32
   20cb0:	da800017 	ldw	r10,0(sp)
   20cb4:	da400117 	ldw	r9,4(sp)
   20cb8:	d9800217 	ldw	r6,8(sp)
   20cbc:	003f3006 	br	20980 <__alt_data_end+0xfffe0980>
   20cc0:	143ff604 	addi	r16,r2,-40
   20cc4:	9c20983a 	sll	r16,r19,r16
   20cc8:	0029883a 	mov	r20,zero
   20ccc:	003f1606 	br	20928 <__alt_data_end+0xfffe0928>
   20cd0:	d9800215 	stw	r6,8(sp)
   20cd4:	d9c00015 	stw	r7,0(sp)
   20cd8:	da400115 	stw	r9,4(sp)
   20cdc:	002183c0 	call	2183c <__clzsi2>
   20ce0:	10800804 	addi	r2,r2,32
   20ce4:	da400117 	ldw	r9,4(sp)
   20ce8:	d9c00017 	ldw	r7,0(sp)
   20cec:	d9800217 	ldw	r6,8(sp)
   20cf0:	003f0306 	br	20900 <__alt_data_end+0xfffe0900>
   20cf4:	00c00044 	movi	r3,1
   20cf8:	1947c83a 	sub	r3,r3,r5
   20cfc:	00800e04 	movi	r2,56
   20d00:	10feda16 	blt	r2,r3,2086c <__alt_data_end+0xfffe086c>
   20d04:	008007c4 	movi	r2,31
   20d08:	10c01b16 	blt	r2,r3,20d78 <__muldf3+0x678>
   20d0c:	00800804 	movi	r2,32
   20d10:	10c5c83a 	sub	r2,r2,r3
   20d14:	888a983a 	sll	r5,r17,r2
   20d18:	40c8d83a 	srl	r4,r8,r3
   20d1c:	4084983a 	sll	r2,r8,r2
   20d20:	88e2d83a 	srl	r17,r17,r3
   20d24:	2906b03a 	or	r3,r5,r4
   20d28:	1004c03a 	cmpne	r2,r2,zero
   20d2c:	1886b03a 	or	r3,r3,r2
   20d30:	188001cc 	andi	r2,r3,7
   20d34:	10000726 	beq	r2,zero,20d54 <__muldf3+0x654>
   20d38:	188003cc 	andi	r2,r3,15
   20d3c:	01000104 	movi	r4,4
   20d40:	11000426 	beq	r2,r4,20d54 <__muldf3+0x654>
   20d44:	1805883a 	mov	r2,r3
   20d48:	10c00104 	addi	r3,r2,4
   20d4c:	1885803a 	cmpltu	r2,r3,r2
   20d50:	88a3883a 	add	r17,r17,r2
   20d54:	8880202c 	andhi	r2,r17,128
   20d58:	10001c26 	beq	r2,zero,20dcc <__muldf3+0x6cc>
   20d5c:	b02b883a 	mov	r21,r22
   20d60:	00800044 	movi	r2,1
   20d64:	000b883a 	mov	r5,zero
   20d68:	0029883a 	mov	r20,zero
   20d6c:	003ec306 	br	2087c <__alt_data_end+0xfffe087c>
   20d70:	5805883a 	mov	r2,r11
   20d74:	003f9906 	br	20bdc <__alt_data_end+0xfffe0bdc>
   20d78:	00bff844 	movi	r2,-31
   20d7c:	1145c83a 	sub	r2,r2,r5
   20d80:	8888d83a 	srl	r4,r17,r2
   20d84:	00800804 	movi	r2,32
   20d88:	18801a26 	beq	r3,r2,20df4 <__muldf3+0x6f4>
   20d8c:	00801004 	movi	r2,64
   20d90:	10c5c83a 	sub	r2,r2,r3
   20d94:	8884983a 	sll	r2,r17,r2
   20d98:	1204b03a 	or	r2,r2,r8
   20d9c:	1004c03a 	cmpne	r2,r2,zero
   20da0:	2084b03a 	or	r2,r4,r2
   20da4:	144001cc 	andi	r17,r2,7
   20da8:	88000d1e 	bne	r17,zero,20de0 <__muldf3+0x6e0>
   20dac:	000b883a 	mov	r5,zero
   20db0:	1028d0fa 	srli	r20,r2,3
   20db4:	b02b883a 	mov	r21,r22
   20db8:	0005883a 	mov	r2,zero
   20dbc:	a468b03a 	or	r20,r20,r17
   20dc0:	003eae06 	br	2087c <__alt_data_end+0xfffe087c>
   20dc4:	1007883a 	mov	r3,r2
   20dc8:	0023883a 	mov	r17,zero
   20dcc:	880a927a 	slli	r5,r17,9
   20dd0:	1805883a 	mov	r2,r3
   20dd4:	8822977a 	slli	r17,r17,29
   20dd8:	280ad33a 	srli	r5,r5,12
   20ddc:	003ff406 	br	20db0 <__alt_data_end+0xfffe0db0>
   20de0:	10c003cc 	andi	r3,r2,15
   20de4:	01000104 	movi	r4,4
   20de8:	193ff626 	beq	r3,r4,20dc4 <__alt_data_end+0xfffe0dc4>
   20dec:	0023883a 	mov	r17,zero
   20df0:	003fd506 	br	20d48 <__alt_data_end+0xfffe0d48>
   20df4:	0005883a 	mov	r2,zero
   20df8:	003fe706 	br	20d98 <__alt_data_end+0xfffe0d98>
   20dfc:	00800434 	movhi	r2,16
   20e00:	89400234 	orhi	r5,r17,8
   20e04:	10bfffc4 	addi	r2,r2,-1
   20e08:	b02b883a 	mov	r21,r22
   20e0c:	288a703a 	and	r5,r5,r2
   20e10:	4029883a 	mov	r20,r8
   20e14:	003eff06 	br	20a14 <__alt_data_end+0xfffe0a14>

00020e18 <__subdf3>:
   20e18:	02000434 	movhi	r8,16
   20e1c:	423fffc4 	addi	r8,r8,-1
   20e20:	defffb04 	addi	sp,sp,-20
   20e24:	2a14703a 	and	r10,r5,r8
   20e28:	3812d53a 	srli	r9,r7,20
   20e2c:	3a10703a 	and	r8,r7,r8
   20e30:	2006d77a 	srli	r3,r4,29
   20e34:	3004d77a 	srli	r2,r6,29
   20e38:	dc000015 	stw	r16,0(sp)
   20e3c:	501490fa 	slli	r10,r10,3
   20e40:	2820d53a 	srli	r16,r5,20
   20e44:	401090fa 	slli	r8,r8,3
   20e48:	dc800215 	stw	r18,8(sp)
   20e4c:	dc400115 	stw	r17,4(sp)
   20e50:	dfc00415 	stw	ra,16(sp)
   20e54:	202290fa 	slli	r17,r4,3
   20e58:	dcc00315 	stw	r19,12(sp)
   20e5c:	4a41ffcc 	andi	r9,r9,2047
   20e60:	0101ffc4 	movi	r4,2047
   20e64:	2824d7fa 	srli	r18,r5,31
   20e68:	8401ffcc 	andi	r16,r16,2047
   20e6c:	50c6b03a 	or	r3,r10,r3
   20e70:	380ed7fa 	srli	r7,r7,31
   20e74:	408ab03a 	or	r5,r8,r2
   20e78:	300c90fa 	slli	r6,r6,3
   20e7c:	49009626 	beq	r9,r4,210d8 <__subdf3+0x2c0>
   20e80:	39c0005c 	xori	r7,r7,1
   20e84:	8245c83a 	sub	r2,r16,r9
   20e88:	3c807426 	beq	r7,r18,2105c <__subdf3+0x244>
   20e8c:	0080af0e 	bge	zero,r2,2114c <__subdf3+0x334>
   20e90:	48002a1e 	bne	r9,zero,20f3c <__subdf3+0x124>
   20e94:	2988b03a 	or	r4,r5,r6
   20e98:	20009a1e 	bne	r4,zero,21104 <__subdf3+0x2ec>
   20e9c:	888001cc 	andi	r2,r17,7
   20ea0:	10000726 	beq	r2,zero,20ec0 <__subdf3+0xa8>
   20ea4:	888003cc 	andi	r2,r17,15
   20ea8:	01000104 	movi	r4,4
   20eac:	11000426 	beq	r2,r4,20ec0 <__subdf3+0xa8>
   20eb0:	890b883a 	add	r5,r17,r4
   20eb4:	2c63803a 	cmpltu	r17,r5,r17
   20eb8:	1c47883a 	add	r3,r3,r17
   20ebc:	2823883a 	mov	r17,r5
   20ec0:	1880202c 	andhi	r2,r3,128
   20ec4:	10005926 	beq	r2,zero,2102c <__subdf3+0x214>
   20ec8:	84000044 	addi	r16,r16,1
   20ecc:	0081ffc4 	movi	r2,2047
   20ed0:	8080be26 	beq	r16,r2,211cc <__subdf3+0x3b4>
   20ed4:	017fe034 	movhi	r5,65408
   20ed8:	297fffc4 	addi	r5,r5,-1
   20edc:	1946703a 	and	r3,r3,r5
   20ee0:	1804977a 	slli	r2,r3,29
   20ee4:	1806927a 	slli	r3,r3,9
   20ee8:	8822d0fa 	srli	r17,r17,3
   20eec:	8401ffcc 	andi	r16,r16,2047
   20ef0:	180ad33a 	srli	r5,r3,12
   20ef4:	9100004c 	andi	r4,r18,1
   20ef8:	1444b03a 	or	r2,r2,r17
   20efc:	80c1ffcc 	andi	r3,r16,2047
   20f00:	1820953a 	slli	r16,r3,20
   20f04:	20c03fcc 	andi	r3,r4,255
   20f08:	180897fa 	slli	r4,r3,31
   20f0c:	00c00434 	movhi	r3,16
   20f10:	18ffffc4 	addi	r3,r3,-1
   20f14:	28c6703a 	and	r3,r5,r3
   20f18:	1c06b03a 	or	r3,r3,r16
   20f1c:	1906b03a 	or	r3,r3,r4
   20f20:	dfc00417 	ldw	ra,16(sp)
   20f24:	dcc00317 	ldw	r19,12(sp)
   20f28:	dc800217 	ldw	r18,8(sp)
   20f2c:	dc400117 	ldw	r17,4(sp)
   20f30:	dc000017 	ldw	r16,0(sp)
   20f34:	dec00504 	addi	sp,sp,20
   20f38:	f800283a 	ret
   20f3c:	0101ffc4 	movi	r4,2047
   20f40:	813fd626 	beq	r16,r4,20e9c <__alt_data_end+0xfffe0e9c>
   20f44:	29402034 	orhi	r5,r5,128
   20f48:	01000e04 	movi	r4,56
   20f4c:	2080a316 	blt	r4,r2,211dc <__subdf3+0x3c4>
   20f50:	010007c4 	movi	r4,31
   20f54:	2080c616 	blt	r4,r2,21270 <__subdf3+0x458>
   20f58:	01000804 	movi	r4,32
   20f5c:	2089c83a 	sub	r4,r4,r2
   20f60:	2910983a 	sll	r8,r5,r4
   20f64:	308ed83a 	srl	r7,r6,r2
   20f68:	3108983a 	sll	r4,r6,r4
   20f6c:	2884d83a 	srl	r2,r5,r2
   20f70:	41ccb03a 	or	r6,r8,r7
   20f74:	2008c03a 	cmpne	r4,r4,zero
   20f78:	310cb03a 	or	r6,r6,r4
   20f7c:	898dc83a 	sub	r6,r17,r6
   20f80:	89a3803a 	cmpltu	r17,r17,r6
   20f84:	1887c83a 	sub	r3,r3,r2
   20f88:	1c47c83a 	sub	r3,r3,r17
   20f8c:	3023883a 	mov	r17,r6
   20f90:	1880202c 	andhi	r2,r3,128
   20f94:	10002326 	beq	r2,zero,21024 <__subdf3+0x20c>
   20f98:	04c02034 	movhi	r19,128
   20f9c:	9cffffc4 	addi	r19,r19,-1
   20fa0:	1ce6703a 	and	r19,r3,r19
   20fa4:	98007a26 	beq	r19,zero,21190 <__subdf3+0x378>
   20fa8:	9809883a 	mov	r4,r19
   20fac:	002183c0 	call	2183c <__clzsi2>
   20fb0:	113ffe04 	addi	r4,r2,-8
   20fb4:	00c007c4 	movi	r3,31
   20fb8:	19007b16 	blt	r3,r4,211a8 <__subdf3+0x390>
   20fbc:	00800804 	movi	r2,32
   20fc0:	1105c83a 	sub	r2,r2,r4
   20fc4:	8884d83a 	srl	r2,r17,r2
   20fc8:	9906983a 	sll	r3,r19,r4
   20fcc:	8922983a 	sll	r17,r17,r4
   20fd0:	10c4b03a 	or	r2,r2,r3
   20fd4:	24007816 	blt	r4,r16,211b8 <__subdf3+0x3a0>
   20fd8:	2421c83a 	sub	r16,r4,r16
   20fdc:	80c00044 	addi	r3,r16,1
   20fe0:	010007c4 	movi	r4,31
   20fe4:	20c09516 	blt	r4,r3,2123c <__subdf3+0x424>
   20fe8:	01400804 	movi	r5,32
   20fec:	28cbc83a 	sub	r5,r5,r3
   20ff0:	88c8d83a 	srl	r4,r17,r3
   20ff4:	8962983a 	sll	r17,r17,r5
   20ff8:	114a983a 	sll	r5,r2,r5
   20ffc:	10c6d83a 	srl	r3,r2,r3
   21000:	8804c03a 	cmpne	r2,r17,zero
   21004:	290ab03a 	or	r5,r5,r4
   21008:	28a2b03a 	or	r17,r5,r2
   2100c:	0021883a 	mov	r16,zero
   21010:	003fa206 	br	20e9c <__alt_data_end+0xfffe0e9c>
   21014:	2090b03a 	or	r8,r4,r2
   21018:	40018e26 	beq	r8,zero,21654 <__subdf3+0x83c>
   2101c:	1007883a 	mov	r3,r2
   21020:	2023883a 	mov	r17,r4
   21024:	888001cc 	andi	r2,r17,7
   21028:	103f9e1e 	bne	r2,zero,20ea4 <__alt_data_end+0xfffe0ea4>
   2102c:	1804977a 	slli	r2,r3,29
   21030:	8822d0fa 	srli	r17,r17,3
   21034:	1810d0fa 	srli	r8,r3,3
   21038:	9100004c 	andi	r4,r18,1
   2103c:	1444b03a 	or	r2,r2,r17
   21040:	00c1ffc4 	movi	r3,2047
   21044:	80c02826 	beq	r16,r3,210e8 <__subdf3+0x2d0>
   21048:	01400434 	movhi	r5,16
   2104c:	297fffc4 	addi	r5,r5,-1
   21050:	80e0703a 	and	r16,r16,r3
   21054:	414a703a 	and	r5,r8,r5
   21058:	003fa806 	br	20efc <__alt_data_end+0xfffe0efc>
   2105c:	0080630e 	bge	zero,r2,211ec <__subdf3+0x3d4>
   21060:	48003026 	beq	r9,zero,21124 <__subdf3+0x30c>
   21064:	0101ffc4 	movi	r4,2047
   21068:	813f8c26 	beq	r16,r4,20e9c <__alt_data_end+0xfffe0e9c>
   2106c:	29402034 	orhi	r5,r5,128
   21070:	01000e04 	movi	r4,56
   21074:	2080a90e 	bge	r4,r2,2131c <__subdf3+0x504>
   21078:	298cb03a 	or	r6,r5,r6
   2107c:	3012c03a 	cmpne	r9,r6,zero
   21080:	0005883a 	mov	r2,zero
   21084:	4c53883a 	add	r9,r9,r17
   21088:	4c63803a 	cmpltu	r17,r9,r17
   2108c:	10c7883a 	add	r3,r2,r3
   21090:	88c7883a 	add	r3,r17,r3
   21094:	4823883a 	mov	r17,r9
   21098:	1880202c 	andhi	r2,r3,128
   2109c:	1000d026 	beq	r2,zero,213e0 <__subdf3+0x5c8>
   210a0:	84000044 	addi	r16,r16,1
   210a4:	0081ffc4 	movi	r2,2047
   210a8:	8080fe26 	beq	r16,r2,214a4 <__subdf3+0x68c>
   210ac:	00bfe034 	movhi	r2,65408
   210b0:	10bfffc4 	addi	r2,r2,-1
   210b4:	1886703a 	and	r3,r3,r2
   210b8:	880ad07a 	srli	r5,r17,1
   210bc:	180497fa 	slli	r2,r3,31
   210c0:	8900004c 	andi	r4,r17,1
   210c4:	2922b03a 	or	r17,r5,r4
   210c8:	1806d07a 	srli	r3,r3,1
   210cc:	1462b03a 	or	r17,r2,r17
   210d0:	3825883a 	mov	r18,r7
   210d4:	003f7106 	br	20e9c <__alt_data_end+0xfffe0e9c>
   210d8:	2984b03a 	or	r2,r5,r6
   210dc:	103f6826 	beq	r2,zero,20e80 <__alt_data_end+0xfffe0e80>
   210e0:	39c03fcc 	andi	r7,r7,255
   210e4:	003f6706 	br	20e84 <__alt_data_end+0xfffe0e84>
   210e8:	4086b03a 	or	r3,r8,r2
   210ec:	18015226 	beq	r3,zero,21638 <__subdf3+0x820>
   210f0:	00c00434 	movhi	r3,16
   210f4:	41400234 	orhi	r5,r8,8
   210f8:	18ffffc4 	addi	r3,r3,-1
   210fc:	28ca703a 	and	r5,r5,r3
   21100:	003f7e06 	br	20efc <__alt_data_end+0xfffe0efc>
   21104:	10bfffc4 	addi	r2,r2,-1
   21108:	1000491e 	bne	r2,zero,21230 <__subdf3+0x418>
   2110c:	898fc83a 	sub	r7,r17,r6
   21110:	89e3803a 	cmpltu	r17,r17,r7
   21114:	1947c83a 	sub	r3,r3,r5
   21118:	1c47c83a 	sub	r3,r3,r17
   2111c:	3823883a 	mov	r17,r7
   21120:	003f9b06 	br	20f90 <__alt_data_end+0xfffe0f90>
   21124:	2988b03a 	or	r4,r5,r6
   21128:	203f5c26 	beq	r4,zero,20e9c <__alt_data_end+0xfffe0e9c>
   2112c:	10bfffc4 	addi	r2,r2,-1
   21130:	1000931e 	bne	r2,zero,21380 <__subdf3+0x568>
   21134:	898d883a 	add	r6,r17,r6
   21138:	3463803a 	cmpltu	r17,r6,r17
   2113c:	1947883a 	add	r3,r3,r5
   21140:	88c7883a 	add	r3,r17,r3
   21144:	3023883a 	mov	r17,r6
   21148:	003fd306 	br	21098 <__alt_data_end+0xfffe1098>
   2114c:	1000541e 	bne	r2,zero,212a0 <__subdf3+0x488>
   21150:	80800044 	addi	r2,r16,1
   21154:	1081ffcc 	andi	r2,r2,2047
   21158:	01000044 	movi	r4,1
   2115c:	2080a20e 	bge	r4,r2,213e8 <__subdf3+0x5d0>
   21160:	8989c83a 	sub	r4,r17,r6
   21164:	8905803a 	cmpltu	r2,r17,r4
   21168:	1967c83a 	sub	r19,r3,r5
   2116c:	98a7c83a 	sub	r19,r19,r2
   21170:	9880202c 	andhi	r2,r19,128
   21174:	10006326 	beq	r2,zero,21304 <__subdf3+0x4ec>
   21178:	3463c83a 	sub	r17,r6,r17
   2117c:	28c7c83a 	sub	r3,r5,r3
   21180:	344d803a 	cmpltu	r6,r6,r17
   21184:	19a7c83a 	sub	r19,r3,r6
   21188:	3825883a 	mov	r18,r7
   2118c:	983f861e 	bne	r19,zero,20fa8 <__alt_data_end+0xfffe0fa8>
   21190:	8809883a 	mov	r4,r17
   21194:	002183c0 	call	2183c <__clzsi2>
   21198:	10800804 	addi	r2,r2,32
   2119c:	113ffe04 	addi	r4,r2,-8
   211a0:	00c007c4 	movi	r3,31
   211a4:	193f850e 	bge	r3,r4,20fbc <__alt_data_end+0xfffe0fbc>
   211a8:	10bff604 	addi	r2,r2,-40
   211ac:	8884983a 	sll	r2,r17,r2
   211b0:	0023883a 	mov	r17,zero
   211b4:	243f880e 	bge	r4,r16,20fd8 <__alt_data_end+0xfffe0fd8>
   211b8:	00ffe034 	movhi	r3,65408
   211bc:	18ffffc4 	addi	r3,r3,-1
   211c0:	8121c83a 	sub	r16,r16,r4
   211c4:	10c6703a 	and	r3,r2,r3
   211c8:	003f3406 	br	20e9c <__alt_data_end+0xfffe0e9c>
   211cc:	9100004c 	andi	r4,r18,1
   211d0:	000b883a 	mov	r5,zero
   211d4:	0005883a 	mov	r2,zero
   211d8:	003f4806 	br	20efc <__alt_data_end+0xfffe0efc>
   211dc:	298cb03a 	or	r6,r5,r6
   211e0:	300cc03a 	cmpne	r6,r6,zero
   211e4:	0005883a 	mov	r2,zero
   211e8:	003f6406 	br	20f7c <__alt_data_end+0xfffe0f7c>
   211ec:	10009a1e 	bne	r2,zero,21458 <__subdf3+0x640>
   211f0:	82400044 	addi	r9,r16,1
   211f4:	4881ffcc 	andi	r2,r9,2047
   211f8:	02800044 	movi	r10,1
   211fc:	5080670e 	bge	r10,r2,2139c <__subdf3+0x584>
   21200:	0081ffc4 	movi	r2,2047
   21204:	4880af26 	beq	r9,r2,214c4 <__subdf3+0x6ac>
   21208:	898d883a 	add	r6,r17,r6
   2120c:	1945883a 	add	r2,r3,r5
   21210:	3447803a 	cmpltu	r3,r6,r17
   21214:	1887883a 	add	r3,r3,r2
   21218:	182297fa 	slli	r17,r3,31
   2121c:	300cd07a 	srli	r6,r6,1
   21220:	1806d07a 	srli	r3,r3,1
   21224:	4821883a 	mov	r16,r9
   21228:	89a2b03a 	or	r17,r17,r6
   2122c:	003f1b06 	br	20e9c <__alt_data_end+0xfffe0e9c>
   21230:	0101ffc4 	movi	r4,2047
   21234:	813f441e 	bne	r16,r4,20f48 <__alt_data_end+0xfffe0f48>
   21238:	003f1806 	br	20e9c <__alt_data_end+0xfffe0e9c>
   2123c:	843ff844 	addi	r16,r16,-31
   21240:	01400804 	movi	r5,32
   21244:	1408d83a 	srl	r4,r2,r16
   21248:	19405026 	beq	r3,r5,2138c <__subdf3+0x574>
   2124c:	01401004 	movi	r5,64
   21250:	28c7c83a 	sub	r3,r5,r3
   21254:	10c4983a 	sll	r2,r2,r3
   21258:	88a2b03a 	or	r17,r17,r2
   2125c:	8822c03a 	cmpne	r17,r17,zero
   21260:	2462b03a 	or	r17,r4,r17
   21264:	0007883a 	mov	r3,zero
   21268:	0021883a 	mov	r16,zero
   2126c:	003f6d06 	br	21024 <__alt_data_end+0xfffe1024>
   21270:	11fff804 	addi	r7,r2,-32
   21274:	01000804 	movi	r4,32
   21278:	29ced83a 	srl	r7,r5,r7
   2127c:	11004526 	beq	r2,r4,21394 <__subdf3+0x57c>
   21280:	01001004 	movi	r4,64
   21284:	2089c83a 	sub	r4,r4,r2
   21288:	2904983a 	sll	r2,r5,r4
   2128c:	118cb03a 	or	r6,r2,r6
   21290:	300cc03a 	cmpne	r6,r6,zero
   21294:	398cb03a 	or	r6,r7,r6
   21298:	0005883a 	mov	r2,zero
   2129c:	003f3706 	br	20f7c <__alt_data_end+0xfffe0f7c>
   212a0:	80002a26 	beq	r16,zero,2134c <__subdf3+0x534>
   212a4:	0101ffc4 	movi	r4,2047
   212a8:	49006626 	beq	r9,r4,21444 <__subdf3+0x62c>
   212ac:	0085c83a 	sub	r2,zero,r2
   212b0:	18c02034 	orhi	r3,r3,128
   212b4:	01000e04 	movi	r4,56
   212b8:	20807e16 	blt	r4,r2,214b4 <__subdf3+0x69c>
   212bc:	010007c4 	movi	r4,31
   212c0:	2080e716 	blt	r4,r2,21660 <__subdf3+0x848>
   212c4:	01000804 	movi	r4,32
   212c8:	2089c83a 	sub	r4,r4,r2
   212cc:	1914983a 	sll	r10,r3,r4
   212d0:	8890d83a 	srl	r8,r17,r2
   212d4:	8908983a 	sll	r4,r17,r4
   212d8:	1884d83a 	srl	r2,r3,r2
   212dc:	5222b03a 	or	r17,r10,r8
   212e0:	2006c03a 	cmpne	r3,r4,zero
   212e4:	88e2b03a 	or	r17,r17,r3
   212e8:	3463c83a 	sub	r17,r6,r17
   212ec:	2885c83a 	sub	r2,r5,r2
   212f0:	344d803a 	cmpltu	r6,r6,r17
   212f4:	1187c83a 	sub	r3,r2,r6
   212f8:	4821883a 	mov	r16,r9
   212fc:	3825883a 	mov	r18,r7
   21300:	003f2306 	br	20f90 <__alt_data_end+0xfffe0f90>
   21304:	24d0b03a 	or	r8,r4,r19
   21308:	40001b1e 	bne	r8,zero,21378 <__subdf3+0x560>
   2130c:	0005883a 	mov	r2,zero
   21310:	0009883a 	mov	r4,zero
   21314:	0021883a 	mov	r16,zero
   21318:	003f4906 	br	21040 <__alt_data_end+0xfffe1040>
   2131c:	010007c4 	movi	r4,31
   21320:	20803a16 	blt	r4,r2,2140c <__subdf3+0x5f4>
   21324:	01000804 	movi	r4,32
   21328:	2089c83a 	sub	r4,r4,r2
   2132c:	2912983a 	sll	r9,r5,r4
   21330:	3090d83a 	srl	r8,r6,r2
   21334:	3108983a 	sll	r4,r6,r4
   21338:	2884d83a 	srl	r2,r5,r2
   2133c:	4a12b03a 	or	r9,r9,r8
   21340:	2008c03a 	cmpne	r4,r4,zero
   21344:	4912b03a 	or	r9,r9,r4
   21348:	003f4e06 	br	21084 <__alt_data_end+0xfffe1084>
   2134c:	1c48b03a 	or	r4,r3,r17
   21350:	20003c26 	beq	r4,zero,21444 <__subdf3+0x62c>
   21354:	0084303a 	nor	r2,zero,r2
   21358:	1000381e 	bne	r2,zero,2143c <__subdf3+0x624>
   2135c:	3463c83a 	sub	r17,r6,r17
   21360:	28c5c83a 	sub	r2,r5,r3
   21364:	344d803a 	cmpltu	r6,r6,r17
   21368:	1187c83a 	sub	r3,r2,r6
   2136c:	4821883a 	mov	r16,r9
   21370:	3825883a 	mov	r18,r7
   21374:	003f0606 	br	20f90 <__alt_data_end+0xfffe0f90>
   21378:	2023883a 	mov	r17,r4
   2137c:	003f0906 	br	20fa4 <__alt_data_end+0xfffe0fa4>
   21380:	0101ffc4 	movi	r4,2047
   21384:	813f3a1e 	bne	r16,r4,21070 <__alt_data_end+0xfffe1070>
   21388:	003ec406 	br	20e9c <__alt_data_end+0xfffe0e9c>
   2138c:	0005883a 	mov	r2,zero
   21390:	003fb106 	br	21258 <__alt_data_end+0xfffe1258>
   21394:	0005883a 	mov	r2,zero
   21398:	003fbc06 	br	2128c <__alt_data_end+0xfffe128c>
   2139c:	1c44b03a 	or	r2,r3,r17
   213a0:	80008e1e 	bne	r16,zero,215dc <__subdf3+0x7c4>
   213a4:	1000c826 	beq	r2,zero,216c8 <__subdf3+0x8b0>
   213a8:	2984b03a 	or	r2,r5,r6
   213ac:	103ebb26 	beq	r2,zero,20e9c <__alt_data_end+0xfffe0e9c>
   213b0:	8989883a 	add	r4,r17,r6
   213b4:	1945883a 	add	r2,r3,r5
   213b8:	2447803a 	cmpltu	r3,r4,r17
   213bc:	1887883a 	add	r3,r3,r2
   213c0:	1880202c 	andhi	r2,r3,128
   213c4:	2023883a 	mov	r17,r4
   213c8:	103f1626 	beq	r2,zero,21024 <__alt_data_end+0xfffe1024>
   213cc:	00bfe034 	movhi	r2,65408
   213d0:	10bfffc4 	addi	r2,r2,-1
   213d4:	5021883a 	mov	r16,r10
   213d8:	1886703a 	and	r3,r3,r2
   213dc:	003eaf06 	br	20e9c <__alt_data_end+0xfffe0e9c>
   213e0:	3825883a 	mov	r18,r7
   213e4:	003f0f06 	br	21024 <__alt_data_end+0xfffe1024>
   213e8:	1c44b03a 	or	r2,r3,r17
   213ec:	8000251e 	bne	r16,zero,21484 <__subdf3+0x66c>
   213f0:	1000661e 	bne	r2,zero,2158c <__subdf3+0x774>
   213f4:	2990b03a 	or	r8,r5,r6
   213f8:	40009626 	beq	r8,zero,21654 <__subdf3+0x83c>
   213fc:	2807883a 	mov	r3,r5
   21400:	3023883a 	mov	r17,r6
   21404:	3825883a 	mov	r18,r7
   21408:	003ea406 	br	20e9c <__alt_data_end+0xfffe0e9c>
   2140c:	127ff804 	addi	r9,r2,-32
   21410:	01000804 	movi	r4,32
   21414:	2a52d83a 	srl	r9,r5,r9
   21418:	11008c26 	beq	r2,r4,2164c <__subdf3+0x834>
   2141c:	01001004 	movi	r4,64
   21420:	2085c83a 	sub	r2,r4,r2
   21424:	2884983a 	sll	r2,r5,r2
   21428:	118cb03a 	or	r6,r2,r6
   2142c:	300cc03a 	cmpne	r6,r6,zero
   21430:	4992b03a 	or	r9,r9,r6
   21434:	0005883a 	mov	r2,zero
   21438:	003f1206 	br	21084 <__alt_data_end+0xfffe1084>
   2143c:	0101ffc4 	movi	r4,2047
   21440:	493f9c1e 	bne	r9,r4,212b4 <__alt_data_end+0xfffe12b4>
   21444:	2807883a 	mov	r3,r5
   21448:	3023883a 	mov	r17,r6
   2144c:	4821883a 	mov	r16,r9
   21450:	3825883a 	mov	r18,r7
   21454:	003e9106 	br	20e9c <__alt_data_end+0xfffe0e9c>
   21458:	80001f1e 	bne	r16,zero,214d8 <__subdf3+0x6c0>
   2145c:	1c48b03a 	or	r4,r3,r17
   21460:	20005a26 	beq	r4,zero,215cc <__subdf3+0x7b4>
   21464:	0084303a 	nor	r2,zero,r2
   21468:	1000561e 	bne	r2,zero,215c4 <__subdf3+0x7ac>
   2146c:	89a3883a 	add	r17,r17,r6
   21470:	1945883a 	add	r2,r3,r5
   21474:	898d803a 	cmpltu	r6,r17,r6
   21478:	3087883a 	add	r3,r6,r2
   2147c:	4821883a 	mov	r16,r9
   21480:	003f0506 	br	21098 <__alt_data_end+0xfffe1098>
   21484:	10002b1e 	bne	r2,zero,21534 <__subdf3+0x71c>
   21488:	2984b03a 	or	r2,r5,r6
   2148c:	10008026 	beq	r2,zero,21690 <__subdf3+0x878>
   21490:	2807883a 	mov	r3,r5
   21494:	3023883a 	mov	r17,r6
   21498:	3825883a 	mov	r18,r7
   2149c:	0401ffc4 	movi	r16,2047
   214a0:	003e7e06 	br	20e9c <__alt_data_end+0xfffe0e9c>
   214a4:	3809883a 	mov	r4,r7
   214a8:	0011883a 	mov	r8,zero
   214ac:	0005883a 	mov	r2,zero
   214b0:	003ee306 	br	21040 <__alt_data_end+0xfffe1040>
   214b4:	1c62b03a 	or	r17,r3,r17
   214b8:	8822c03a 	cmpne	r17,r17,zero
   214bc:	0005883a 	mov	r2,zero
   214c0:	003f8906 	br	212e8 <__alt_data_end+0xfffe12e8>
   214c4:	3809883a 	mov	r4,r7
   214c8:	4821883a 	mov	r16,r9
   214cc:	0011883a 	mov	r8,zero
   214d0:	0005883a 	mov	r2,zero
   214d4:	003eda06 	br	21040 <__alt_data_end+0xfffe1040>
   214d8:	0101ffc4 	movi	r4,2047
   214dc:	49003b26 	beq	r9,r4,215cc <__subdf3+0x7b4>
   214e0:	0085c83a 	sub	r2,zero,r2
   214e4:	18c02034 	orhi	r3,r3,128
   214e8:	01000e04 	movi	r4,56
   214ec:	20806e16 	blt	r4,r2,216a8 <__subdf3+0x890>
   214f0:	010007c4 	movi	r4,31
   214f4:	20807716 	blt	r4,r2,216d4 <__subdf3+0x8bc>
   214f8:	01000804 	movi	r4,32
   214fc:	2089c83a 	sub	r4,r4,r2
   21500:	1914983a 	sll	r10,r3,r4
   21504:	8890d83a 	srl	r8,r17,r2
   21508:	8908983a 	sll	r4,r17,r4
   2150c:	1884d83a 	srl	r2,r3,r2
   21510:	5222b03a 	or	r17,r10,r8
   21514:	2006c03a 	cmpne	r3,r4,zero
   21518:	88e2b03a 	or	r17,r17,r3
   2151c:	89a3883a 	add	r17,r17,r6
   21520:	1145883a 	add	r2,r2,r5
   21524:	898d803a 	cmpltu	r6,r17,r6
   21528:	3087883a 	add	r3,r6,r2
   2152c:	4821883a 	mov	r16,r9
   21530:	003ed906 	br	21098 <__alt_data_end+0xfffe1098>
   21534:	2984b03a 	or	r2,r5,r6
   21538:	10004226 	beq	r2,zero,21644 <__subdf3+0x82c>
   2153c:	1808d0fa 	srli	r4,r3,3
   21540:	8822d0fa 	srli	r17,r17,3
   21544:	1806977a 	slli	r3,r3,29
   21548:	2080022c 	andhi	r2,r4,8
   2154c:	1c62b03a 	or	r17,r3,r17
   21550:	10000826 	beq	r2,zero,21574 <__subdf3+0x75c>
   21554:	2812d0fa 	srli	r9,r5,3
   21558:	4880022c 	andhi	r2,r9,8
   2155c:	1000051e 	bne	r2,zero,21574 <__subdf3+0x75c>
   21560:	300cd0fa 	srli	r6,r6,3
   21564:	2804977a 	slli	r2,r5,29
   21568:	4809883a 	mov	r4,r9
   2156c:	3825883a 	mov	r18,r7
   21570:	11a2b03a 	or	r17,r2,r6
   21574:	8806d77a 	srli	r3,r17,29
   21578:	200890fa 	slli	r4,r4,3
   2157c:	882290fa 	slli	r17,r17,3
   21580:	0401ffc4 	movi	r16,2047
   21584:	1906b03a 	or	r3,r3,r4
   21588:	003e4406 	br	20e9c <__alt_data_end+0xfffe0e9c>
   2158c:	2984b03a 	or	r2,r5,r6
   21590:	103e4226 	beq	r2,zero,20e9c <__alt_data_end+0xfffe0e9c>
   21594:	8989c83a 	sub	r4,r17,r6
   21598:	8911803a 	cmpltu	r8,r17,r4
   2159c:	1945c83a 	sub	r2,r3,r5
   215a0:	1205c83a 	sub	r2,r2,r8
   215a4:	1200202c 	andhi	r8,r2,128
   215a8:	403e9a26 	beq	r8,zero,21014 <__alt_data_end+0xfffe1014>
   215ac:	3463c83a 	sub	r17,r6,r17
   215b0:	28c5c83a 	sub	r2,r5,r3
   215b4:	344d803a 	cmpltu	r6,r6,r17
   215b8:	1187c83a 	sub	r3,r2,r6
   215bc:	3825883a 	mov	r18,r7
   215c0:	003e3606 	br	20e9c <__alt_data_end+0xfffe0e9c>
   215c4:	0101ffc4 	movi	r4,2047
   215c8:	493fc71e 	bne	r9,r4,214e8 <__alt_data_end+0xfffe14e8>
   215cc:	2807883a 	mov	r3,r5
   215d0:	3023883a 	mov	r17,r6
   215d4:	4821883a 	mov	r16,r9
   215d8:	003e3006 	br	20e9c <__alt_data_end+0xfffe0e9c>
   215dc:	10003626 	beq	r2,zero,216b8 <__subdf3+0x8a0>
   215e0:	2984b03a 	or	r2,r5,r6
   215e4:	10001726 	beq	r2,zero,21644 <__subdf3+0x82c>
   215e8:	1808d0fa 	srli	r4,r3,3
   215ec:	8822d0fa 	srli	r17,r17,3
   215f0:	1806977a 	slli	r3,r3,29
   215f4:	2080022c 	andhi	r2,r4,8
   215f8:	1c62b03a 	or	r17,r3,r17
   215fc:	10000726 	beq	r2,zero,2161c <__subdf3+0x804>
   21600:	2812d0fa 	srli	r9,r5,3
   21604:	4880022c 	andhi	r2,r9,8
   21608:	1000041e 	bne	r2,zero,2161c <__subdf3+0x804>
   2160c:	300cd0fa 	srli	r6,r6,3
   21610:	2804977a 	slli	r2,r5,29
   21614:	4809883a 	mov	r4,r9
   21618:	11a2b03a 	or	r17,r2,r6
   2161c:	8806d77a 	srli	r3,r17,29
   21620:	200890fa 	slli	r4,r4,3
   21624:	882290fa 	slli	r17,r17,3
   21628:	3825883a 	mov	r18,r7
   2162c:	1906b03a 	or	r3,r3,r4
   21630:	0401ffc4 	movi	r16,2047
   21634:	003e1906 	br	20e9c <__alt_data_end+0xfffe0e9c>
   21638:	000b883a 	mov	r5,zero
   2163c:	0005883a 	mov	r2,zero
   21640:	003e2e06 	br	20efc <__alt_data_end+0xfffe0efc>
   21644:	0401ffc4 	movi	r16,2047
   21648:	003e1406 	br	20e9c <__alt_data_end+0xfffe0e9c>
   2164c:	0005883a 	mov	r2,zero
   21650:	003f7506 	br	21428 <__alt_data_end+0xfffe1428>
   21654:	0005883a 	mov	r2,zero
   21658:	0009883a 	mov	r4,zero
   2165c:	003e7806 	br	21040 <__alt_data_end+0xfffe1040>
   21660:	123ff804 	addi	r8,r2,-32
   21664:	01000804 	movi	r4,32
   21668:	1a10d83a 	srl	r8,r3,r8
   2166c:	11002526 	beq	r2,r4,21704 <__subdf3+0x8ec>
   21670:	01001004 	movi	r4,64
   21674:	2085c83a 	sub	r2,r4,r2
   21678:	1884983a 	sll	r2,r3,r2
   2167c:	1444b03a 	or	r2,r2,r17
   21680:	1004c03a 	cmpne	r2,r2,zero
   21684:	40a2b03a 	or	r17,r8,r2
   21688:	0005883a 	mov	r2,zero
   2168c:	003f1606 	br	212e8 <__alt_data_end+0xfffe12e8>
   21690:	02000434 	movhi	r8,16
   21694:	0009883a 	mov	r4,zero
   21698:	423fffc4 	addi	r8,r8,-1
   2169c:	00bfffc4 	movi	r2,-1
   216a0:	0401ffc4 	movi	r16,2047
   216a4:	003e6606 	br	21040 <__alt_data_end+0xfffe1040>
   216a8:	1c62b03a 	or	r17,r3,r17
   216ac:	8822c03a 	cmpne	r17,r17,zero
   216b0:	0005883a 	mov	r2,zero
   216b4:	003f9906 	br	2151c <__alt_data_end+0xfffe151c>
   216b8:	2807883a 	mov	r3,r5
   216bc:	3023883a 	mov	r17,r6
   216c0:	0401ffc4 	movi	r16,2047
   216c4:	003df506 	br	20e9c <__alt_data_end+0xfffe0e9c>
   216c8:	2807883a 	mov	r3,r5
   216cc:	3023883a 	mov	r17,r6
   216d0:	003df206 	br	20e9c <__alt_data_end+0xfffe0e9c>
   216d4:	123ff804 	addi	r8,r2,-32
   216d8:	01000804 	movi	r4,32
   216dc:	1a10d83a 	srl	r8,r3,r8
   216e0:	11000a26 	beq	r2,r4,2170c <__subdf3+0x8f4>
   216e4:	01001004 	movi	r4,64
   216e8:	2085c83a 	sub	r2,r4,r2
   216ec:	1884983a 	sll	r2,r3,r2
   216f0:	1444b03a 	or	r2,r2,r17
   216f4:	1004c03a 	cmpne	r2,r2,zero
   216f8:	40a2b03a 	or	r17,r8,r2
   216fc:	0005883a 	mov	r2,zero
   21700:	003f8606 	br	2151c <__alt_data_end+0xfffe151c>
   21704:	0005883a 	mov	r2,zero
   21708:	003fdc06 	br	2167c <__alt_data_end+0xfffe167c>
   2170c:	0005883a 	mov	r2,zero
   21710:	003ff706 	br	216f0 <__alt_data_end+0xfffe16f0>

00021714 <__fixdfsi>:
   21714:	280cd53a 	srli	r6,r5,20
   21718:	00c00434 	movhi	r3,16
   2171c:	18ffffc4 	addi	r3,r3,-1
   21720:	3181ffcc 	andi	r6,r6,2047
   21724:	01c0ff84 	movi	r7,1022
   21728:	28c6703a 	and	r3,r5,r3
   2172c:	280ad7fa 	srli	r5,r5,31
   21730:	3980120e 	bge	r7,r6,2177c <__fixdfsi+0x68>
   21734:	00810744 	movi	r2,1053
   21738:	11800c16 	blt	r2,r6,2176c <__fixdfsi+0x58>
   2173c:	00810cc4 	movi	r2,1075
   21740:	1185c83a 	sub	r2,r2,r6
   21744:	01c007c4 	movi	r7,31
   21748:	18c00434 	orhi	r3,r3,16
   2174c:	38800d16 	blt	r7,r2,21784 <__fixdfsi+0x70>
   21750:	31befb44 	addi	r6,r6,-1043
   21754:	2084d83a 	srl	r2,r4,r2
   21758:	1986983a 	sll	r3,r3,r6
   2175c:	1884b03a 	or	r2,r3,r2
   21760:	28000726 	beq	r5,zero,21780 <__fixdfsi+0x6c>
   21764:	0085c83a 	sub	r2,zero,r2
   21768:	f800283a 	ret
   2176c:	00a00034 	movhi	r2,32768
   21770:	10bfffc4 	addi	r2,r2,-1
   21774:	2885883a 	add	r2,r5,r2
   21778:	f800283a 	ret
   2177c:	0005883a 	mov	r2,zero
   21780:	f800283a 	ret
   21784:	008104c4 	movi	r2,1043
   21788:	1185c83a 	sub	r2,r2,r6
   2178c:	1884d83a 	srl	r2,r3,r2
   21790:	003ff306 	br	21760 <__alt_data_end+0xfffe1760>

00021794 <__floatunsidf>:
   21794:	defffe04 	addi	sp,sp,-8
   21798:	dc000015 	stw	r16,0(sp)
   2179c:	dfc00115 	stw	ra,4(sp)
   217a0:	2021883a 	mov	r16,r4
   217a4:	20002226 	beq	r4,zero,21830 <__floatunsidf+0x9c>
   217a8:	002183c0 	call	2183c <__clzsi2>
   217ac:	01010784 	movi	r4,1054
   217b0:	2089c83a 	sub	r4,r4,r2
   217b4:	01810cc4 	movi	r6,1075
   217b8:	310dc83a 	sub	r6,r6,r4
   217bc:	00c007c4 	movi	r3,31
   217c0:	1980120e 	bge	r3,r6,2180c <__floatunsidf+0x78>
   217c4:	00c104c4 	movi	r3,1043
   217c8:	1907c83a 	sub	r3,r3,r4
   217cc:	80ca983a 	sll	r5,r16,r3
   217d0:	00800434 	movhi	r2,16
   217d4:	10bfffc4 	addi	r2,r2,-1
   217d8:	2101ffcc 	andi	r4,r4,2047
   217dc:	0021883a 	mov	r16,zero
   217e0:	288a703a 	and	r5,r5,r2
   217e4:	2008953a 	slli	r4,r4,20
   217e8:	00c00434 	movhi	r3,16
   217ec:	18ffffc4 	addi	r3,r3,-1
   217f0:	28c6703a 	and	r3,r5,r3
   217f4:	8005883a 	mov	r2,r16
   217f8:	1906b03a 	or	r3,r3,r4
   217fc:	dfc00117 	ldw	ra,4(sp)
   21800:	dc000017 	ldw	r16,0(sp)
   21804:	dec00204 	addi	sp,sp,8
   21808:	f800283a 	ret
   2180c:	00c002c4 	movi	r3,11
   21810:	188bc83a 	sub	r5,r3,r2
   21814:	814ad83a 	srl	r5,r16,r5
   21818:	00c00434 	movhi	r3,16
   2181c:	18ffffc4 	addi	r3,r3,-1
   21820:	81a0983a 	sll	r16,r16,r6
   21824:	2101ffcc 	andi	r4,r4,2047
   21828:	28ca703a 	and	r5,r5,r3
   2182c:	003fed06 	br	217e4 <__alt_data_end+0xfffe17e4>
   21830:	0009883a 	mov	r4,zero
   21834:	000b883a 	mov	r5,zero
   21838:	003fea06 	br	217e4 <__alt_data_end+0xfffe17e4>

0002183c <__clzsi2>:
   2183c:	00bfffd4 	movui	r2,65535
   21840:	11000536 	bltu	r2,r4,21858 <__clzsi2+0x1c>
   21844:	00803fc4 	movi	r2,255
   21848:	11000f36 	bltu	r2,r4,21888 <__clzsi2+0x4c>
   2184c:	00800804 	movi	r2,32
   21850:	0007883a 	mov	r3,zero
   21854:	00000506 	br	2186c <__clzsi2+0x30>
   21858:	00804034 	movhi	r2,256
   2185c:	10bfffc4 	addi	r2,r2,-1
   21860:	11000c2e 	bgeu	r2,r4,21894 <__clzsi2+0x58>
   21864:	00800204 	movi	r2,8
   21868:	00c00604 	movi	r3,24
   2186c:	20c8d83a 	srl	r4,r4,r3
   21870:	00c000b4 	movhi	r3,2
   21874:	18ceb804 	addi	r3,r3,15072
   21878:	1909883a 	add	r4,r3,r4
   2187c:	20c00003 	ldbu	r3,0(r4)
   21880:	10c5c83a 	sub	r2,r2,r3
   21884:	f800283a 	ret
   21888:	00800604 	movi	r2,24
   2188c:	00c00204 	movi	r3,8
   21890:	003ff606 	br	2186c <__alt_data_end+0xfffe186c>
   21894:	00800404 	movi	r2,16
   21898:	1007883a 	mov	r3,r2
   2189c:	003ff306 	br	2186c <__alt_data_end+0xfffe186c>

000218a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   218a0:	defffc04 	addi	sp,sp,-16
   218a4:	df000315 	stw	fp,12(sp)
   218a8:	df000304 	addi	fp,sp,12
   218ac:	e13ffd15 	stw	r4,-12(fp)
   218b0:	e17ffe15 	stw	r5,-8(fp)
   218b4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   218b8:	e0fffe17 	ldw	r3,-8(fp)
   218bc:	e0bffd17 	ldw	r2,-12(fp)
   218c0:	18800c26 	beq	r3,r2,218f4 <alt_load_section+0x54>
  {
    while( to != end )
   218c4:	00000806 	br	218e8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   218c8:	e0bffe17 	ldw	r2,-8(fp)
   218cc:	10c00104 	addi	r3,r2,4
   218d0:	e0fffe15 	stw	r3,-8(fp)
   218d4:	e0fffd17 	ldw	r3,-12(fp)
   218d8:	19000104 	addi	r4,r3,4
   218dc:	e13ffd15 	stw	r4,-12(fp)
   218e0:	18c00017 	ldw	r3,0(r3)
   218e4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   218e8:	e0fffe17 	ldw	r3,-8(fp)
   218ec:	e0bfff17 	ldw	r2,-4(fp)
   218f0:	18bff51e 	bne	r3,r2,218c8 <__alt_data_end+0xfffe18c8>
    {
      *to++ = *from++;
    }
  }
}
   218f4:	0001883a 	nop
   218f8:	e037883a 	mov	sp,fp
   218fc:	df000017 	ldw	fp,0(sp)
   21900:	dec00104 	addi	sp,sp,4
   21904:	f800283a 	ret

00021908 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   21908:	defffe04 	addi	sp,sp,-8
   2190c:	dfc00115 	stw	ra,4(sp)
   21910:	df000015 	stw	fp,0(sp)
   21914:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   21918:	018000b4 	movhi	r6,2
   2191c:	31949c04 	addi	r6,r6,21104
   21920:	014000b4 	movhi	r5,2
   21924:	294f0604 	addi	r5,r5,15384
   21928:	010000b4 	movhi	r4,2
   2192c:	21149c04 	addi	r4,r4,21104
   21930:	00218a00 	call	218a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   21934:	018000b4 	movhi	r6,2
   21938:	31809104 	addi	r6,r6,580
   2193c:	014000b4 	movhi	r5,2
   21940:	29400804 	addi	r5,r5,32
   21944:	010000b4 	movhi	r4,2
   21948:	21000804 	addi	r4,r4,32
   2194c:	00218a00 	call	218a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   21950:	018000b4 	movhi	r6,2
   21954:	318f0604 	addi	r6,r6,15384
   21958:	014000b4 	movhi	r5,2
   2195c:	294eb804 	addi	r5,r5,15072
   21960:	010000b4 	movhi	r4,2
   21964:	210eb804 	addi	r4,r4,15072
   21968:	00218a00 	call	218a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2196c:	002275c0 	call	2275c <alt_dcache_flush_all>
  alt_icache_flush_all();
   21970:	00229700 	call	22970 <alt_icache_flush_all>
}
   21974:	0001883a 	nop
   21978:	e037883a 	mov	sp,fp
   2197c:	dfc00117 	ldw	ra,4(sp)
   21980:	df000017 	ldw	fp,0(sp)
   21984:	dec00204 	addi	sp,sp,8
   21988:	f800283a 	ret

0002198c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2198c:	defffd04 	addi	sp,sp,-12
   21990:	dfc00215 	stw	ra,8(sp)
   21994:	df000115 	stw	fp,4(sp)
   21998:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2199c:	0009883a 	mov	r4,zero
   219a0:	0021a3c0 	call	21a3c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   219a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   219a8:	0021a740 	call	21a74 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   219ac:	018000b4 	movhi	r6,2
   219b0:	318ef804 	addi	r6,r6,15328
   219b4:	014000b4 	movhi	r5,2
   219b8:	294ef804 	addi	r5,r5,15328
   219bc:	010000b4 	movhi	r4,2
   219c0:	210ef804 	addi	r4,r4,15328
   219c4:	0022d080 	call	22d08 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   219c8:	00228b00 	call	228b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   219cc:	010000b4 	movhi	r4,2
   219d0:	210a4404 	addi	r4,r4,10512
   219d4:	002356c0 	call	2356c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   219d8:	d0a5a117 	ldw	r2,-27004(gp)
   219dc:	d0e5a217 	ldw	r3,-27000(gp)
   219e0:	d125a317 	ldw	r4,-26996(gp)
   219e4:	200d883a 	mov	r6,r4
   219e8:	180b883a 	mov	r5,r3
   219ec:	1009883a 	mov	r4,r2
   219f0:	00203640 	call	20364 <main>
   219f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   219f8:	01000044 	movi	r4,1
   219fc:	002268c0 	call	2268c <close>
  exit (result);
   21a00:	e13fff17 	ldw	r4,-4(fp)
   21a04:	00235800 	call	23580 <exit>

00021a08 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   21a08:	defffd04 	addi	sp,sp,-12
   21a0c:	dfc00215 	stw	ra,8(sp)
   21a10:	df000115 	stw	fp,4(sp)
   21a14:	df000104 	addi	fp,sp,4
   21a18:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   21a1c:	d1600204 	addi	r5,gp,-32760
   21a20:	e13fff17 	ldw	r4,-4(fp)
   21a24:	002280c0 	call	2280c <alt_dev_llist_insert>
}
   21a28:	e037883a 	mov	sp,fp
   21a2c:	dfc00117 	ldw	ra,4(sp)
   21a30:	df000017 	ldw	fp,0(sp)
   21a34:	dec00204 	addi	sp,sp,8
   21a38:	f800283a 	ret

00021a3c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   21a3c:	defffd04 	addi	sp,sp,-12
   21a40:	dfc00215 	stw	ra,8(sp)
   21a44:	df000115 	stw	fp,4(sp)
   21a48:	df000104 	addi	fp,sp,4
   21a4c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   21a50:	00231e00 	call	231e0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   21a54:	00800044 	movi	r2,1
   21a58:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   21a5c:	0001883a 	nop
   21a60:	e037883a 	mov	sp,fp
   21a64:	dfc00117 	ldw	ra,4(sp)
   21a68:	df000017 	ldw	fp,0(sp)
   21a6c:	dec00204 	addi	sp,sp,8
   21a70:	f800283a 	ret

00021a74 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   21a74:	defffe04 	addi	sp,sp,-8
   21a78:	dfc00115 	stw	ra,4(sp)
   21a7c:	df000015 	stw	fp,0(sp)
   21a80:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   21a84:	000d883a 	mov	r6,zero
   21a88:	000b883a 	mov	r5,zero
   21a8c:	010000b4 	movhi	r4,2
   21a90:	210f1004 	addi	r4,r4,15424
   21a94:	0021c200 	call	21c20 <altera_avalon_jtag_uart_init>
   21a98:	010000b4 	movhi	r4,2
   21a9c:	210f0604 	addi	r4,r4,15384
   21aa0:	0021a080 	call	21a08 <alt_dev_reg>
}
   21aa4:	0001883a 	nop
   21aa8:	e037883a 	mov	sp,fp
   21aac:	dfc00117 	ldw	ra,4(sp)
   21ab0:	df000017 	ldw	fp,0(sp)
   21ab4:	dec00204 	addi	sp,sp,8
   21ab8:	f800283a 	ret

00021abc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   21abc:	defffa04 	addi	sp,sp,-24
   21ac0:	dfc00515 	stw	ra,20(sp)
   21ac4:	df000415 	stw	fp,16(sp)
   21ac8:	df000404 	addi	fp,sp,16
   21acc:	e13ffd15 	stw	r4,-12(fp)
   21ad0:	e17ffe15 	stw	r5,-8(fp)
   21ad4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21ad8:	e0bffd17 	ldw	r2,-12(fp)
   21adc:	10800017 	ldw	r2,0(r2)
   21ae0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   21ae4:	e0bffc17 	ldw	r2,-16(fp)
   21ae8:	10c00a04 	addi	r3,r2,40
   21aec:	e0bffd17 	ldw	r2,-12(fp)
   21af0:	10800217 	ldw	r2,8(r2)
   21af4:	100f883a 	mov	r7,r2
   21af8:	e1bfff17 	ldw	r6,-4(fp)
   21afc:	e17ffe17 	ldw	r5,-8(fp)
   21b00:	1809883a 	mov	r4,r3
   21b04:	00220e40 	call	220e4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   21b08:	e037883a 	mov	sp,fp
   21b0c:	dfc00117 	ldw	ra,4(sp)
   21b10:	df000017 	ldw	fp,0(sp)
   21b14:	dec00204 	addi	sp,sp,8
   21b18:	f800283a 	ret

00021b1c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   21b1c:	defffa04 	addi	sp,sp,-24
   21b20:	dfc00515 	stw	ra,20(sp)
   21b24:	df000415 	stw	fp,16(sp)
   21b28:	df000404 	addi	fp,sp,16
   21b2c:	e13ffd15 	stw	r4,-12(fp)
   21b30:	e17ffe15 	stw	r5,-8(fp)
   21b34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21b38:	e0bffd17 	ldw	r2,-12(fp)
   21b3c:	10800017 	ldw	r2,0(r2)
   21b40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   21b44:	e0bffc17 	ldw	r2,-16(fp)
   21b48:	10c00a04 	addi	r3,r2,40
   21b4c:	e0bffd17 	ldw	r2,-12(fp)
   21b50:	10800217 	ldw	r2,8(r2)
   21b54:	100f883a 	mov	r7,r2
   21b58:	e1bfff17 	ldw	r6,-4(fp)
   21b5c:	e17ffe17 	ldw	r5,-8(fp)
   21b60:	1809883a 	mov	r4,r3
   21b64:	00223000 	call	22300 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   21b68:	e037883a 	mov	sp,fp
   21b6c:	dfc00117 	ldw	ra,4(sp)
   21b70:	df000017 	ldw	fp,0(sp)
   21b74:	dec00204 	addi	sp,sp,8
   21b78:	f800283a 	ret

00021b7c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   21b7c:	defffc04 	addi	sp,sp,-16
   21b80:	dfc00315 	stw	ra,12(sp)
   21b84:	df000215 	stw	fp,8(sp)
   21b88:	df000204 	addi	fp,sp,8
   21b8c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   21b90:	e0bfff17 	ldw	r2,-4(fp)
   21b94:	10800017 	ldw	r2,0(r2)
   21b98:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   21b9c:	e0bffe17 	ldw	r2,-8(fp)
   21ba0:	10c00a04 	addi	r3,r2,40
   21ba4:	e0bfff17 	ldw	r2,-4(fp)
   21ba8:	10800217 	ldw	r2,8(r2)
   21bac:	100b883a 	mov	r5,r2
   21bb0:	1809883a 	mov	r4,r3
   21bb4:	0021f8c0 	call	21f8c <altera_avalon_jtag_uart_close>
}
   21bb8:	e037883a 	mov	sp,fp
   21bbc:	dfc00117 	ldw	ra,4(sp)
   21bc0:	df000017 	ldw	fp,0(sp)
   21bc4:	dec00204 	addi	sp,sp,8
   21bc8:	f800283a 	ret

00021bcc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   21bcc:	defffa04 	addi	sp,sp,-24
   21bd0:	dfc00515 	stw	ra,20(sp)
   21bd4:	df000415 	stw	fp,16(sp)
   21bd8:	df000404 	addi	fp,sp,16
   21bdc:	e13ffd15 	stw	r4,-12(fp)
   21be0:	e17ffe15 	stw	r5,-8(fp)
   21be4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   21be8:	e0bffd17 	ldw	r2,-12(fp)
   21bec:	10800017 	ldw	r2,0(r2)
   21bf0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   21bf4:	e0bffc17 	ldw	r2,-16(fp)
   21bf8:	10800a04 	addi	r2,r2,40
   21bfc:	e1bfff17 	ldw	r6,-4(fp)
   21c00:	e17ffe17 	ldw	r5,-8(fp)
   21c04:	1009883a 	mov	r4,r2
   21c08:	0021ff40 	call	21ff4 <altera_avalon_jtag_uart_ioctl>
}
   21c0c:	e037883a 	mov	sp,fp
   21c10:	dfc00117 	ldw	ra,4(sp)
   21c14:	df000017 	ldw	fp,0(sp)
   21c18:	dec00204 	addi	sp,sp,8
   21c1c:	f800283a 	ret

00021c20 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   21c20:	defffa04 	addi	sp,sp,-24
   21c24:	dfc00515 	stw	ra,20(sp)
   21c28:	df000415 	stw	fp,16(sp)
   21c2c:	df000404 	addi	fp,sp,16
   21c30:	e13ffd15 	stw	r4,-12(fp)
   21c34:	e17ffe15 	stw	r5,-8(fp)
   21c38:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21c3c:	e0bffd17 	ldw	r2,-12(fp)
   21c40:	00c00044 	movi	r3,1
   21c44:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   21c48:	e0bffd17 	ldw	r2,-12(fp)
   21c4c:	10800017 	ldw	r2,0(r2)
   21c50:	10800104 	addi	r2,r2,4
   21c54:	1007883a 	mov	r3,r2
   21c58:	e0bffd17 	ldw	r2,-12(fp)
   21c5c:	10800817 	ldw	r2,32(r2)
   21c60:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   21c64:	e0bffe17 	ldw	r2,-8(fp)
   21c68:	e0ffff17 	ldw	r3,-4(fp)
   21c6c:	d8000015 	stw	zero,0(sp)
   21c70:	e1fffd17 	ldw	r7,-12(fp)
   21c74:	018000b4 	movhi	r6,2
   21c78:	31873804 	addi	r6,r6,7392
   21c7c:	180b883a 	mov	r5,r3
   21c80:	1009883a 	mov	r4,r2
   21c84:	00229a40 	call	229a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   21c88:	e0bffd17 	ldw	r2,-12(fp)
   21c8c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   21c90:	e0bffd17 	ldw	r2,-12(fp)
   21c94:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21c98:	d0e5a517 	ldw	r3,-26988(gp)
   21c9c:	e1fffd17 	ldw	r7,-12(fp)
   21ca0:	018000b4 	movhi	r6,2
   21ca4:	3187bb04 	addi	r6,r6,7916
   21ca8:	180b883a 	mov	r5,r3
   21cac:	1009883a 	mov	r4,r2
   21cb0:	00225240 	call	22524 <alt_alarm_start>
   21cb4:	1000040e 	bge	r2,zero,21cc8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   21cb8:	e0fffd17 	ldw	r3,-12(fp)
   21cbc:	00a00034 	movhi	r2,32768
   21cc0:	10bfffc4 	addi	r2,r2,-1
   21cc4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   21cc8:	0001883a 	nop
   21ccc:	e037883a 	mov	sp,fp
   21cd0:	dfc00117 	ldw	ra,4(sp)
   21cd4:	df000017 	ldw	fp,0(sp)
   21cd8:	dec00204 	addi	sp,sp,8
   21cdc:	f800283a 	ret

00021ce0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   21ce0:	defff804 	addi	sp,sp,-32
   21ce4:	df000715 	stw	fp,28(sp)
   21ce8:	df000704 	addi	fp,sp,28
   21cec:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   21cf0:	e0bfff17 	ldw	r2,-4(fp)
   21cf4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   21cf8:	e0bffb17 	ldw	r2,-20(fp)
   21cfc:	10800017 	ldw	r2,0(r2)
   21d00:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21d04:	e0bffc17 	ldw	r2,-16(fp)
   21d08:	10800104 	addi	r2,r2,4
   21d0c:	10800037 	ldwio	r2,0(r2)
   21d10:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   21d14:	e0bffd17 	ldw	r2,-12(fp)
   21d18:	1080c00c 	andi	r2,r2,768
   21d1c:	10006d26 	beq	r2,zero,21ed4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   21d20:	e0bffd17 	ldw	r2,-12(fp)
   21d24:	1080400c 	andi	r2,r2,256
   21d28:	10003526 	beq	r2,zero,21e00 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   21d2c:	00800074 	movhi	r2,1
   21d30:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21d34:	e0bffb17 	ldw	r2,-20(fp)
   21d38:	10800a17 	ldw	r2,40(r2)
   21d3c:	10800044 	addi	r2,r2,1
   21d40:	1081ffcc 	andi	r2,r2,2047
   21d44:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   21d48:	e0bffb17 	ldw	r2,-20(fp)
   21d4c:	10c00b17 	ldw	r3,44(r2)
   21d50:	e0bffe17 	ldw	r2,-8(fp)
   21d54:	18801526 	beq	r3,r2,21dac <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   21d58:	e0bffc17 	ldw	r2,-16(fp)
   21d5c:	10800037 	ldwio	r2,0(r2)
   21d60:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   21d64:	e0bff917 	ldw	r2,-28(fp)
   21d68:	10a0000c 	andi	r2,r2,32768
   21d6c:	10001126 	beq	r2,zero,21db4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   21d70:	e0bffb17 	ldw	r2,-20(fp)
   21d74:	10800a17 	ldw	r2,40(r2)
   21d78:	e0fff917 	ldw	r3,-28(fp)
   21d7c:	1809883a 	mov	r4,r3
   21d80:	e0fffb17 	ldw	r3,-20(fp)
   21d84:	1885883a 	add	r2,r3,r2
   21d88:	10800e04 	addi	r2,r2,56
   21d8c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21d90:	e0bffb17 	ldw	r2,-20(fp)
   21d94:	10800a17 	ldw	r2,40(r2)
   21d98:	10800044 	addi	r2,r2,1
   21d9c:	10c1ffcc 	andi	r3,r2,2047
   21da0:	e0bffb17 	ldw	r2,-20(fp)
   21da4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   21da8:	003fe206 	br	21d34 <__alt_data_end+0xfffe1d34>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   21dac:	0001883a 	nop
   21db0:	00000106 	br	21db8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   21db4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   21db8:	e0bff917 	ldw	r2,-28(fp)
   21dbc:	10bfffec 	andhi	r2,r2,65535
   21dc0:	10000f26 	beq	r2,zero,21e00 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   21dc4:	e0bffb17 	ldw	r2,-20(fp)
   21dc8:	10c00817 	ldw	r3,32(r2)
   21dcc:	00bfff84 	movi	r2,-2
   21dd0:	1886703a 	and	r3,r3,r2
   21dd4:	e0bffb17 	ldw	r2,-20(fp)
   21dd8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   21ddc:	e0bffc17 	ldw	r2,-16(fp)
   21de0:	10800104 	addi	r2,r2,4
   21de4:	1007883a 	mov	r3,r2
   21de8:	e0bffb17 	ldw	r2,-20(fp)
   21dec:	10800817 	ldw	r2,32(r2)
   21df0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21df4:	e0bffc17 	ldw	r2,-16(fp)
   21df8:	10800104 	addi	r2,r2,4
   21dfc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   21e00:	e0bffd17 	ldw	r2,-12(fp)
   21e04:	1080800c 	andi	r2,r2,512
   21e08:	103fbe26 	beq	r2,zero,21d04 <__alt_data_end+0xfffe1d04>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   21e0c:	e0bffd17 	ldw	r2,-12(fp)
   21e10:	1004d43a 	srli	r2,r2,16
   21e14:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   21e18:	00001406 	br	21e6c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   21e1c:	e0bffc17 	ldw	r2,-16(fp)
   21e20:	e0fffb17 	ldw	r3,-20(fp)
   21e24:	18c00d17 	ldw	r3,52(r3)
   21e28:	e13ffb17 	ldw	r4,-20(fp)
   21e2c:	20c7883a 	add	r3,r4,r3
   21e30:	18c20e04 	addi	r3,r3,2104
   21e34:	18c00003 	ldbu	r3,0(r3)
   21e38:	18c03fcc 	andi	r3,r3,255
   21e3c:	18c0201c 	xori	r3,r3,128
   21e40:	18ffe004 	addi	r3,r3,-128
   21e44:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21e48:	e0bffb17 	ldw	r2,-20(fp)
   21e4c:	10800d17 	ldw	r2,52(r2)
   21e50:	10800044 	addi	r2,r2,1
   21e54:	10c1ffcc 	andi	r3,r2,2047
   21e58:	e0bffb17 	ldw	r2,-20(fp)
   21e5c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   21e60:	e0bffa17 	ldw	r2,-24(fp)
   21e64:	10bfffc4 	addi	r2,r2,-1
   21e68:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   21e6c:	e0bffa17 	ldw	r2,-24(fp)
   21e70:	10000526 	beq	r2,zero,21e88 <altera_avalon_jtag_uart_irq+0x1a8>
   21e74:	e0bffb17 	ldw	r2,-20(fp)
   21e78:	10c00d17 	ldw	r3,52(r2)
   21e7c:	e0bffb17 	ldw	r2,-20(fp)
   21e80:	10800c17 	ldw	r2,48(r2)
   21e84:	18bfe51e 	bne	r3,r2,21e1c <__alt_data_end+0xfffe1e1c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   21e88:	e0bffa17 	ldw	r2,-24(fp)
   21e8c:	103f9d26 	beq	r2,zero,21d04 <__alt_data_end+0xfffe1d04>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21e90:	e0bffb17 	ldw	r2,-20(fp)
   21e94:	10c00817 	ldw	r3,32(r2)
   21e98:	00bfff44 	movi	r2,-3
   21e9c:	1886703a 	and	r3,r3,r2
   21ea0:	e0bffb17 	ldw	r2,-20(fp)
   21ea4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   21ea8:	e0bffb17 	ldw	r2,-20(fp)
   21eac:	10800017 	ldw	r2,0(r2)
   21eb0:	10800104 	addi	r2,r2,4
   21eb4:	1007883a 	mov	r3,r2
   21eb8:	e0bffb17 	ldw	r2,-20(fp)
   21ebc:	10800817 	ldw	r2,32(r2)
   21ec0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   21ec4:	e0bffc17 	ldw	r2,-16(fp)
   21ec8:	10800104 	addi	r2,r2,4
   21ecc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   21ed0:	003f8c06 	br	21d04 <__alt_data_end+0xfffe1d04>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   21ed4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   21ed8:	0001883a 	nop
   21edc:	e037883a 	mov	sp,fp
   21ee0:	df000017 	ldw	fp,0(sp)
   21ee4:	dec00104 	addi	sp,sp,4
   21ee8:	f800283a 	ret

00021eec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   21eec:	defff804 	addi	sp,sp,-32
   21ef0:	df000715 	stw	fp,28(sp)
   21ef4:	df000704 	addi	fp,sp,28
   21ef8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   21efc:	e0bffb17 	ldw	r2,-20(fp)
   21f00:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   21f04:	e0bff917 	ldw	r2,-28(fp)
   21f08:	10800017 	ldw	r2,0(r2)
   21f0c:	10800104 	addi	r2,r2,4
   21f10:	10800037 	ldwio	r2,0(r2)
   21f14:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   21f18:	e0bffa17 	ldw	r2,-24(fp)
   21f1c:	1081000c 	andi	r2,r2,1024
   21f20:	10000b26 	beq	r2,zero,21f50 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   21f24:	e0bff917 	ldw	r2,-28(fp)
   21f28:	10800017 	ldw	r2,0(r2)
   21f2c:	10800104 	addi	r2,r2,4
   21f30:	1007883a 	mov	r3,r2
   21f34:	e0bff917 	ldw	r2,-28(fp)
   21f38:	10800817 	ldw	r2,32(r2)
   21f3c:	10810014 	ori	r2,r2,1024
   21f40:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   21f44:	e0bff917 	ldw	r2,-28(fp)
   21f48:	10000915 	stw	zero,36(r2)
   21f4c:	00000a06 	br	21f78 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   21f50:	e0bff917 	ldw	r2,-28(fp)
   21f54:	10c00917 	ldw	r3,36(r2)
   21f58:	00a00034 	movhi	r2,32768
   21f5c:	10bfff04 	addi	r2,r2,-4
   21f60:	10c00536 	bltu	r2,r3,21f78 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   21f64:	e0bff917 	ldw	r2,-28(fp)
   21f68:	10800917 	ldw	r2,36(r2)
   21f6c:	10c00044 	addi	r3,r2,1
   21f70:	e0bff917 	ldw	r2,-28(fp)
   21f74:	10c00915 	stw	r3,36(r2)
   21f78:	d0a5a517 	ldw	r2,-26988(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   21f7c:	e037883a 	mov	sp,fp
   21f80:	df000017 	ldw	fp,0(sp)
   21f84:	dec00104 	addi	sp,sp,4
   21f88:	f800283a 	ret

00021f8c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   21f8c:	defffd04 	addi	sp,sp,-12
   21f90:	df000215 	stw	fp,8(sp)
   21f94:	df000204 	addi	fp,sp,8
   21f98:	e13ffe15 	stw	r4,-8(fp)
   21f9c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21fa0:	00000506 	br	21fb8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   21fa4:	e0bfff17 	ldw	r2,-4(fp)
   21fa8:	1090000c 	andi	r2,r2,16384
   21fac:	10000226 	beq	r2,zero,21fb8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   21fb0:	00bffd44 	movi	r2,-11
   21fb4:	00000b06 	br	21fe4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   21fb8:	e0bffe17 	ldw	r2,-8(fp)
   21fbc:	10c00d17 	ldw	r3,52(r2)
   21fc0:	e0bffe17 	ldw	r2,-8(fp)
   21fc4:	10800c17 	ldw	r2,48(r2)
   21fc8:	18800526 	beq	r3,r2,21fe0 <altera_avalon_jtag_uart_close+0x54>
   21fcc:	e0bffe17 	ldw	r2,-8(fp)
   21fd0:	10c00917 	ldw	r3,36(r2)
   21fd4:	e0bffe17 	ldw	r2,-8(fp)
   21fd8:	10800117 	ldw	r2,4(r2)
   21fdc:	18bff136 	bltu	r3,r2,21fa4 <__alt_data_end+0xfffe1fa4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   21fe0:	0005883a 	mov	r2,zero
}
   21fe4:	e037883a 	mov	sp,fp
   21fe8:	df000017 	ldw	fp,0(sp)
   21fec:	dec00104 	addi	sp,sp,4
   21ff0:	f800283a 	ret

00021ff4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   21ff4:	defffa04 	addi	sp,sp,-24
   21ff8:	df000515 	stw	fp,20(sp)
   21ffc:	df000504 	addi	fp,sp,20
   22000:	e13ffd15 	stw	r4,-12(fp)
   22004:	e17ffe15 	stw	r5,-8(fp)
   22008:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2200c:	00bff9c4 	movi	r2,-25
   22010:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   22014:	e0bffe17 	ldw	r2,-8(fp)
   22018:	10da8060 	cmpeqi	r3,r2,27137
   2201c:	1800031e 	bne	r3,zero,2202c <altera_avalon_jtag_uart_ioctl+0x38>
   22020:	109a80a0 	cmpeqi	r2,r2,27138
   22024:	1000181e 	bne	r2,zero,22088 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   22028:	00002906 	br	220d0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2202c:	e0bffd17 	ldw	r2,-12(fp)
   22030:	10c00117 	ldw	r3,4(r2)
   22034:	00a00034 	movhi	r2,32768
   22038:	10bfffc4 	addi	r2,r2,-1
   2203c:	18802126 	beq	r3,r2,220c4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   22040:	e0bfff17 	ldw	r2,-4(fp)
   22044:	10800017 	ldw	r2,0(r2)
   22048:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2204c:	e0bffc17 	ldw	r2,-16(fp)
   22050:	10800090 	cmplti	r2,r2,2
   22054:	1000061e 	bne	r2,zero,22070 <altera_avalon_jtag_uart_ioctl+0x7c>
   22058:	e0fffc17 	ldw	r3,-16(fp)
   2205c:	00a00034 	movhi	r2,32768
   22060:	10bfffc4 	addi	r2,r2,-1
   22064:	18800226 	beq	r3,r2,22070 <altera_avalon_jtag_uart_ioctl+0x7c>
   22068:	e0bffc17 	ldw	r2,-16(fp)
   2206c:	00000206 	br	22078 <altera_avalon_jtag_uart_ioctl+0x84>
   22070:	00a00034 	movhi	r2,32768
   22074:	10bfff84 	addi	r2,r2,-2
   22078:	e0fffd17 	ldw	r3,-12(fp)
   2207c:	18800115 	stw	r2,4(r3)
      rc = 0;
   22080:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   22084:	00000f06 	br	220c4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   22088:	e0bffd17 	ldw	r2,-12(fp)
   2208c:	10c00117 	ldw	r3,4(r2)
   22090:	00a00034 	movhi	r2,32768
   22094:	10bfffc4 	addi	r2,r2,-1
   22098:	18800c26 	beq	r3,r2,220cc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2209c:	e0bffd17 	ldw	r2,-12(fp)
   220a0:	10c00917 	ldw	r3,36(r2)
   220a4:	e0bffd17 	ldw	r2,-12(fp)
   220a8:	10800117 	ldw	r2,4(r2)
   220ac:	1885803a 	cmpltu	r2,r3,r2
   220b0:	10c03fcc 	andi	r3,r2,255
   220b4:	e0bfff17 	ldw	r2,-4(fp)
   220b8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   220bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   220c0:	00000206 	br	220cc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   220c4:	0001883a 	nop
   220c8:	00000106 	br	220d0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   220cc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   220d0:	e0bffb17 	ldw	r2,-20(fp)
}
   220d4:	e037883a 	mov	sp,fp
   220d8:	df000017 	ldw	fp,0(sp)
   220dc:	dec00104 	addi	sp,sp,4
   220e0:	f800283a 	ret

000220e4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   220e4:	defff304 	addi	sp,sp,-52
   220e8:	dfc00c15 	stw	ra,48(sp)
   220ec:	df000b15 	stw	fp,44(sp)
   220f0:	df000b04 	addi	fp,sp,44
   220f4:	e13ffc15 	stw	r4,-16(fp)
   220f8:	e17ffd15 	stw	r5,-12(fp)
   220fc:	e1bffe15 	stw	r6,-8(fp)
   22100:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   22104:	e0bffd17 	ldw	r2,-12(fp)
   22108:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2210c:	00004706 	br	2222c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   22110:	e0bffc17 	ldw	r2,-16(fp)
   22114:	10800a17 	ldw	r2,40(r2)
   22118:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2211c:	e0bffc17 	ldw	r2,-16(fp)
   22120:	10800b17 	ldw	r2,44(r2)
   22124:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   22128:	e0fff717 	ldw	r3,-36(fp)
   2212c:	e0bff817 	ldw	r2,-32(fp)
   22130:	18800536 	bltu	r3,r2,22148 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   22134:	e0fff717 	ldw	r3,-36(fp)
   22138:	e0bff817 	ldw	r2,-32(fp)
   2213c:	1885c83a 	sub	r2,r3,r2
   22140:	e0bff615 	stw	r2,-40(fp)
   22144:	00000406 	br	22158 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   22148:	00c20004 	movi	r3,2048
   2214c:	e0bff817 	ldw	r2,-32(fp)
   22150:	1885c83a 	sub	r2,r3,r2
   22154:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   22158:	e0bff617 	ldw	r2,-40(fp)
   2215c:	10001e26 	beq	r2,zero,221d8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   22160:	e0fffe17 	ldw	r3,-8(fp)
   22164:	e0bff617 	ldw	r2,-40(fp)
   22168:	1880022e 	bgeu	r3,r2,22174 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2216c:	e0bffe17 	ldw	r2,-8(fp)
   22170:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   22174:	e0bffc17 	ldw	r2,-16(fp)
   22178:	10c00e04 	addi	r3,r2,56
   2217c:	e0bff817 	ldw	r2,-32(fp)
   22180:	1885883a 	add	r2,r3,r2
   22184:	e1bff617 	ldw	r6,-40(fp)
   22188:	100b883a 	mov	r5,r2
   2218c:	e13ff517 	ldw	r4,-44(fp)
   22190:	00236340 	call	23634 <memcpy>
      ptr   += n;
   22194:	e0fff517 	ldw	r3,-44(fp)
   22198:	e0bff617 	ldw	r2,-40(fp)
   2219c:	1885883a 	add	r2,r3,r2
   221a0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   221a4:	e0fffe17 	ldw	r3,-8(fp)
   221a8:	e0bff617 	ldw	r2,-40(fp)
   221ac:	1885c83a 	sub	r2,r3,r2
   221b0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   221b4:	e0fff817 	ldw	r3,-32(fp)
   221b8:	e0bff617 	ldw	r2,-40(fp)
   221bc:	1885883a 	add	r2,r3,r2
   221c0:	10c1ffcc 	andi	r3,r2,2047
   221c4:	e0bffc17 	ldw	r2,-16(fp)
   221c8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   221cc:	e0bffe17 	ldw	r2,-8(fp)
   221d0:	00bfcf16 	blt	zero,r2,22110 <__alt_data_end+0xfffe2110>
   221d4:	00000106 	br	221dc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   221d8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   221dc:	e0fff517 	ldw	r3,-44(fp)
   221e0:	e0bffd17 	ldw	r2,-12(fp)
   221e4:	1880141e 	bne	r3,r2,22238 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   221e8:	e0bfff17 	ldw	r2,-4(fp)
   221ec:	1090000c 	andi	r2,r2,16384
   221f0:	1000131e 	bne	r2,zero,22240 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   221f4:	0001883a 	nop
   221f8:	e0bffc17 	ldw	r2,-16(fp)
   221fc:	10c00a17 	ldw	r3,40(r2)
   22200:	e0bff717 	ldw	r2,-36(fp)
   22204:	1880051e 	bne	r3,r2,2221c <altera_avalon_jtag_uart_read+0x138>
   22208:	e0bffc17 	ldw	r2,-16(fp)
   2220c:	10c00917 	ldw	r3,36(r2)
   22210:	e0bffc17 	ldw	r2,-16(fp)
   22214:	10800117 	ldw	r2,4(r2)
   22218:	18bff736 	bltu	r3,r2,221f8 <__alt_data_end+0xfffe21f8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2221c:	e0bffc17 	ldw	r2,-16(fp)
   22220:	10c00a17 	ldw	r3,40(r2)
   22224:	e0bff717 	ldw	r2,-36(fp)
   22228:	18800726 	beq	r3,r2,22248 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2222c:	e0bffe17 	ldw	r2,-8(fp)
   22230:	00bfb716 	blt	zero,r2,22110 <__alt_data_end+0xfffe2110>
   22234:	00000506 	br	2224c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   22238:	0001883a 	nop
   2223c:	00000306 	br	2224c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   22240:	0001883a 	nop
   22244:	00000106 	br	2224c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   22248:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2224c:	e0fff517 	ldw	r3,-44(fp)
   22250:	e0bffd17 	ldw	r2,-12(fp)
   22254:	18801826 	beq	r3,r2,222b8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22258:	0005303a 	rdctl	r2,status
   2225c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22260:	e0fffb17 	ldw	r3,-20(fp)
   22264:	00bfff84 	movi	r2,-2
   22268:	1884703a 	and	r2,r3,r2
   2226c:	1001703a 	wrctl	status,r2
  
  return context;
   22270:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   22274:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   22278:	e0bffc17 	ldw	r2,-16(fp)
   2227c:	10800817 	ldw	r2,32(r2)
   22280:	10c00054 	ori	r3,r2,1
   22284:	e0bffc17 	ldw	r2,-16(fp)
   22288:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2228c:	e0bffc17 	ldw	r2,-16(fp)
   22290:	10800017 	ldw	r2,0(r2)
   22294:	10800104 	addi	r2,r2,4
   22298:	1007883a 	mov	r3,r2
   2229c:	e0bffc17 	ldw	r2,-16(fp)
   222a0:	10800817 	ldw	r2,32(r2)
   222a4:	18800035 	stwio	r2,0(r3)
   222a8:	e0bffa17 	ldw	r2,-24(fp)
   222ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   222b0:	e0bff917 	ldw	r2,-28(fp)
   222b4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   222b8:	e0fff517 	ldw	r3,-44(fp)
   222bc:	e0bffd17 	ldw	r2,-12(fp)
   222c0:	18800426 	beq	r3,r2,222d4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   222c4:	e0fff517 	ldw	r3,-44(fp)
   222c8:	e0bffd17 	ldw	r2,-12(fp)
   222cc:	1885c83a 	sub	r2,r3,r2
   222d0:	00000606 	br	222ec <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   222d4:	e0bfff17 	ldw	r2,-4(fp)
   222d8:	1090000c 	andi	r2,r2,16384
   222dc:	10000226 	beq	r2,zero,222e8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   222e0:	00bffd44 	movi	r2,-11
   222e4:	00000106 	br	222ec <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   222e8:	00bffec4 	movi	r2,-5
}
   222ec:	e037883a 	mov	sp,fp
   222f0:	dfc00117 	ldw	ra,4(sp)
   222f4:	df000017 	ldw	fp,0(sp)
   222f8:	dec00204 	addi	sp,sp,8
   222fc:	f800283a 	ret

00022300 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   22300:	defff304 	addi	sp,sp,-52
   22304:	dfc00c15 	stw	ra,48(sp)
   22308:	df000b15 	stw	fp,44(sp)
   2230c:	df000b04 	addi	fp,sp,44
   22310:	e13ffc15 	stw	r4,-16(fp)
   22314:	e17ffd15 	stw	r5,-12(fp)
   22318:	e1bffe15 	stw	r6,-8(fp)
   2231c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   22320:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   22324:	e0bffd17 	ldw	r2,-12(fp)
   22328:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2232c:	00003706 	br	2240c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   22330:	e0bffc17 	ldw	r2,-16(fp)
   22334:	10800c17 	ldw	r2,48(r2)
   22338:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   2233c:	e0bffc17 	ldw	r2,-16(fp)
   22340:	10800d17 	ldw	r2,52(r2)
   22344:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   22348:	e0fff917 	ldw	r3,-28(fp)
   2234c:	e0bff517 	ldw	r2,-44(fp)
   22350:	1880062e 	bgeu	r3,r2,2236c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   22354:	e0fff517 	ldw	r3,-44(fp)
   22358:	e0bff917 	ldw	r2,-28(fp)
   2235c:	1885c83a 	sub	r2,r3,r2
   22360:	10bfffc4 	addi	r2,r2,-1
   22364:	e0bff615 	stw	r2,-40(fp)
   22368:	00000b06 	br	22398 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2236c:	e0bff517 	ldw	r2,-44(fp)
   22370:	10000526 	beq	r2,zero,22388 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   22374:	00c20004 	movi	r3,2048
   22378:	e0bff917 	ldw	r2,-28(fp)
   2237c:	1885c83a 	sub	r2,r3,r2
   22380:	e0bff615 	stw	r2,-40(fp)
   22384:	00000406 	br	22398 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   22388:	00c1ffc4 	movi	r3,2047
   2238c:	e0bff917 	ldw	r2,-28(fp)
   22390:	1885c83a 	sub	r2,r3,r2
   22394:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   22398:	e0bff617 	ldw	r2,-40(fp)
   2239c:	10001e26 	beq	r2,zero,22418 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   223a0:	e0fffe17 	ldw	r3,-8(fp)
   223a4:	e0bff617 	ldw	r2,-40(fp)
   223a8:	1880022e 	bgeu	r3,r2,223b4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   223ac:	e0bffe17 	ldw	r2,-8(fp)
   223b0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   223b4:	e0bffc17 	ldw	r2,-16(fp)
   223b8:	10c20e04 	addi	r3,r2,2104
   223bc:	e0bff917 	ldw	r2,-28(fp)
   223c0:	1885883a 	add	r2,r3,r2
   223c4:	e1bff617 	ldw	r6,-40(fp)
   223c8:	e17ffd17 	ldw	r5,-12(fp)
   223cc:	1009883a 	mov	r4,r2
   223d0:	00236340 	call	23634 <memcpy>
      ptr   += n;
   223d4:	e0fffd17 	ldw	r3,-12(fp)
   223d8:	e0bff617 	ldw	r2,-40(fp)
   223dc:	1885883a 	add	r2,r3,r2
   223e0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   223e4:	e0fffe17 	ldw	r3,-8(fp)
   223e8:	e0bff617 	ldw	r2,-40(fp)
   223ec:	1885c83a 	sub	r2,r3,r2
   223f0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   223f4:	e0fff917 	ldw	r3,-28(fp)
   223f8:	e0bff617 	ldw	r2,-40(fp)
   223fc:	1885883a 	add	r2,r3,r2
   22400:	10c1ffcc 	andi	r3,r2,2047
   22404:	e0bffc17 	ldw	r2,-16(fp)
   22408:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2240c:	e0bffe17 	ldw	r2,-8(fp)
   22410:	00bfc716 	blt	zero,r2,22330 <__alt_data_end+0xfffe2330>
   22414:	00000106 	br	2241c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   22418:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2241c:	0005303a 	rdctl	r2,status
   22420:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22424:	e0fffb17 	ldw	r3,-20(fp)
   22428:	00bfff84 	movi	r2,-2
   2242c:	1884703a 	and	r2,r3,r2
   22430:	1001703a 	wrctl	status,r2
  
  return context;
   22434:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   22438:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2243c:	e0bffc17 	ldw	r2,-16(fp)
   22440:	10800817 	ldw	r2,32(r2)
   22444:	10c00094 	ori	r3,r2,2
   22448:	e0bffc17 	ldw	r2,-16(fp)
   2244c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   22450:	e0bffc17 	ldw	r2,-16(fp)
   22454:	10800017 	ldw	r2,0(r2)
   22458:	10800104 	addi	r2,r2,4
   2245c:	1007883a 	mov	r3,r2
   22460:	e0bffc17 	ldw	r2,-16(fp)
   22464:	10800817 	ldw	r2,32(r2)
   22468:	18800035 	stwio	r2,0(r3)
   2246c:	e0bffa17 	ldw	r2,-24(fp)
   22470:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22474:	e0bff817 	ldw	r2,-32(fp)
   22478:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2247c:	e0bffe17 	ldw	r2,-8(fp)
   22480:	0080100e 	bge	zero,r2,224c4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   22484:	e0bfff17 	ldw	r2,-4(fp)
   22488:	1090000c 	andi	r2,r2,16384
   2248c:	1000101e 	bne	r2,zero,224d0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   22490:	0001883a 	nop
   22494:	e0bffc17 	ldw	r2,-16(fp)
   22498:	10c00d17 	ldw	r3,52(r2)
   2249c:	e0bff517 	ldw	r2,-44(fp)
   224a0:	1880051e 	bne	r3,r2,224b8 <altera_avalon_jtag_uart_write+0x1b8>
   224a4:	e0bffc17 	ldw	r2,-16(fp)
   224a8:	10c00917 	ldw	r3,36(r2)
   224ac:	e0bffc17 	ldw	r2,-16(fp)
   224b0:	10800117 	ldw	r2,4(r2)
   224b4:	18bff736 	bltu	r3,r2,22494 <__alt_data_end+0xfffe2494>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   224b8:	e0bffc17 	ldw	r2,-16(fp)
   224bc:	10800917 	ldw	r2,36(r2)
   224c0:	1000051e 	bne	r2,zero,224d8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   224c4:	e0bffe17 	ldw	r2,-8(fp)
   224c8:	00bfd016 	blt	zero,r2,2240c <__alt_data_end+0xfffe240c>
   224cc:	00000306 	br	224dc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   224d0:	0001883a 	nop
   224d4:	00000106 	br	224dc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   224d8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   224dc:	e0fffd17 	ldw	r3,-12(fp)
   224e0:	e0bff717 	ldw	r2,-36(fp)
   224e4:	18800426 	beq	r3,r2,224f8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   224e8:	e0fffd17 	ldw	r3,-12(fp)
   224ec:	e0bff717 	ldw	r2,-36(fp)
   224f0:	1885c83a 	sub	r2,r3,r2
   224f4:	00000606 	br	22510 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   224f8:	e0bfff17 	ldw	r2,-4(fp)
   224fc:	1090000c 	andi	r2,r2,16384
   22500:	10000226 	beq	r2,zero,2250c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   22504:	00bffd44 	movi	r2,-11
   22508:	00000106 	br	22510 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2250c:	00bffec4 	movi	r2,-5
}
   22510:	e037883a 	mov	sp,fp
   22514:	dfc00117 	ldw	ra,4(sp)
   22518:	df000017 	ldw	fp,0(sp)
   2251c:	dec00204 	addi	sp,sp,8
   22520:	f800283a 	ret

00022524 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   22524:	defff504 	addi	sp,sp,-44
   22528:	df000a15 	stw	fp,40(sp)
   2252c:	df000a04 	addi	fp,sp,40
   22530:	e13ffc15 	stw	r4,-16(fp)
   22534:	e17ffd15 	stw	r5,-12(fp)
   22538:	e1bffe15 	stw	r6,-8(fp)
   2253c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   22540:	e03ff615 	stw	zero,-40(fp)
   22544:	d0a5a517 	ldw	r2,-26988(gp)
  
  if (alt_ticks_per_second ())
   22548:	10003c26 	beq	r2,zero,2263c <alt_alarm_start+0x118>
  {
    if (alarm)
   2254c:	e0bffc17 	ldw	r2,-16(fp)
   22550:	10003826 	beq	r2,zero,22634 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   22554:	e0bffc17 	ldw	r2,-16(fp)
   22558:	e0fffe17 	ldw	r3,-8(fp)
   2255c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   22560:	e0bffc17 	ldw	r2,-16(fp)
   22564:	e0ffff17 	ldw	r3,-4(fp)
   22568:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2256c:	0005303a 	rdctl	r2,status
   22570:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22574:	e0fff917 	ldw	r3,-28(fp)
   22578:	00bfff84 	movi	r2,-2
   2257c:	1884703a 	and	r2,r3,r2
   22580:	1001703a 	wrctl	status,r2
  
  return context;
   22584:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   22588:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2258c:	d0a5a617 	ldw	r2,-26984(gp)
      
      current_nticks = alt_nticks();
   22590:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   22594:	e0fffd17 	ldw	r3,-12(fp)
   22598:	e0bff617 	ldw	r2,-40(fp)
   2259c:	1885883a 	add	r2,r3,r2
   225a0:	10c00044 	addi	r3,r2,1
   225a4:	e0bffc17 	ldw	r2,-16(fp)
   225a8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   225ac:	e0bffc17 	ldw	r2,-16(fp)
   225b0:	10c00217 	ldw	r3,8(r2)
   225b4:	e0bff617 	ldw	r2,-40(fp)
   225b8:	1880042e 	bgeu	r3,r2,225cc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   225bc:	e0bffc17 	ldw	r2,-16(fp)
   225c0:	00c00044 	movi	r3,1
   225c4:	10c00405 	stb	r3,16(r2)
   225c8:	00000206 	br	225d4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   225cc:	e0bffc17 	ldw	r2,-16(fp)
   225d0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   225d4:	e0bffc17 	ldw	r2,-16(fp)
   225d8:	d0e00704 	addi	r3,gp,-32740
   225dc:	e0fffa15 	stw	r3,-24(fp)
   225e0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   225e4:	e0bffb17 	ldw	r2,-20(fp)
   225e8:	e0fffa17 	ldw	r3,-24(fp)
   225ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   225f0:	e0bffa17 	ldw	r2,-24(fp)
   225f4:	10c00017 	ldw	r3,0(r2)
   225f8:	e0bffb17 	ldw	r2,-20(fp)
   225fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22600:	e0bffa17 	ldw	r2,-24(fp)
   22604:	10800017 	ldw	r2,0(r2)
   22608:	e0fffb17 	ldw	r3,-20(fp)
   2260c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22610:	e0bffa17 	ldw	r2,-24(fp)
   22614:	e0fffb17 	ldw	r3,-20(fp)
   22618:	10c00015 	stw	r3,0(r2)
   2261c:	e0bff817 	ldw	r2,-32(fp)
   22620:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22624:	e0bff717 	ldw	r2,-36(fp)
   22628:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2262c:	0005883a 	mov	r2,zero
   22630:	00000306 	br	22640 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   22634:	00bffa84 	movi	r2,-22
   22638:	00000106 	br	22640 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2263c:	00bfde84 	movi	r2,-134
  }
}
   22640:	e037883a 	mov	sp,fp
   22644:	df000017 	ldw	fp,0(sp)
   22648:	dec00104 	addi	sp,sp,4
   2264c:	f800283a 	ret

00022650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22650:	defffe04 	addi	sp,sp,-8
   22654:	dfc00115 	stw	ra,4(sp)
   22658:	df000015 	stw	fp,0(sp)
   2265c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22660:	d0a00517 	ldw	r2,-32748(gp)
   22664:	10000326 	beq	r2,zero,22674 <alt_get_errno+0x24>
   22668:	d0a00517 	ldw	r2,-32748(gp)
   2266c:	103ee83a 	callr	r2
   22670:	00000106 	br	22678 <alt_get_errno+0x28>
   22674:	d0a5a804 	addi	r2,gp,-26976
}
   22678:	e037883a 	mov	sp,fp
   2267c:	dfc00117 	ldw	ra,4(sp)
   22680:	df000017 	ldw	fp,0(sp)
   22684:	dec00204 	addi	sp,sp,8
   22688:	f800283a 	ret

0002268c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2268c:	defffb04 	addi	sp,sp,-20
   22690:	dfc00415 	stw	ra,16(sp)
   22694:	df000315 	stw	fp,12(sp)
   22698:	df000304 	addi	fp,sp,12
   2269c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   226a0:	e0bfff17 	ldw	r2,-4(fp)
   226a4:	10000616 	blt	r2,zero,226c0 <close+0x34>
   226a8:	e0bfff17 	ldw	r2,-4(fp)
   226ac:	10c00324 	muli	r3,r2,12
   226b0:	008000b4 	movhi	r2,2
   226b4:	10932804 	addi	r2,r2,19616
   226b8:	1885883a 	add	r2,r3,r2
   226bc:	00000106 	br	226c4 <close+0x38>
   226c0:	0005883a 	mov	r2,zero
   226c4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   226c8:	e0bffd17 	ldw	r2,-12(fp)
   226cc:	10001926 	beq	r2,zero,22734 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   226d0:	e0bffd17 	ldw	r2,-12(fp)
   226d4:	10800017 	ldw	r2,0(r2)
   226d8:	10800417 	ldw	r2,16(r2)
   226dc:	10000626 	beq	r2,zero,226f8 <close+0x6c>
   226e0:	e0bffd17 	ldw	r2,-12(fp)
   226e4:	10800017 	ldw	r2,0(r2)
   226e8:	10800417 	ldw	r2,16(r2)
   226ec:	e13ffd17 	ldw	r4,-12(fp)
   226f0:	103ee83a 	callr	r2
   226f4:	00000106 	br	226fc <close+0x70>
   226f8:	0005883a 	mov	r2,zero
   226fc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   22700:	e13fff17 	ldw	r4,-4(fp)
   22704:	0022fd80 	call	22fd8 <alt_release_fd>
    if (rval < 0)
   22708:	e0bffe17 	ldw	r2,-8(fp)
   2270c:	1000070e 	bge	r2,zero,2272c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   22710:	00226500 	call	22650 <alt_get_errno>
   22714:	1007883a 	mov	r3,r2
   22718:	e0bffe17 	ldw	r2,-8(fp)
   2271c:	0085c83a 	sub	r2,zero,r2
   22720:	18800015 	stw	r2,0(r3)
      return -1;
   22724:	00bfffc4 	movi	r2,-1
   22728:	00000706 	br	22748 <close+0xbc>
    }
    return 0;
   2272c:	0005883a 	mov	r2,zero
   22730:	00000506 	br	22748 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22734:	00226500 	call	22650 <alt_get_errno>
   22738:	1007883a 	mov	r3,r2
   2273c:	00801444 	movi	r2,81
   22740:	18800015 	stw	r2,0(r3)
    return -1;
   22744:	00bfffc4 	movi	r2,-1
  }
}
   22748:	e037883a 	mov	sp,fp
   2274c:	dfc00117 	ldw	ra,4(sp)
   22750:	df000017 	ldw	fp,0(sp)
   22754:	dec00204 	addi	sp,sp,8
   22758:	f800283a 	ret

0002275c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2275c:	defffe04 	addi	sp,sp,-8
   22760:	df000115 	stw	fp,4(sp)
   22764:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   22768:	e03fff15 	stw	zero,-4(fp)
   2276c:	00000506 	br	22784 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   22770:	e0bfff17 	ldw	r2,-4(fp)
   22774:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   22778:	e0bfff17 	ldw	r2,-4(fp)
   2277c:	10800804 	addi	r2,r2,32
   22780:	e0bfff15 	stw	r2,-4(fp)
   22784:	e0bfff17 	ldw	r2,-4(fp)
   22788:	10820030 	cmpltui	r2,r2,2048
   2278c:	103ff81e 	bne	r2,zero,22770 <__alt_data_end+0xfffe2770>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   22790:	0001883a 	nop
   22794:	e037883a 	mov	sp,fp
   22798:	df000017 	ldw	fp,0(sp)
   2279c:	dec00104 	addi	sp,sp,4
   227a0:	f800283a 	ret

000227a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   227a4:	defffc04 	addi	sp,sp,-16
   227a8:	df000315 	stw	fp,12(sp)
   227ac:	df000304 	addi	fp,sp,12
   227b0:	e13ffd15 	stw	r4,-12(fp)
   227b4:	e17ffe15 	stw	r5,-8(fp)
   227b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   227bc:	e0bfff17 	ldw	r2,-4(fp)
}
   227c0:	e037883a 	mov	sp,fp
   227c4:	df000017 	ldw	fp,0(sp)
   227c8:	dec00104 	addi	sp,sp,4
   227cc:	f800283a 	ret

000227d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   227d0:	defffe04 	addi	sp,sp,-8
   227d4:	dfc00115 	stw	ra,4(sp)
   227d8:	df000015 	stw	fp,0(sp)
   227dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   227e0:	d0a00517 	ldw	r2,-32748(gp)
   227e4:	10000326 	beq	r2,zero,227f4 <alt_get_errno+0x24>
   227e8:	d0a00517 	ldw	r2,-32748(gp)
   227ec:	103ee83a 	callr	r2
   227f0:	00000106 	br	227f8 <alt_get_errno+0x28>
   227f4:	d0a5a804 	addi	r2,gp,-26976
}
   227f8:	e037883a 	mov	sp,fp
   227fc:	dfc00117 	ldw	ra,4(sp)
   22800:	df000017 	ldw	fp,0(sp)
   22804:	dec00204 	addi	sp,sp,8
   22808:	f800283a 	ret

0002280c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2280c:	defffa04 	addi	sp,sp,-24
   22810:	dfc00515 	stw	ra,20(sp)
   22814:	df000415 	stw	fp,16(sp)
   22818:	df000404 	addi	fp,sp,16
   2281c:	e13ffe15 	stw	r4,-8(fp)
   22820:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   22824:	e0bffe17 	ldw	r2,-8(fp)
   22828:	10000326 	beq	r2,zero,22838 <alt_dev_llist_insert+0x2c>
   2282c:	e0bffe17 	ldw	r2,-8(fp)
   22830:	10800217 	ldw	r2,8(r2)
   22834:	1000061e 	bne	r2,zero,22850 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   22838:	00227d00 	call	227d0 <alt_get_errno>
   2283c:	1007883a 	mov	r3,r2
   22840:	00800584 	movi	r2,22
   22844:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   22848:	00bffa84 	movi	r2,-22
   2284c:	00001306 	br	2289c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   22850:	e0bffe17 	ldw	r2,-8(fp)
   22854:	e0ffff17 	ldw	r3,-4(fp)
   22858:	e0fffc15 	stw	r3,-16(fp)
   2285c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22860:	e0bffd17 	ldw	r2,-12(fp)
   22864:	e0fffc17 	ldw	r3,-16(fp)
   22868:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2286c:	e0bffc17 	ldw	r2,-16(fp)
   22870:	10c00017 	ldw	r3,0(r2)
   22874:	e0bffd17 	ldw	r2,-12(fp)
   22878:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2287c:	e0bffc17 	ldw	r2,-16(fp)
   22880:	10800017 	ldw	r2,0(r2)
   22884:	e0fffd17 	ldw	r3,-12(fp)
   22888:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2288c:	e0bffc17 	ldw	r2,-16(fp)
   22890:	e0fffd17 	ldw	r3,-12(fp)
   22894:	10c00015 	stw	r3,0(r2)

  return 0;  
   22898:	0005883a 	mov	r2,zero
}
   2289c:	e037883a 	mov	sp,fp
   228a0:	dfc00117 	ldw	ra,4(sp)
   228a4:	df000017 	ldw	fp,0(sp)
   228a8:	dec00204 	addi	sp,sp,8
   228ac:	f800283a 	ret

000228b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   228b0:	defffd04 	addi	sp,sp,-12
   228b4:	dfc00215 	stw	ra,8(sp)
   228b8:	df000115 	stw	fp,4(sp)
   228bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   228c0:	008000b4 	movhi	r2,2
   228c4:	108eb704 	addi	r2,r2,15068
   228c8:	e0bfff15 	stw	r2,-4(fp)
   228cc:	00000606 	br	228e8 <_do_ctors+0x38>
        (*ctor) (); 
   228d0:	e0bfff17 	ldw	r2,-4(fp)
   228d4:	10800017 	ldw	r2,0(r2)
   228d8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   228dc:	e0bfff17 	ldw	r2,-4(fp)
   228e0:	10bfff04 	addi	r2,r2,-4
   228e4:	e0bfff15 	stw	r2,-4(fp)
   228e8:	e0ffff17 	ldw	r3,-4(fp)
   228ec:	008000b4 	movhi	r2,2
   228f0:	108eb804 	addi	r2,r2,15072
   228f4:	18bff62e 	bgeu	r3,r2,228d0 <__alt_data_end+0xfffe28d0>
        (*ctor) (); 
}
   228f8:	0001883a 	nop
   228fc:	e037883a 	mov	sp,fp
   22900:	dfc00117 	ldw	ra,4(sp)
   22904:	df000017 	ldw	fp,0(sp)
   22908:	dec00204 	addi	sp,sp,8
   2290c:	f800283a 	ret

00022910 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   22910:	defffd04 	addi	sp,sp,-12
   22914:	dfc00215 	stw	ra,8(sp)
   22918:	df000115 	stw	fp,4(sp)
   2291c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22920:	008000b4 	movhi	r2,2
   22924:	108eb704 	addi	r2,r2,15068
   22928:	e0bfff15 	stw	r2,-4(fp)
   2292c:	00000606 	br	22948 <_do_dtors+0x38>
        (*dtor) (); 
   22930:	e0bfff17 	ldw	r2,-4(fp)
   22934:	10800017 	ldw	r2,0(r2)
   22938:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2293c:	e0bfff17 	ldw	r2,-4(fp)
   22940:	10bfff04 	addi	r2,r2,-4
   22944:	e0bfff15 	stw	r2,-4(fp)
   22948:	e0ffff17 	ldw	r3,-4(fp)
   2294c:	008000b4 	movhi	r2,2
   22950:	108eb804 	addi	r2,r2,15072
   22954:	18bff62e 	bgeu	r3,r2,22930 <__alt_data_end+0xfffe2930>
        (*dtor) (); 
}
   22958:	0001883a 	nop
   2295c:	e037883a 	mov	sp,fp
   22960:	dfc00117 	ldw	ra,4(sp)
   22964:	df000017 	ldw	fp,0(sp)
   22968:	dec00204 	addi	sp,sp,8
   2296c:	f800283a 	ret

00022970 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   22970:	defffe04 	addi	sp,sp,-8
   22974:	dfc00115 	stw	ra,4(sp)
   22978:	df000015 	stw	fp,0(sp)
   2297c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   22980:	01440004 	movi	r5,4096
   22984:	0009883a 	mov	r4,zero
   22988:	00234400 	call	23440 <alt_icache_flush>
#endif
}
   2298c:	0001883a 	nop
   22990:	e037883a 	mov	sp,fp
   22994:	dfc00117 	ldw	ra,4(sp)
   22998:	df000017 	ldw	fp,0(sp)
   2299c:	dec00204 	addi	sp,sp,8
   229a0:	f800283a 	ret

000229a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   229a4:	defff904 	addi	sp,sp,-28
   229a8:	dfc00615 	stw	ra,24(sp)
   229ac:	df000515 	stw	fp,20(sp)
   229b0:	df000504 	addi	fp,sp,20
   229b4:	e13ffc15 	stw	r4,-16(fp)
   229b8:	e17ffd15 	stw	r5,-12(fp)
   229bc:	e1bffe15 	stw	r6,-8(fp)
   229c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   229c4:	e0800217 	ldw	r2,8(fp)
   229c8:	d8800015 	stw	r2,0(sp)
   229cc:	e1ffff17 	ldw	r7,-4(fp)
   229d0:	e1bffe17 	ldw	r6,-8(fp)
   229d4:	e17ffd17 	ldw	r5,-12(fp)
   229d8:	e13ffc17 	ldw	r4,-16(fp)
   229dc:	0022b540 	call	22b54 <alt_iic_isr_register>
}  
   229e0:	e037883a 	mov	sp,fp
   229e4:	dfc00117 	ldw	ra,4(sp)
   229e8:	df000017 	ldw	fp,0(sp)
   229ec:	dec00204 	addi	sp,sp,8
   229f0:	f800283a 	ret

000229f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   229f4:	defff904 	addi	sp,sp,-28
   229f8:	df000615 	stw	fp,24(sp)
   229fc:	df000604 	addi	fp,sp,24
   22a00:	e13ffe15 	stw	r4,-8(fp)
   22a04:	e17fff15 	stw	r5,-4(fp)
   22a08:	e0bfff17 	ldw	r2,-4(fp)
   22a0c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22a10:	0005303a 	rdctl	r2,status
   22a14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22a18:	e0fffb17 	ldw	r3,-20(fp)
   22a1c:	00bfff84 	movi	r2,-2
   22a20:	1884703a 	and	r2,r3,r2
   22a24:	1001703a 	wrctl	status,r2
  
  return context;
   22a28:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22a2c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   22a30:	00c00044 	movi	r3,1
   22a34:	e0bffa17 	ldw	r2,-24(fp)
   22a38:	1884983a 	sll	r2,r3,r2
   22a3c:	1007883a 	mov	r3,r2
   22a40:	d0a5a417 	ldw	r2,-26992(gp)
   22a44:	1884b03a 	or	r2,r3,r2
   22a48:	d0a5a415 	stw	r2,-26992(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22a4c:	d0a5a417 	ldw	r2,-26992(gp)
   22a50:	100170fa 	wrctl	ienable,r2
   22a54:	e0bffc17 	ldw	r2,-16(fp)
   22a58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22a5c:	e0bffd17 	ldw	r2,-12(fp)
   22a60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22a64:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   22a68:	0001883a 	nop
}
   22a6c:	e037883a 	mov	sp,fp
   22a70:	df000017 	ldw	fp,0(sp)
   22a74:	dec00104 	addi	sp,sp,4
   22a78:	f800283a 	ret

00022a7c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   22a7c:	defff904 	addi	sp,sp,-28
   22a80:	df000615 	stw	fp,24(sp)
   22a84:	df000604 	addi	fp,sp,24
   22a88:	e13ffe15 	stw	r4,-8(fp)
   22a8c:	e17fff15 	stw	r5,-4(fp)
   22a90:	e0bfff17 	ldw	r2,-4(fp)
   22a94:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22a98:	0005303a 	rdctl	r2,status
   22a9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22aa0:	e0fffb17 	ldw	r3,-20(fp)
   22aa4:	00bfff84 	movi	r2,-2
   22aa8:	1884703a 	and	r2,r3,r2
   22aac:	1001703a 	wrctl	status,r2
  
  return context;
   22ab0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22ab4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   22ab8:	00c00044 	movi	r3,1
   22abc:	e0bffa17 	ldw	r2,-24(fp)
   22ac0:	1884983a 	sll	r2,r3,r2
   22ac4:	0084303a 	nor	r2,zero,r2
   22ac8:	1007883a 	mov	r3,r2
   22acc:	d0a5a417 	ldw	r2,-26992(gp)
   22ad0:	1884703a 	and	r2,r3,r2
   22ad4:	d0a5a415 	stw	r2,-26992(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22ad8:	d0a5a417 	ldw	r2,-26992(gp)
   22adc:	100170fa 	wrctl	ienable,r2
   22ae0:	e0bffc17 	ldw	r2,-16(fp)
   22ae4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22ae8:	e0bffd17 	ldw	r2,-12(fp)
   22aec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22af0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   22af4:	0001883a 	nop
}
   22af8:	e037883a 	mov	sp,fp
   22afc:	df000017 	ldw	fp,0(sp)
   22b00:	dec00104 	addi	sp,sp,4
   22b04:	f800283a 	ret

00022b08 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   22b08:	defffc04 	addi	sp,sp,-16
   22b0c:	df000315 	stw	fp,12(sp)
   22b10:	df000304 	addi	fp,sp,12
   22b14:	e13ffe15 	stw	r4,-8(fp)
   22b18:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   22b1c:	000530fa 	rdctl	r2,ienable
   22b20:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   22b24:	00c00044 	movi	r3,1
   22b28:	e0bfff17 	ldw	r2,-4(fp)
   22b2c:	1884983a 	sll	r2,r3,r2
   22b30:	1007883a 	mov	r3,r2
   22b34:	e0bffd17 	ldw	r2,-12(fp)
   22b38:	1884703a 	and	r2,r3,r2
   22b3c:	1004c03a 	cmpne	r2,r2,zero
   22b40:	10803fcc 	andi	r2,r2,255
}
   22b44:	e037883a 	mov	sp,fp
   22b48:	df000017 	ldw	fp,0(sp)
   22b4c:	dec00104 	addi	sp,sp,4
   22b50:	f800283a 	ret

00022b54 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   22b54:	defff504 	addi	sp,sp,-44
   22b58:	dfc00a15 	stw	ra,40(sp)
   22b5c:	df000915 	stw	fp,36(sp)
   22b60:	df000904 	addi	fp,sp,36
   22b64:	e13ffc15 	stw	r4,-16(fp)
   22b68:	e17ffd15 	stw	r5,-12(fp)
   22b6c:	e1bffe15 	stw	r6,-8(fp)
   22b70:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   22b74:	00bffa84 	movi	r2,-22
   22b78:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   22b7c:	e0bffd17 	ldw	r2,-12(fp)
   22b80:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   22b84:	e0bff817 	ldw	r2,-32(fp)
   22b88:	10800808 	cmpgei	r2,r2,32
   22b8c:	1000271e 	bne	r2,zero,22c2c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22b90:	0005303a 	rdctl	r2,status
   22b94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22b98:	e0fffb17 	ldw	r3,-20(fp)
   22b9c:	00bfff84 	movi	r2,-2
   22ba0:	1884703a 	and	r2,r3,r2
   22ba4:	1001703a 	wrctl	status,r2
  
  return context;
   22ba8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   22bac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   22bb0:	008000b4 	movhi	r2,2
   22bb4:	109a3a04 	addi	r2,r2,26856
   22bb8:	e0fff817 	ldw	r3,-32(fp)
   22bbc:	180690fa 	slli	r3,r3,3
   22bc0:	10c5883a 	add	r2,r2,r3
   22bc4:	e0fffe17 	ldw	r3,-8(fp)
   22bc8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   22bcc:	008000b4 	movhi	r2,2
   22bd0:	109a3a04 	addi	r2,r2,26856
   22bd4:	e0fff817 	ldw	r3,-32(fp)
   22bd8:	180690fa 	slli	r3,r3,3
   22bdc:	10c5883a 	add	r2,r2,r3
   22be0:	10800104 	addi	r2,r2,4
   22be4:	e0ffff17 	ldw	r3,-4(fp)
   22be8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   22bec:	e0bffe17 	ldw	r2,-8(fp)
   22bf0:	10000526 	beq	r2,zero,22c08 <alt_iic_isr_register+0xb4>
   22bf4:	e0bff817 	ldw	r2,-32(fp)
   22bf8:	100b883a 	mov	r5,r2
   22bfc:	e13ffc17 	ldw	r4,-16(fp)
   22c00:	00229f40 	call	229f4 <alt_ic_irq_enable>
   22c04:	00000406 	br	22c18 <alt_iic_isr_register+0xc4>
   22c08:	e0bff817 	ldw	r2,-32(fp)
   22c0c:	100b883a 	mov	r5,r2
   22c10:	e13ffc17 	ldw	r4,-16(fp)
   22c14:	0022a7c0 	call	22a7c <alt_ic_irq_disable>
   22c18:	e0bff715 	stw	r2,-36(fp)
   22c1c:	e0bffa17 	ldw	r2,-24(fp)
   22c20:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22c24:	e0bff917 	ldw	r2,-28(fp)
   22c28:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   22c2c:	e0bff717 	ldw	r2,-36(fp)
}
   22c30:	e037883a 	mov	sp,fp
   22c34:	dfc00117 	ldw	ra,4(sp)
   22c38:	df000017 	ldw	fp,0(sp)
   22c3c:	dec00204 	addi	sp,sp,8
   22c40:	f800283a 	ret

00022c44 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   22c44:	defff904 	addi	sp,sp,-28
   22c48:	dfc00615 	stw	ra,24(sp)
   22c4c:	df000515 	stw	fp,20(sp)
   22c50:	df000504 	addi	fp,sp,20
   22c54:	e13ffc15 	stw	r4,-16(fp)
   22c58:	e17ffd15 	stw	r5,-12(fp)
   22c5c:	e1bffe15 	stw	r6,-8(fp)
   22c60:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   22c64:	e1bfff17 	ldw	r6,-4(fp)
   22c68:	e17ffe17 	ldw	r5,-8(fp)
   22c6c:	e13ffd17 	ldw	r4,-12(fp)
   22c70:	0022e840 	call	22e84 <open>
   22c74:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   22c78:	e0bffb17 	ldw	r2,-20(fp)
   22c7c:	10001c16 	blt	r2,zero,22cf0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   22c80:	008000b4 	movhi	r2,2
   22c84:	10932804 	addi	r2,r2,19616
   22c88:	e0fffb17 	ldw	r3,-20(fp)
   22c8c:	18c00324 	muli	r3,r3,12
   22c90:	10c5883a 	add	r2,r2,r3
   22c94:	10c00017 	ldw	r3,0(r2)
   22c98:	e0bffc17 	ldw	r2,-16(fp)
   22c9c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   22ca0:	008000b4 	movhi	r2,2
   22ca4:	10932804 	addi	r2,r2,19616
   22ca8:	e0fffb17 	ldw	r3,-20(fp)
   22cac:	18c00324 	muli	r3,r3,12
   22cb0:	10c5883a 	add	r2,r2,r3
   22cb4:	10800104 	addi	r2,r2,4
   22cb8:	10c00017 	ldw	r3,0(r2)
   22cbc:	e0bffc17 	ldw	r2,-16(fp)
   22cc0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   22cc4:	008000b4 	movhi	r2,2
   22cc8:	10932804 	addi	r2,r2,19616
   22ccc:	e0fffb17 	ldw	r3,-20(fp)
   22cd0:	18c00324 	muli	r3,r3,12
   22cd4:	10c5883a 	add	r2,r2,r3
   22cd8:	10800204 	addi	r2,r2,8
   22cdc:	10c00017 	ldw	r3,0(r2)
   22ce0:	e0bffc17 	ldw	r2,-16(fp)
   22ce4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   22ce8:	e13ffb17 	ldw	r4,-20(fp)
   22cec:	0022fd80 	call	22fd8 <alt_release_fd>
  }
} 
   22cf0:	0001883a 	nop
   22cf4:	e037883a 	mov	sp,fp
   22cf8:	dfc00117 	ldw	ra,4(sp)
   22cfc:	df000017 	ldw	fp,0(sp)
   22d00:	dec00204 	addi	sp,sp,8
   22d04:	f800283a 	ret

00022d08 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   22d08:	defffb04 	addi	sp,sp,-20
   22d0c:	dfc00415 	stw	ra,16(sp)
   22d10:	df000315 	stw	fp,12(sp)
   22d14:	df000304 	addi	fp,sp,12
   22d18:	e13ffd15 	stw	r4,-12(fp)
   22d1c:	e17ffe15 	stw	r5,-8(fp)
   22d20:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   22d24:	01c07fc4 	movi	r7,511
   22d28:	01800044 	movi	r6,1
   22d2c:	e17ffd17 	ldw	r5,-12(fp)
   22d30:	010000b4 	movhi	r4,2
   22d34:	21132b04 	addi	r4,r4,19628
   22d38:	0022c440 	call	22c44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   22d3c:	01c07fc4 	movi	r7,511
   22d40:	000d883a 	mov	r6,zero
   22d44:	e17ffe17 	ldw	r5,-8(fp)
   22d48:	010000b4 	movhi	r4,2
   22d4c:	21132804 	addi	r4,r4,19616
   22d50:	0022c440 	call	22c44 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   22d54:	01c07fc4 	movi	r7,511
   22d58:	01800044 	movi	r6,1
   22d5c:	e17fff17 	ldw	r5,-4(fp)
   22d60:	010000b4 	movhi	r4,2
   22d64:	21132e04 	addi	r4,r4,19640
   22d68:	0022c440 	call	22c44 <alt_open_fd>
}  
   22d6c:	0001883a 	nop
   22d70:	e037883a 	mov	sp,fp
   22d74:	dfc00117 	ldw	ra,4(sp)
   22d78:	df000017 	ldw	fp,0(sp)
   22d7c:	dec00204 	addi	sp,sp,8
   22d80:	f800283a 	ret

00022d84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22d84:	defffe04 	addi	sp,sp,-8
   22d88:	dfc00115 	stw	ra,4(sp)
   22d8c:	df000015 	stw	fp,0(sp)
   22d90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22d94:	d0a00517 	ldw	r2,-32748(gp)
   22d98:	10000326 	beq	r2,zero,22da8 <alt_get_errno+0x24>
   22d9c:	d0a00517 	ldw	r2,-32748(gp)
   22da0:	103ee83a 	callr	r2
   22da4:	00000106 	br	22dac <alt_get_errno+0x28>
   22da8:	d0a5a804 	addi	r2,gp,-26976
}
   22dac:	e037883a 	mov	sp,fp
   22db0:	dfc00117 	ldw	ra,4(sp)
   22db4:	df000017 	ldw	fp,0(sp)
   22db8:	dec00204 	addi	sp,sp,8
   22dbc:	f800283a 	ret

00022dc0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   22dc0:	defffd04 	addi	sp,sp,-12
   22dc4:	df000215 	stw	fp,8(sp)
   22dc8:	df000204 	addi	fp,sp,8
   22dcc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   22dd0:	e0bfff17 	ldw	r2,-4(fp)
   22dd4:	10800217 	ldw	r2,8(r2)
   22dd8:	10d00034 	orhi	r3,r2,16384
   22ddc:	e0bfff17 	ldw	r2,-4(fp)
   22de0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22de4:	e03ffe15 	stw	zero,-8(fp)
   22de8:	00001d06 	br	22e60 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22dec:	008000b4 	movhi	r2,2
   22df0:	10932804 	addi	r2,r2,19616
   22df4:	e0fffe17 	ldw	r3,-8(fp)
   22df8:	18c00324 	muli	r3,r3,12
   22dfc:	10c5883a 	add	r2,r2,r3
   22e00:	10c00017 	ldw	r3,0(r2)
   22e04:	e0bfff17 	ldw	r2,-4(fp)
   22e08:	10800017 	ldw	r2,0(r2)
   22e0c:	1880111e 	bne	r3,r2,22e54 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22e10:	008000b4 	movhi	r2,2
   22e14:	10932804 	addi	r2,r2,19616
   22e18:	e0fffe17 	ldw	r3,-8(fp)
   22e1c:	18c00324 	muli	r3,r3,12
   22e20:	10c5883a 	add	r2,r2,r3
   22e24:	10800204 	addi	r2,r2,8
   22e28:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22e2c:	1000090e 	bge	r2,zero,22e54 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   22e30:	e0bffe17 	ldw	r2,-8(fp)
   22e34:	10c00324 	muli	r3,r2,12
   22e38:	008000b4 	movhi	r2,2
   22e3c:	10932804 	addi	r2,r2,19616
   22e40:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22e44:	e0bfff17 	ldw	r2,-4(fp)
   22e48:	18800226 	beq	r3,r2,22e54 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   22e4c:	00bffcc4 	movi	r2,-13
   22e50:	00000806 	br	22e74 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   22e54:	e0bffe17 	ldw	r2,-8(fp)
   22e58:	10800044 	addi	r2,r2,1
   22e5c:	e0bffe15 	stw	r2,-8(fp)
   22e60:	d0a00417 	ldw	r2,-32752(gp)
   22e64:	1007883a 	mov	r3,r2
   22e68:	e0bffe17 	ldw	r2,-8(fp)
   22e6c:	18bfdf2e 	bgeu	r3,r2,22dec <__alt_data_end+0xfffe2dec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   22e70:	0005883a 	mov	r2,zero
}
   22e74:	e037883a 	mov	sp,fp
   22e78:	df000017 	ldw	fp,0(sp)
   22e7c:	dec00104 	addi	sp,sp,4
   22e80:	f800283a 	ret

00022e84 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   22e84:	defff604 	addi	sp,sp,-40
   22e88:	dfc00915 	stw	ra,36(sp)
   22e8c:	df000815 	stw	fp,32(sp)
   22e90:	df000804 	addi	fp,sp,32
   22e94:	e13ffd15 	stw	r4,-12(fp)
   22e98:	e17ffe15 	stw	r5,-8(fp)
   22e9c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   22ea0:	00bfffc4 	movi	r2,-1
   22ea4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   22ea8:	00bffb44 	movi	r2,-19
   22eac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   22eb0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   22eb4:	d1600204 	addi	r5,gp,-32760
   22eb8:	e13ffd17 	ldw	r4,-12(fp)
   22ebc:	00232040 	call	23204 <alt_find_dev>
   22ec0:	e0bff815 	stw	r2,-32(fp)
   22ec4:	e0bff817 	ldw	r2,-32(fp)
   22ec8:	1000051e 	bne	r2,zero,22ee0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   22ecc:	e13ffd17 	ldw	r4,-12(fp)
   22ed0:	00232940 	call	23294 <alt_find_file>
   22ed4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   22ed8:	00800044 	movi	r2,1
   22edc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   22ee0:	e0bff817 	ldw	r2,-32(fp)
   22ee4:	10002926 	beq	r2,zero,22f8c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   22ee8:	e13ff817 	ldw	r4,-32(fp)
   22eec:	002339c0 	call	2339c <alt_get_fd>
   22ef0:	e0bff915 	stw	r2,-28(fp)
   22ef4:	e0bff917 	ldw	r2,-28(fp)
   22ef8:	1000030e 	bge	r2,zero,22f08 <open+0x84>
    {
      status = index;
   22efc:	e0bff917 	ldw	r2,-28(fp)
   22f00:	e0bffa15 	stw	r2,-24(fp)
   22f04:	00002306 	br	22f94 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   22f08:	e0bff917 	ldw	r2,-28(fp)
   22f0c:	10c00324 	muli	r3,r2,12
   22f10:	008000b4 	movhi	r2,2
   22f14:	10932804 	addi	r2,r2,19616
   22f18:	1885883a 	add	r2,r3,r2
   22f1c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   22f20:	e0fffe17 	ldw	r3,-8(fp)
   22f24:	00900034 	movhi	r2,16384
   22f28:	10bfffc4 	addi	r2,r2,-1
   22f2c:	1886703a 	and	r3,r3,r2
   22f30:	e0bffc17 	ldw	r2,-16(fp)
   22f34:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   22f38:	e0bffb17 	ldw	r2,-20(fp)
   22f3c:	1000051e 	bne	r2,zero,22f54 <open+0xd0>
   22f40:	e13ffc17 	ldw	r4,-16(fp)
   22f44:	0022dc00 	call	22dc0 <alt_file_locked>
   22f48:	e0bffa15 	stw	r2,-24(fp)
   22f4c:	e0bffa17 	ldw	r2,-24(fp)
   22f50:	10001016 	blt	r2,zero,22f94 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   22f54:	e0bff817 	ldw	r2,-32(fp)
   22f58:	10800317 	ldw	r2,12(r2)
   22f5c:	10000826 	beq	r2,zero,22f80 <open+0xfc>
   22f60:	e0bff817 	ldw	r2,-32(fp)
   22f64:	10800317 	ldw	r2,12(r2)
   22f68:	e1ffff17 	ldw	r7,-4(fp)
   22f6c:	e1bffe17 	ldw	r6,-8(fp)
   22f70:	e17ffd17 	ldw	r5,-12(fp)
   22f74:	e13ffc17 	ldw	r4,-16(fp)
   22f78:	103ee83a 	callr	r2
   22f7c:	00000106 	br	22f84 <open+0x100>
   22f80:	0005883a 	mov	r2,zero
   22f84:	e0bffa15 	stw	r2,-24(fp)
   22f88:	00000206 	br	22f94 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   22f8c:	00bffb44 	movi	r2,-19
   22f90:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   22f94:	e0bffa17 	ldw	r2,-24(fp)
   22f98:	1000090e 	bge	r2,zero,22fc0 <open+0x13c>
  {
    alt_release_fd (index);  
   22f9c:	e13ff917 	ldw	r4,-28(fp)
   22fa0:	0022fd80 	call	22fd8 <alt_release_fd>
    ALT_ERRNO = -status;
   22fa4:	0022d840 	call	22d84 <alt_get_errno>
   22fa8:	1007883a 	mov	r3,r2
   22fac:	e0bffa17 	ldw	r2,-24(fp)
   22fb0:	0085c83a 	sub	r2,zero,r2
   22fb4:	18800015 	stw	r2,0(r3)
    return -1;
   22fb8:	00bfffc4 	movi	r2,-1
   22fbc:	00000106 	br	22fc4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   22fc0:	e0bff917 	ldw	r2,-28(fp)
}
   22fc4:	e037883a 	mov	sp,fp
   22fc8:	dfc00117 	ldw	ra,4(sp)
   22fcc:	df000017 	ldw	fp,0(sp)
   22fd0:	dec00204 	addi	sp,sp,8
   22fd4:	f800283a 	ret

00022fd8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   22fd8:	defffe04 	addi	sp,sp,-8
   22fdc:	df000115 	stw	fp,4(sp)
   22fe0:	df000104 	addi	fp,sp,4
   22fe4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   22fe8:	e0bfff17 	ldw	r2,-4(fp)
   22fec:	108000d0 	cmplti	r2,r2,3
   22ff0:	10000d1e 	bne	r2,zero,23028 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   22ff4:	008000b4 	movhi	r2,2
   22ff8:	10932804 	addi	r2,r2,19616
   22ffc:	e0ffff17 	ldw	r3,-4(fp)
   23000:	18c00324 	muli	r3,r3,12
   23004:	10c5883a 	add	r2,r2,r3
   23008:	10800204 	addi	r2,r2,8
   2300c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23010:	008000b4 	movhi	r2,2
   23014:	10932804 	addi	r2,r2,19616
   23018:	e0ffff17 	ldw	r3,-4(fp)
   2301c:	18c00324 	muli	r3,r3,12
   23020:	10c5883a 	add	r2,r2,r3
   23024:	10000015 	stw	zero,0(r2)
  }
}
   23028:	0001883a 	nop
   2302c:	e037883a 	mov	sp,fp
   23030:	df000017 	ldw	fp,0(sp)
   23034:	dec00104 	addi	sp,sp,4
   23038:	f800283a 	ret

0002303c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2303c:	defffa04 	addi	sp,sp,-24
   23040:	df000515 	stw	fp,20(sp)
   23044:	df000504 	addi	fp,sp,20
   23048:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2304c:	0005303a 	rdctl	r2,status
   23050:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23054:	e0fffc17 	ldw	r3,-16(fp)
   23058:	00bfff84 	movi	r2,-2
   2305c:	1884703a 	and	r2,r3,r2
   23060:	1001703a 	wrctl	status,r2
  
  return context;
   23064:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   23068:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2306c:	e0bfff17 	ldw	r2,-4(fp)
   23070:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   23074:	e0bffd17 	ldw	r2,-12(fp)
   23078:	10800017 	ldw	r2,0(r2)
   2307c:	e0fffd17 	ldw	r3,-12(fp)
   23080:	18c00117 	ldw	r3,4(r3)
   23084:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   23088:	e0bffd17 	ldw	r2,-12(fp)
   2308c:	10800117 	ldw	r2,4(r2)
   23090:	e0fffd17 	ldw	r3,-12(fp)
   23094:	18c00017 	ldw	r3,0(r3)
   23098:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2309c:	e0bffd17 	ldw	r2,-12(fp)
   230a0:	e0fffd17 	ldw	r3,-12(fp)
   230a4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   230a8:	e0bffd17 	ldw	r2,-12(fp)
   230ac:	e0fffd17 	ldw	r3,-12(fp)
   230b0:	10c00015 	stw	r3,0(r2)
   230b4:	e0bffb17 	ldw	r2,-20(fp)
   230b8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   230bc:	e0bffe17 	ldw	r2,-8(fp)
   230c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   230c4:	0001883a 	nop
   230c8:	e037883a 	mov	sp,fp
   230cc:	df000017 	ldw	fp,0(sp)
   230d0:	dec00104 	addi	sp,sp,4
   230d4:	f800283a 	ret

000230d8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   230d8:	defffb04 	addi	sp,sp,-20
   230dc:	dfc00415 	stw	ra,16(sp)
   230e0:	df000315 	stw	fp,12(sp)
   230e4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   230e8:	d0a00717 	ldw	r2,-32740(gp)
   230ec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   230f0:	d0a5a617 	ldw	r2,-26984(gp)
   230f4:	10800044 	addi	r2,r2,1
   230f8:	d0a5a615 	stw	r2,-26984(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   230fc:	00002e06 	br	231b8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   23100:	e0bffd17 	ldw	r2,-12(fp)
   23104:	10800017 	ldw	r2,0(r2)
   23108:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2310c:	e0bffd17 	ldw	r2,-12(fp)
   23110:	10800403 	ldbu	r2,16(r2)
   23114:	10803fcc 	andi	r2,r2,255
   23118:	10000426 	beq	r2,zero,2312c <alt_tick+0x54>
   2311c:	d0a5a617 	ldw	r2,-26984(gp)
   23120:	1000021e 	bne	r2,zero,2312c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   23124:	e0bffd17 	ldw	r2,-12(fp)
   23128:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2312c:	e0bffd17 	ldw	r2,-12(fp)
   23130:	10800217 	ldw	r2,8(r2)
   23134:	d0e5a617 	ldw	r3,-26984(gp)
   23138:	18801d36 	bltu	r3,r2,231b0 <alt_tick+0xd8>
   2313c:	e0bffd17 	ldw	r2,-12(fp)
   23140:	10800403 	ldbu	r2,16(r2)
   23144:	10803fcc 	andi	r2,r2,255
   23148:	1000191e 	bne	r2,zero,231b0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2314c:	e0bffd17 	ldw	r2,-12(fp)
   23150:	10800317 	ldw	r2,12(r2)
   23154:	e0fffd17 	ldw	r3,-12(fp)
   23158:	18c00517 	ldw	r3,20(r3)
   2315c:	1809883a 	mov	r4,r3
   23160:	103ee83a 	callr	r2
   23164:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   23168:	e0bfff17 	ldw	r2,-4(fp)
   2316c:	1000031e 	bne	r2,zero,2317c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   23170:	e13ffd17 	ldw	r4,-12(fp)
   23174:	002303c0 	call	2303c <alt_alarm_stop>
   23178:	00000d06 	br	231b0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2317c:	e0bffd17 	ldw	r2,-12(fp)
   23180:	10c00217 	ldw	r3,8(r2)
   23184:	e0bfff17 	ldw	r2,-4(fp)
   23188:	1887883a 	add	r3,r3,r2
   2318c:	e0bffd17 	ldw	r2,-12(fp)
   23190:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   23194:	e0bffd17 	ldw	r2,-12(fp)
   23198:	10c00217 	ldw	r3,8(r2)
   2319c:	d0a5a617 	ldw	r2,-26984(gp)
   231a0:	1880032e 	bgeu	r3,r2,231b0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   231a4:	e0bffd17 	ldw	r2,-12(fp)
   231a8:	00c00044 	movi	r3,1
   231ac:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   231b0:	e0bffe17 	ldw	r2,-8(fp)
   231b4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   231b8:	e0fffd17 	ldw	r3,-12(fp)
   231bc:	d0a00704 	addi	r2,gp,-32740
   231c0:	18bfcf1e 	bne	r3,r2,23100 <__alt_data_end+0xfffe3100>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   231c4:	0001883a 	nop
}
   231c8:	0001883a 	nop
   231cc:	e037883a 	mov	sp,fp
   231d0:	dfc00117 	ldw	ra,4(sp)
   231d4:	df000017 	ldw	fp,0(sp)
   231d8:	dec00204 	addi	sp,sp,8
   231dc:	f800283a 	ret

000231e0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   231e0:	deffff04 	addi	sp,sp,-4
   231e4:	df000015 	stw	fp,0(sp)
   231e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   231ec:	000170fa 	wrctl	ienable,zero
}
   231f0:	0001883a 	nop
   231f4:	e037883a 	mov	sp,fp
   231f8:	df000017 	ldw	fp,0(sp)
   231fc:	dec00104 	addi	sp,sp,4
   23200:	f800283a 	ret

00023204 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   23204:	defffa04 	addi	sp,sp,-24
   23208:	dfc00515 	stw	ra,20(sp)
   2320c:	df000415 	stw	fp,16(sp)
   23210:	df000404 	addi	fp,sp,16
   23214:	e13ffe15 	stw	r4,-8(fp)
   23218:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2321c:	e0bfff17 	ldw	r2,-4(fp)
   23220:	10800017 	ldw	r2,0(r2)
   23224:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   23228:	e13ffe17 	ldw	r4,-8(fp)
   2322c:	002377c0 	call	2377c <strlen>
   23230:	10800044 	addi	r2,r2,1
   23234:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   23238:	00000d06 	br	23270 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2323c:	e0bffc17 	ldw	r2,-16(fp)
   23240:	10800217 	ldw	r2,8(r2)
   23244:	e0fffd17 	ldw	r3,-12(fp)
   23248:	180d883a 	mov	r6,r3
   2324c:	e17ffe17 	ldw	r5,-8(fp)
   23250:	1009883a 	mov	r4,r2
   23254:	00235b80 	call	235b8 <memcmp>
   23258:	1000021e 	bne	r2,zero,23264 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2325c:	e0bffc17 	ldw	r2,-16(fp)
   23260:	00000706 	br	23280 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   23264:	e0bffc17 	ldw	r2,-16(fp)
   23268:	10800017 	ldw	r2,0(r2)
   2326c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   23270:	e0fffc17 	ldw	r3,-16(fp)
   23274:	e0bfff17 	ldw	r2,-4(fp)
   23278:	18bff01e 	bne	r3,r2,2323c <__alt_data_end+0xfffe323c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2327c:	0005883a 	mov	r2,zero
}
   23280:	e037883a 	mov	sp,fp
   23284:	dfc00117 	ldw	ra,4(sp)
   23288:	df000017 	ldw	fp,0(sp)
   2328c:	dec00204 	addi	sp,sp,8
   23290:	f800283a 	ret

00023294 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   23294:	defffb04 	addi	sp,sp,-20
   23298:	dfc00415 	stw	ra,16(sp)
   2329c:	df000315 	stw	fp,12(sp)
   232a0:	df000304 	addi	fp,sp,12
   232a4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   232a8:	d0a00017 	ldw	r2,-32768(gp)
   232ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   232b0:	00003106 	br	23378 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   232b4:	e0bffd17 	ldw	r2,-12(fp)
   232b8:	10800217 	ldw	r2,8(r2)
   232bc:	1009883a 	mov	r4,r2
   232c0:	002377c0 	call	2377c <strlen>
   232c4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   232c8:	e0bffd17 	ldw	r2,-12(fp)
   232cc:	10c00217 	ldw	r3,8(r2)
   232d0:	e0bffe17 	ldw	r2,-8(fp)
   232d4:	10bfffc4 	addi	r2,r2,-1
   232d8:	1885883a 	add	r2,r3,r2
   232dc:	10800003 	ldbu	r2,0(r2)
   232e0:	10803fcc 	andi	r2,r2,255
   232e4:	1080201c 	xori	r2,r2,128
   232e8:	10bfe004 	addi	r2,r2,-128
   232ec:	10800bd8 	cmpnei	r2,r2,47
   232f0:	1000031e 	bne	r2,zero,23300 <alt_find_file+0x6c>
    {
      len -= 1;
   232f4:	e0bffe17 	ldw	r2,-8(fp)
   232f8:	10bfffc4 	addi	r2,r2,-1
   232fc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   23300:	e0bffe17 	ldw	r2,-8(fp)
   23304:	e0ffff17 	ldw	r3,-4(fp)
   23308:	1885883a 	add	r2,r3,r2
   2330c:	10800003 	ldbu	r2,0(r2)
   23310:	10803fcc 	andi	r2,r2,255
   23314:	1080201c 	xori	r2,r2,128
   23318:	10bfe004 	addi	r2,r2,-128
   2331c:	10800be0 	cmpeqi	r2,r2,47
   23320:	1000081e 	bne	r2,zero,23344 <alt_find_file+0xb0>
   23324:	e0bffe17 	ldw	r2,-8(fp)
   23328:	e0ffff17 	ldw	r3,-4(fp)
   2332c:	1885883a 	add	r2,r3,r2
   23330:	10800003 	ldbu	r2,0(r2)
   23334:	10803fcc 	andi	r2,r2,255
   23338:	1080201c 	xori	r2,r2,128
   2333c:	10bfe004 	addi	r2,r2,-128
   23340:	10000a1e 	bne	r2,zero,2336c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   23344:	e0bffd17 	ldw	r2,-12(fp)
   23348:	10800217 	ldw	r2,8(r2)
   2334c:	e0fffe17 	ldw	r3,-8(fp)
   23350:	180d883a 	mov	r6,r3
   23354:	e17fff17 	ldw	r5,-4(fp)
   23358:	1009883a 	mov	r4,r2
   2335c:	00235b80 	call	235b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   23360:	1000021e 	bne	r2,zero,2336c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   23364:	e0bffd17 	ldw	r2,-12(fp)
   23368:	00000706 	br	23388 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   2336c:	e0bffd17 	ldw	r2,-12(fp)
   23370:	10800017 	ldw	r2,0(r2)
   23374:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   23378:	e0fffd17 	ldw	r3,-12(fp)
   2337c:	d0a00004 	addi	r2,gp,-32768
   23380:	18bfcc1e 	bne	r3,r2,232b4 <__alt_data_end+0xfffe32b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   23384:	0005883a 	mov	r2,zero
}
   23388:	e037883a 	mov	sp,fp
   2338c:	dfc00117 	ldw	ra,4(sp)
   23390:	df000017 	ldw	fp,0(sp)
   23394:	dec00204 	addi	sp,sp,8
   23398:	f800283a 	ret

0002339c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2339c:	defffc04 	addi	sp,sp,-16
   233a0:	df000315 	stw	fp,12(sp)
   233a4:	df000304 	addi	fp,sp,12
   233a8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   233ac:	00bffa04 	movi	r2,-24
   233b0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   233b4:	e03ffd15 	stw	zero,-12(fp)
   233b8:	00001906 	br	23420 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   233bc:	008000b4 	movhi	r2,2
   233c0:	10932804 	addi	r2,r2,19616
   233c4:	e0fffd17 	ldw	r3,-12(fp)
   233c8:	18c00324 	muli	r3,r3,12
   233cc:	10c5883a 	add	r2,r2,r3
   233d0:	10800017 	ldw	r2,0(r2)
   233d4:	10000f1e 	bne	r2,zero,23414 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   233d8:	008000b4 	movhi	r2,2
   233dc:	10932804 	addi	r2,r2,19616
   233e0:	e0fffd17 	ldw	r3,-12(fp)
   233e4:	18c00324 	muli	r3,r3,12
   233e8:	10c5883a 	add	r2,r2,r3
   233ec:	e0ffff17 	ldw	r3,-4(fp)
   233f0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   233f4:	d0e00417 	ldw	r3,-32752(gp)
   233f8:	e0bffd17 	ldw	r2,-12(fp)
   233fc:	1880020e 	bge	r3,r2,23408 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   23400:	e0bffd17 	ldw	r2,-12(fp)
   23404:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   23408:	e0bffd17 	ldw	r2,-12(fp)
   2340c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   23410:	00000606 	br	2342c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   23414:	e0bffd17 	ldw	r2,-12(fp)
   23418:	10800044 	addi	r2,r2,1
   2341c:	e0bffd15 	stw	r2,-12(fp)
   23420:	e0bffd17 	ldw	r2,-12(fp)
   23424:	10800810 	cmplti	r2,r2,32
   23428:	103fe41e 	bne	r2,zero,233bc <__alt_data_end+0xfffe33bc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2342c:	e0bffe17 	ldw	r2,-8(fp)
}
   23430:	e037883a 	mov	sp,fp
   23434:	df000017 	ldw	fp,0(sp)
   23438:	dec00104 	addi	sp,sp,4
   2343c:	f800283a 	ret

00023440 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   23440:	defffb04 	addi	sp,sp,-20
   23444:	df000415 	stw	fp,16(sp)
   23448:	df000404 	addi	fp,sp,16
   2344c:	e13ffe15 	stw	r4,-8(fp)
   23450:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   23454:	e0bfff17 	ldw	r2,-4(fp)
   23458:	10840070 	cmpltui	r2,r2,4097
   2345c:	1000021e 	bne	r2,zero,23468 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   23460:	00840004 	movi	r2,4096
   23464:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   23468:	e0fffe17 	ldw	r3,-8(fp)
   2346c:	e0bfff17 	ldw	r2,-4(fp)
   23470:	1885883a 	add	r2,r3,r2
   23474:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   23478:	e0bffe17 	ldw	r2,-8(fp)
   2347c:	e0bffc15 	stw	r2,-16(fp)
   23480:	00000506 	br	23498 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   23484:	e0bffc17 	ldw	r2,-16(fp)
   23488:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2348c:	e0bffc17 	ldw	r2,-16(fp)
   23490:	10800804 	addi	r2,r2,32
   23494:	e0bffc15 	stw	r2,-16(fp)
   23498:	e0fffc17 	ldw	r3,-16(fp)
   2349c:	e0bffd17 	ldw	r2,-12(fp)
   234a0:	18bff836 	bltu	r3,r2,23484 <__alt_data_end+0xfffe3484>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   234a4:	e0bffe17 	ldw	r2,-8(fp)
   234a8:	108007cc 	andi	r2,r2,31
   234ac:	10000226 	beq	r2,zero,234b8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   234b0:	e0bffc17 	ldw	r2,-16(fp)
   234b4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   234b8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   234bc:	0001883a 	nop
   234c0:	e037883a 	mov	sp,fp
   234c4:	df000017 	ldw	fp,0(sp)
   234c8:	dec00104 	addi	sp,sp,4
   234cc:	f800283a 	ret

000234d0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   234d0:	defffe04 	addi	sp,sp,-8
   234d4:	df000115 	stw	fp,4(sp)
   234d8:	df000104 	addi	fp,sp,4
   234dc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   234e0:	e0bfff17 	ldw	r2,-4(fp)
   234e4:	10bffe84 	addi	r2,r2,-6
   234e8:	10c00428 	cmpgeui	r3,r2,16
   234ec:	18001a1e 	bne	r3,zero,23558 <alt_exception_cause_generated_bad_addr+0x88>
   234f0:	100690ba 	slli	r3,r2,2
   234f4:	008000b4 	movhi	r2,2
   234f8:	108d4204 	addi	r2,r2,13576
   234fc:	1885883a 	add	r2,r3,r2
   23500:	10800017 	ldw	r2,0(r2)
   23504:	1000683a 	jmp	r2
   23508:	00023548 	cmpgei	zero,zero,2261
   2350c:	00023548 	cmpgei	zero,zero,2261
   23510:	00023558 	cmpnei	zero,zero,2261
   23514:	00023558 	cmpnei	zero,zero,2261
   23518:	00023558 	cmpnei	zero,zero,2261
   2351c:	00023548 	cmpgei	zero,zero,2261
   23520:	00023550 	cmplti	zero,zero,2261
   23524:	00023558 	cmpnei	zero,zero,2261
   23528:	00023548 	cmpgei	zero,zero,2261
   2352c:	00023548 	cmpgei	zero,zero,2261
   23530:	00023558 	cmpnei	zero,zero,2261
   23534:	00023548 	cmpgei	zero,zero,2261
   23538:	00023550 	cmplti	zero,zero,2261
   2353c:	00023558 	cmpnei	zero,zero,2261
   23540:	00023558 	cmpnei	zero,zero,2261
   23544:	00023548 	cmpgei	zero,zero,2261
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   23548:	00800044 	movi	r2,1
   2354c:	00000306 	br	2355c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   23550:	0005883a 	mov	r2,zero
   23554:	00000106 	br	2355c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   23558:	0005883a 	mov	r2,zero
  }
}
   2355c:	e037883a 	mov	sp,fp
   23560:	df000017 	ldw	fp,0(sp)
   23564:	dec00104 	addi	sp,sp,4
   23568:	f800283a 	ret

0002356c <atexit>:
   2356c:	200b883a 	mov	r5,r4
   23570:	000f883a 	mov	r7,zero
   23574:	000d883a 	mov	r6,zero
   23578:	0009883a 	mov	r4,zero
   2357c:	00238141 	jmpi	23814 <__register_exitproc>

00023580 <exit>:
   23580:	defffe04 	addi	sp,sp,-8
   23584:	000b883a 	mov	r5,zero
   23588:	dc000015 	stw	r16,0(sp)
   2358c:	dfc00115 	stw	ra,4(sp)
   23590:	2021883a 	mov	r16,r4
   23594:	002392c0 	call	2392c <__call_exitprocs>
   23598:	008000b4 	movhi	r2,2
   2359c:	10949a04 	addi	r2,r2,21096
   235a0:	11000017 	ldw	r4,0(r2)
   235a4:	20800f17 	ldw	r2,60(r4)
   235a8:	10000126 	beq	r2,zero,235b0 <exit+0x30>
   235ac:	103ee83a 	callr	r2
   235b0:	8009883a 	mov	r4,r16
   235b4:	0023aac0 	call	23aac <_exit>

000235b8 <memcmp>:
   235b8:	01c000c4 	movi	r7,3
   235bc:	3980192e 	bgeu	r7,r6,23624 <memcmp+0x6c>
   235c0:	2144b03a 	or	r2,r4,r5
   235c4:	11c4703a 	and	r2,r2,r7
   235c8:	10000f26 	beq	r2,zero,23608 <memcmp+0x50>
   235cc:	20800003 	ldbu	r2,0(r4)
   235d0:	28c00003 	ldbu	r3,0(r5)
   235d4:	10c0151e 	bne	r2,r3,2362c <memcmp+0x74>
   235d8:	31bfff84 	addi	r6,r6,-2
   235dc:	01ffffc4 	movi	r7,-1
   235e0:	00000406 	br	235f4 <memcmp+0x3c>
   235e4:	20800003 	ldbu	r2,0(r4)
   235e8:	28c00003 	ldbu	r3,0(r5)
   235ec:	31bfffc4 	addi	r6,r6,-1
   235f0:	10c00e1e 	bne	r2,r3,2362c <memcmp+0x74>
   235f4:	21000044 	addi	r4,r4,1
   235f8:	29400044 	addi	r5,r5,1
   235fc:	31fff91e 	bne	r6,r7,235e4 <__alt_data_end+0xfffe35e4>
   23600:	0005883a 	mov	r2,zero
   23604:	f800283a 	ret
   23608:	20c00017 	ldw	r3,0(r4)
   2360c:	28800017 	ldw	r2,0(r5)
   23610:	18bfee1e 	bne	r3,r2,235cc <__alt_data_end+0xfffe35cc>
   23614:	31bfff04 	addi	r6,r6,-4
   23618:	21000104 	addi	r4,r4,4
   2361c:	29400104 	addi	r5,r5,4
   23620:	39bff936 	bltu	r7,r6,23608 <__alt_data_end+0xfffe3608>
   23624:	303fe91e 	bne	r6,zero,235cc <__alt_data_end+0xfffe35cc>
   23628:	003ff506 	br	23600 <__alt_data_end+0xfffe3600>
   2362c:	10c5c83a 	sub	r2,r2,r3
   23630:	f800283a 	ret

00023634 <memcpy>:
   23634:	defffd04 	addi	sp,sp,-12
   23638:	dfc00215 	stw	ra,8(sp)
   2363c:	dc400115 	stw	r17,4(sp)
   23640:	dc000015 	stw	r16,0(sp)
   23644:	00c003c4 	movi	r3,15
   23648:	2005883a 	mov	r2,r4
   2364c:	1980452e 	bgeu	r3,r6,23764 <memcpy+0x130>
   23650:	2906b03a 	or	r3,r5,r4
   23654:	18c000cc 	andi	r3,r3,3
   23658:	1800441e 	bne	r3,zero,2376c <memcpy+0x138>
   2365c:	347ffc04 	addi	r17,r6,-16
   23660:	8822d13a 	srli	r17,r17,4
   23664:	28c00104 	addi	r3,r5,4
   23668:	23400104 	addi	r13,r4,4
   2366c:	8820913a 	slli	r16,r17,4
   23670:	2b000204 	addi	r12,r5,8
   23674:	22c00204 	addi	r11,r4,8
   23678:	84000504 	addi	r16,r16,20
   2367c:	2a800304 	addi	r10,r5,12
   23680:	22400304 	addi	r9,r4,12
   23684:	2c21883a 	add	r16,r5,r16
   23688:	2811883a 	mov	r8,r5
   2368c:	200f883a 	mov	r7,r4
   23690:	41000017 	ldw	r4,0(r8)
   23694:	1fc00017 	ldw	ra,0(r3)
   23698:	63c00017 	ldw	r15,0(r12)
   2369c:	39000015 	stw	r4,0(r7)
   236a0:	53800017 	ldw	r14,0(r10)
   236a4:	6fc00015 	stw	ra,0(r13)
   236a8:	5bc00015 	stw	r15,0(r11)
   236ac:	4b800015 	stw	r14,0(r9)
   236b0:	18c00404 	addi	r3,r3,16
   236b4:	39c00404 	addi	r7,r7,16
   236b8:	42000404 	addi	r8,r8,16
   236bc:	6b400404 	addi	r13,r13,16
   236c0:	63000404 	addi	r12,r12,16
   236c4:	5ac00404 	addi	r11,r11,16
   236c8:	52800404 	addi	r10,r10,16
   236cc:	4a400404 	addi	r9,r9,16
   236d0:	1c3fef1e 	bne	r3,r16,23690 <__alt_data_end+0xfffe3690>
   236d4:	89c00044 	addi	r7,r17,1
   236d8:	380e913a 	slli	r7,r7,4
   236dc:	310003cc 	andi	r4,r6,15
   236e0:	02c000c4 	movi	r11,3
   236e4:	11c7883a 	add	r3,r2,r7
   236e8:	29cb883a 	add	r5,r5,r7
   236ec:	5900212e 	bgeu	r11,r4,23774 <memcpy+0x140>
   236f0:	1813883a 	mov	r9,r3
   236f4:	2811883a 	mov	r8,r5
   236f8:	200f883a 	mov	r7,r4
   236fc:	42800017 	ldw	r10,0(r8)
   23700:	4a400104 	addi	r9,r9,4
   23704:	39ffff04 	addi	r7,r7,-4
   23708:	4abfff15 	stw	r10,-4(r9)
   2370c:	42000104 	addi	r8,r8,4
   23710:	59fffa36 	bltu	r11,r7,236fc <__alt_data_end+0xfffe36fc>
   23714:	213fff04 	addi	r4,r4,-4
   23718:	2008d0ba 	srli	r4,r4,2
   2371c:	318000cc 	andi	r6,r6,3
   23720:	21000044 	addi	r4,r4,1
   23724:	2109883a 	add	r4,r4,r4
   23728:	2109883a 	add	r4,r4,r4
   2372c:	1907883a 	add	r3,r3,r4
   23730:	290b883a 	add	r5,r5,r4
   23734:	30000626 	beq	r6,zero,23750 <memcpy+0x11c>
   23738:	198d883a 	add	r6,r3,r6
   2373c:	29c00003 	ldbu	r7,0(r5)
   23740:	18c00044 	addi	r3,r3,1
   23744:	29400044 	addi	r5,r5,1
   23748:	19ffffc5 	stb	r7,-1(r3)
   2374c:	19bffb1e 	bne	r3,r6,2373c <__alt_data_end+0xfffe373c>
   23750:	dfc00217 	ldw	ra,8(sp)
   23754:	dc400117 	ldw	r17,4(sp)
   23758:	dc000017 	ldw	r16,0(sp)
   2375c:	dec00304 	addi	sp,sp,12
   23760:	f800283a 	ret
   23764:	2007883a 	mov	r3,r4
   23768:	003ff206 	br	23734 <__alt_data_end+0xfffe3734>
   2376c:	2007883a 	mov	r3,r4
   23770:	003ff106 	br	23738 <__alt_data_end+0xfffe3738>
   23774:	200d883a 	mov	r6,r4
   23778:	003fee06 	br	23734 <__alt_data_end+0xfffe3734>

0002377c <strlen>:
   2377c:	208000cc 	andi	r2,r4,3
   23780:	10002026 	beq	r2,zero,23804 <strlen+0x88>
   23784:	20800007 	ldb	r2,0(r4)
   23788:	10002026 	beq	r2,zero,2380c <strlen+0x90>
   2378c:	2005883a 	mov	r2,r4
   23790:	00000206 	br	2379c <strlen+0x20>
   23794:	10c00007 	ldb	r3,0(r2)
   23798:	18001826 	beq	r3,zero,237fc <strlen+0x80>
   2379c:	10800044 	addi	r2,r2,1
   237a0:	10c000cc 	andi	r3,r2,3
   237a4:	183ffb1e 	bne	r3,zero,23794 <__alt_data_end+0xfffe3794>
   237a8:	10c00017 	ldw	r3,0(r2)
   237ac:	01ffbff4 	movhi	r7,65279
   237b0:	39ffbfc4 	addi	r7,r7,-257
   237b4:	00ca303a 	nor	r5,zero,r3
   237b8:	01a02074 	movhi	r6,32897
   237bc:	19c7883a 	add	r3,r3,r7
   237c0:	31a02004 	addi	r6,r6,-32640
   237c4:	1946703a 	and	r3,r3,r5
   237c8:	1986703a 	and	r3,r3,r6
   237cc:	1800091e 	bne	r3,zero,237f4 <strlen+0x78>
   237d0:	10800104 	addi	r2,r2,4
   237d4:	10c00017 	ldw	r3,0(r2)
   237d8:	19cb883a 	add	r5,r3,r7
   237dc:	00c6303a 	nor	r3,zero,r3
   237e0:	28c6703a 	and	r3,r5,r3
   237e4:	1986703a 	and	r3,r3,r6
   237e8:	183ff926 	beq	r3,zero,237d0 <__alt_data_end+0xfffe37d0>
   237ec:	00000106 	br	237f4 <strlen+0x78>
   237f0:	10800044 	addi	r2,r2,1
   237f4:	10c00007 	ldb	r3,0(r2)
   237f8:	183ffd1e 	bne	r3,zero,237f0 <__alt_data_end+0xfffe37f0>
   237fc:	1105c83a 	sub	r2,r2,r4
   23800:	f800283a 	ret
   23804:	2005883a 	mov	r2,r4
   23808:	003fe706 	br	237a8 <__alt_data_end+0xfffe37a8>
   2380c:	0005883a 	mov	r2,zero
   23810:	f800283a 	ret

00023814 <__register_exitproc>:
   23814:	defffa04 	addi	sp,sp,-24
   23818:	dc000315 	stw	r16,12(sp)
   2381c:	040000b4 	movhi	r16,2
   23820:	84149a04 	addi	r16,r16,21096
   23824:	80c00017 	ldw	r3,0(r16)
   23828:	dc400415 	stw	r17,16(sp)
   2382c:	dfc00515 	stw	ra,20(sp)
   23830:	18805217 	ldw	r2,328(r3)
   23834:	2023883a 	mov	r17,r4
   23838:	10003726 	beq	r2,zero,23918 <__register_exitproc+0x104>
   2383c:	10c00117 	ldw	r3,4(r2)
   23840:	010007c4 	movi	r4,31
   23844:	20c00e16 	blt	r4,r3,23880 <__register_exitproc+0x6c>
   23848:	1a000044 	addi	r8,r3,1
   2384c:	8800221e 	bne	r17,zero,238d8 <__register_exitproc+0xc4>
   23850:	18c00084 	addi	r3,r3,2
   23854:	18c7883a 	add	r3,r3,r3
   23858:	18c7883a 	add	r3,r3,r3
   2385c:	12000115 	stw	r8,4(r2)
   23860:	10c7883a 	add	r3,r2,r3
   23864:	19400015 	stw	r5,0(r3)
   23868:	0005883a 	mov	r2,zero
   2386c:	dfc00517 	ldw	ra,20(sp)
   23870:	dc400417 	ldw	r17,16(sp)
   23874:	dc000317 	ldw	r16,12(sp)
   23878:	dec00604 	addi	sp,sp,24
   2387c:	f800283a 	ret
   23880:	00800034 	movhi	r2,0
   23884:	10800004 	addi	r2,r2,0
   23888:	10002626 	beq	r2,zero,23924 <__register_exitproc+0x110>
   2388c:	01006404 	movi	r4,400
   23890:	d9400015 	stw	r5,0(sp)
   23894:	d9800115 	stw	r6,4(sp)
   23898:	d9c00215 	stw	r7,8(sp)
   2389c:	00000000 	call	0 <__reset-0x20000>
   238a0:	d9400017 	ldw	r5,0(sp)
   238a4:	d9800117 	ldw	r6,4(sp)
   238a8:	d9c00217 	ldw	r7,8(sp)
   238ac:	10001d26 	beq	r2,zero,23924 <__register_exitproc+0x110>
   238b0:	81000017 	ldw	r4,0(r16)
   238b4:	10000115 	stw	zero,4(r2)
   238b8:	02000044 	movi	r8,1
   238bc:	22405217 	ldw	r9,328(r4)
   238c0:	0007883a 	mov	r3,zero
   238c4:	12400015 	stw	r9,0(r2)
   238c8:	20805215 	stw	r2,328(r4)
   238cc:	10006215 	stw	zero,392(r2)
   238d0:	10006315 	stw	zero,396(r2)
   238d4:	883fde26 	beq	r17,zero,23850 <__alt_data_end+0xfffe3850>
   238d8:	18c9883a 	add	r4,r3,r3
   238dc:	2109883a 	add	r4,r4,r4
   238e0:	1109883a 	add	r4,r2,r4
   238e4:	21802215 	stw	r6,136(r4)
   238e8:	01800044 	movi	r6,1
   238ec:	12406217 	ldw	r9,392(r2)
   238f0:	30cc983a 	sll	r6,r6,r3
   238f4:	4992b03a 	or	r9,r9,r6
   238f8:	12406215 	stw	r9,392(r2)
   238fc:	21c04215 	stw	r7,264(r4)
   23900:	01000084 	movi	r4,2
   23904:	893fd21e 	bne	r17,r4,23850 <__alt_data_end+0xfffe3850>
   23908:	11006317 	ldw	r4,396(r2)
   2390c:	218cb03a 	or	r6,r4,r6
   23910:	11806315 	stw	r6,396(r2)
   23914:	003fce06 	br	23850 <__alt_data_end+0xfffe3850>
   23918:	18805304 	addi	r2,r3,332
   2391c:	18805215 	stw	r2,328(r3)
   23920:	003fc606 	br	2383c <__alt_data_end+0xfffe383c>
   23924:	00bfffc4 	movi	r2,-1
   23928:	003fd006 	br	2386c <__alt_data_end+0xfffe386c>

0002392c <__call_exitprocs>:
   2392c:	defff504 	addi	sp,sp,-44
   23930:	df000915 	stw	fp,36(sp)
   23934:	dd400615 	stw	r21,24(sp)
   23938:	dc800315 	stw	r18,12(sp)
   2393c:	dfc00a15 	stw	ra,40(sp)
   23940:	ddc00815 	stw	r23,32(sp)
   23944:	dd800715 	stw	r22,28(sp)
   23948:	dd000515 	stw	r20,20(sp)
   2394c:	dcc00415 	stw	r19,16(sp)
   23950:	dc400215 	stw	r17,8(sp)
   23954:	dc000115 	stw	r16,4(sp)
   23958:	d9000015 	stw	r4,0(sp)
   2395c:	2839883a 	mov	fp,r5
   23960:	04800044 	movi	r18,1
   23964:	057fffc4 	movi	r21,-1
   23968:	008000b4 	movhi	r2,2
   2396c:	10949a04 	addi	r2,r2,21096
   23970:	12000017 	ldw	r8,0(r2)
   23974:	45005217 	ldw	r20,328(r8)
   23978:	44c05204 	addi	r19,r8,328
   2397c:	a0001c26 	beq	r20,zero,239f0 <__call_exitprocs+0xc4>
   23980:	a0800117 	ldw	r2,4(r20)
   23984:	15ffffc4 	addi	r23,r2,-1
   23988:	b8000d16 	blt	r23,zero,239c0 <__call_exitprocs+0x94>
   2398c:	14000044 	addi	r16,r2,1
   23990:	8421883a 	add	r16,r16,r16
   23994:	8421883a 	add	r16,r16,r16
   23998:	84402004 	addi	r17,r16,128
   2399c:	a463883a 	add	r17,r20,r17
   239a0:	a421883a 	add	r16,r20,r16
   239a4:	e0001e26 	beq	fp,zero,23a20 <__call_exitprocs+0xf4>
   239a8:	80804017 	ldw	r2,256(r16)
   239ac:	e0801c26 	beq	fp,r2,23a20 <__call_exitprocs+0xf4>
   239b0:	bdffffc4 	addi	r23,r23,-1
   239b4:	843fff04 	addi	r16,r16,-4
   239b8:	8c7fff04 	addi	r17,r17,-4
   239bc:	bd7ff91e 	bne	r23,r21,239a4 <__alt_data_end+0xfffe39a4>
   239c0:	00800034 	movhi	r2,0
   239c4:	10800004 	addi	r2,r2,0
   239c8:	10000926 	beq	r2,zero,239f0 <__call_exitprocs+0xc4>
   239cc:	a0800117 	ldw	r2,4(r20)
   239d0:	1000301e 	bne	r2,zero,23a94 <__call_exitprocs+0x168>
   239d4:	a0800017 	ldw	r2,0(r20)
   239d8:	10003226 	beq	r2,zero,23aa4 <__call_exitprocs+0x178>
   239dc:	a009883a 	mov	r4,r20
   239e0:	98800015 	stw	r2,0(r19)
   239e4:	00000000 	call	0 <__reset-0x20000>
   239e8:	9d000017 	ldw	r20,0(r19)
   239ec:	a03fe41e 	bne	r20,zero,23980 <__alt_data_end+0xfffe3980>
   239f0:	dfc00a17 	ldw	ra,40(sp)
   239f4:	df000917 	ldw	fp,36(sp)
   239f8:	ddc00817 	ldw	r23,32(sp)
   239fc:	dd800717 	ldw	r22,28(sp)
   23a00:	dd400617 	ldw	r21,24(sp)
   23a04:	dd000517 	ldw	r20,20(sp)
   23a08:	dcc00417 	ldw	r19,16(sp)
   23a0c:	dc800317 	ldw	r18,12(sp)
   23a10:	dc400217 	ldw	r17,8(sp)
   23a14:	dc000117 	ldw	r16,4(sp)
   23a18:	dec00b04 	addi	sp,sp,44
   23a1c:	f800283a 	ret
   23a20:	a0800117 	ldw	r2,4(r20)
   23a24:	80c00017 	ldw	r3,0(r16)
   23a28:	10bfffc4 	addi	r2,r2,-1
   23a2c:	15c01426 	beq	r2,r23,23a80 <__call_exitprocs+0x154>
   23a30:	80000015 	stw	zero,0(r16)
   23a34:	183fde26 	beq	r3,zero,239b0 <__alt_data_end+0xfffe39b0>
   23a38:	95c8983a 	sll	r4,r18,r23
   23a3c:	a0806217 	ldw	r2,392(r20)
   23a40:	a5800117 	ldw	r22,4(r20)
   23a44:	2084703a 	and	r2,r4,r2
   23a48:	10000b26 	beq	r2,zero,23a78 <__call_exitprocs+0x14c>
   23a4c:	a0806317 	ldw	r2,396(r20)
   23a50:	2088703a 	and	r4,r4,r2
   23a54:	20000c1e 	bne	r4,zero,23a88 <__call_exitprocs+0x15c>
   23a58:	89400017 	ldw	r5,0(r17)
   23a5c:	d9000017 	ldw	r4,0(sp)
   23a60:	183ee83a 	callr	r3
   23a64:	a0800117 	ldw	r2,4(r20)
   23a68:	15bfbf1e 	bne	r2,r22,23968 <__alt_data_end+0xfffe3968>
   23a6c:	98800017 	ldw	r2,0(r19)
   23a70:	153fcf26 	beq	r2,r20,239b0 <__alt_data_end+0xfffe39b0>
   23a74:	003fbc06 	br	23968 <__alt_data_end+0xfffe3968>
   23a78:	183ee83a 	callr	r3
   23a7c:	003ff906 	br	23a64 <__alt_data_end+0xfffe3a64>
   23a80:	a5c00115 	stw	r23,4(r20)
   23a84:	003feb06 	br	23a34 <__alt_data_end+0xfffe3a34>
   23a88:	89000017 	ldw	r4,0(r17)
   23a8c:	183ee83a 	callr	r3
   23a90:	003ff406 	br	23a64 <__alt_data_end+0xfffe3a64>
   23a94:	a0800017 	ldw	r2,0(r20)
   23a98:	a027883a 	mov	r19,r20
   23a9c:	1029883a 	mov	r20,r2
   23aa0:	003fb606 	br	2397c <__alt_data_end+0xfffe397c>
   23aa4:	0005883a 	mov	r2,zero
   23aa8:	003ffb06 	br	23a98 <__alt_data_end+0xfffe3a98>

00023aac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   23aac:	defffd04 	addi	sp,sp,-12
   23ab0:	df000215 	stw	fp,8(sp)
   23ab4:	df000204 	addi	fp,sp,8
   23ab8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   23abc:	0001883a 	nop
   23ac0:	e0bfff17 	ldw	r2,-4(fp)
   23ac4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   23ac8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   23acc:	10000226 	beq	r2,zero,23ad8 <_exit+0x2c>
    ALT_SIM_FAIL();
   23ad0:	002af070 	cmpltui	zero,zero,43969
   23ad4:	00000106 	br	23adc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   23ad8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   23adc:	003fff06 	br	23adc <__alt_data_end+0xfffe3adc>
